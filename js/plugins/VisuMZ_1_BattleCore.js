//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.58;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.58] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x1a0039=_0x5893;function _0x53be(){const _0x444268=['prepareCustomActionSequence','close','_index','Game_Battler_onTurnEnd','BTtpb','refreshBattlerMotions','ActSeq_Movement_WaitForSpin','fittingHeight','attackStatesRate','addSingleSkillCommand','Window_BattleLog_displayCurrentState','skillWindowRect','Style','_commandNameWindow','JlcfD','currentExt','TpbGaugeOffsetY','uORDP','push','skillTypes','commandSymbol','YypIh','HP_Flat','Item-%1-%2','displayItemMessage','extraPositionY','callUpdateHelp','Scene_Battle_onEnemyCancel','ForceExploiter','addChild','canUse','bxHSi','cDEHg','Sqaso','dead\x20opponents','Game_Party_addActor','_visualHpGauge_JustDied','TCchu','RvWtx','addedBuffs','JodMM','ActSeq_Motion_WaitMotionFrame','SvWeaponSolo-%1-%2','WaitCount2','updateCallMenu','open','currentSymbol','CriticalHitRate','call','_angleWholeDuration','AddHpGaugeOption','MAXMP','vasEz','QGWMO','CoZjv','_flipScaleX','DigitGroupingDamageSprites','ActSeq_Mechanics_DeathBreak','isAtbCastingState','MuLva','addAutoBattleCommands','Window_BattleLog_displayFailure','isFightCommandEnabled','onFloatEnd','deadMembers','TMFkX','noeHs','_updateCursorArea','parse','wfPoG','frontviewSpriteY','XKcgu','QhCnp','isTpb','measureTextWidth','compareEnemySprite','ActionAnimation','SClBR','fxfvA','opacityStart','Window_BattleLog_popBaseLine','_executedValue','nHELZ','PopupPosition','mDywI','YYuBu','YzfuX','LastSelected','ArPenFlat','lIzSz','setSTBExploited','checkSubstitute','swapEnemyIDs','ecRlf','_growDuration','ActSeq_Impact_ShockwaveEachTargets','restore','isCTB','updateCustomActionSequence','uePNK','Window_ActorCommand_initialize','startJump','allowRandomSpeed','_waitMode','vrxLw','clearDamagePopup','qKmrx','removeChild','uiInputPosition','TUYIg','mRwzf','ActSeq_DB_DragonbonesTimeScale','ActSeq_Mechanics_ArmorPenetration','Scene_Battle_onActorOk','processForcedAction','ltTZl','SkewX','5532456jmMvfU','ASjPr','cancel','_wtypeIDs','onActorOk','CkSXJ','AutoBattleCancel','ShhuN','alignBattleCoreDamageSprite','GgLyB','BattleManager_isTpbMainPhase','PrioritySortActive','createAnimationContainer','kwHbu','createAutoBattleWindow','setupChild','fzrQj','FlinchDuration','preparePartyRefresh','wMlJn','updateBitmap','mmWPC','moveBattlerDistance','VisuMZ_2_HorrorEffects','updateActors','rVPmY','ActSeq_Target_RandTarget','priority','battleUIOffsetX','guard','DefaultSoftScaler','BindCommonEventKeysForObj','undecided','changeAtbCastTime','Sprite_StateIcon_updateFrame','ceil','tpbCommandFight','targetActionSet','flwKC','StateIconOffsetX','isForRandom','AddOption','getHardDamageCap','Scene_Battle_updateBattleProcess','_weaponSprite','attackAnimationIdSlot','GKBhB','PreApplyAsTargetJS','extraPositionScaledY','basicGaugesY','enemyNames','bIGBM','updateBattlebackBitmap2','Game_Battler_startTpbTurn','Sprite_Animation_targetSpritePosition','apply','itemHit','foeNr','rWEcX','CheckMapBattleEventValid','VariableID','current\x20target','setHue','displayReflectionPlayBack','setLastPluginCommandInterpreter','shift','CastMagical','VisuMZ_2_WeaponSwapSystem','resetResultSwitches','process_VisuMZ_BattleCore_CommonEventKeys','setupIconTextPopup','targetObjects','parseForcedGameTroopSettingsBattleCore','WaitForScale','bINGh','createString','VFopC','cameraOffsetDuration','actor','QCWWM','MANUAL','NQdzN','_battleCoreBattleResumeAfter','removeHorrorEffect','xpKPA','ICPVV','addChildToUiContainer','performTpbActiveCheckSwitch','createBattleUIOffsetY','PostApplyAsUserJS','_actorCommandWindow','FaceAway','cWpxM','alterChange','registerDefeatedEnemy','pointY','performActionEnd','Window_BattleLog_refresh','Window_BattleLog_displayActionResults','ykHkc','ActionEndUpdate','eltsK','PreApply%1JS','opponentsUnit','PostEndActionJS','abs','OlyPO','gainHp','setHandler','retreat','Game_Battler_performEvasion','Game_Action_executeDamage','adjustPosition_ScaleDown','gVagj','softDamageCap','_uiContainer','setImmortal','ActSeq_Camera_WaitForCamera','drawTextEx','CommandAddOptions','uCgOY','displayTpDamage','updateGrow','_itemWindow','_actionBattlers','Game_Interpreter_command283','CreateCommonEventKeys','%1Damage%2JS','slice','command119','yCOWE','_shadowScaleY','addAutoBattleCommand','changeInputWindow','isMagical','_forcedBattlers','Game_Battler_clearMotion','updateStateIconSprite','Mirror','Height','EeLhW','setupMotionBlurImpactFilter','AutoBattleBgType','code','isAlive','casting','allBattleMembers','setupRgbSplitImpactFilter','text','AdjustRect','dimColor2','isSkill','VueWm','onDatabaseLoaded','hasBeenDefeatedBefore','PostApplyAsTargetJS','DShnB','damageOffsetX','WaitForProjectile','OverallFormulaJS','isSkillItemWindowsMiddle','Sprite_Enemy_updateStateSprite','setupShockwaveImpactFilter','invokeMagicReflection','clearBattleRefreshRequest','ActSeq_Impact_MotionBlurScreen','Game_Battler_onBattleEnd','Override','Window_BattleStatus_initialize','_battleCoreForcedElements','callNextMethod','_floatDuration','sBMzA','PostDamageAsTargetJS','lNHpg','loadSvActor','lsahA','CriticalDmgRate','VisuMZ_2_BattleSystemATB','isTeamBased','getAttackMotion','isInputting','_enemyID','alterType','Variable','drawGauge','random','hpuAp','attachSpritesToDistortionSprite','Game_Action_numRepeats','NameOffsetX','process_VisuMZ_BattleCore_Failsafes','XoTRC','ConfigManager_makeData','makeSuccess','ActSeq_Camera_Clamp','%1RegenerateJS','_growEasing','rwZum','startActorSelection','description','battlerShadowScaleX','blt','DefaultStyle','isLearnedSkill','ConfigManager_applyData','numRepeats','Width','displayBuffs','showNormalAnimation','resizeWindowXPStyle','Game_Action_itemEffectAddNormalState','SwitchCritical','Sprite_Actor_setBattler','Game_Enemy_transform','clearHorrorEffects','applyHardDamageCap','sideview_ui','front\x20center','ActSeq_BattleLog_WaitForBattleLog','Game_BattlerBase_isStateResist','ActSeq_Weapon_ClearActiveWeapon','ActSeq_Mechanics_FtbAction','startPartyCommandSelection','hIUTy','qioKd','name','requestAnimation','AnchorY','svBattlerData','createPartyCommandWindow','BattleCmdList','Window_BattleLog_performCollapse','_commonEventKey','item','_shadowScaleX','checkBattleEnd','FocusY','BattleManager_onEscapeFailure','ActSeq_Movement_Float','rjcbI','shouldPopupDamage','Slot','addedDebuffs','_battlerHue','qAPyf','maxCols','refreshDimmerBitmap','_allTargets','isBorderStylePortraitShown','_stateIconSprite','autoMeleeSingleTargetActionSet','_targetGrowX','12bqRgmk','drawItemImageXPStyle','Sprite_Battler_damageOffsetY','onBattleStartBattleCore','Game_Map_battleback1Name','top','_skillWindow','ActSeq_Animation_PlayAtCoordinate','selectNextActor','isSTB','ActSeq_Mechanics_HpMpTp','ibQQl','OffsetX','requestPointAnimation','battleUIOffsetY','singleSkill','uXIXv','performReflection','eAoTO','CriticalColor','turnCount','regenerateAll','action','skewDuration','repeats','isGrowing','tHfsv','ActSeq_Set_SetupAction','_customDamageFormula','qxsRU','loadWindowskin','setBattleCameraOffset','setSvBattlerSprite','HpGaugeOffsetY','VisuMZ_2_BattleSystemOTB','_battleLayoutStyle','QGZOR','forceMotion','JS\x20BATTLE\x20VICTORY','_baseX','Game_BattlerBase_initMembers','Radius','updateVisibility','Scene_Battle_helpWindowRect','Sprite_Battler_initMembers','user','arPenFlat','TVNVo','mpDamage','_flinched','ShowPortraits','vkIHs','createBorderStylePortraitSprite','Targets1','Window_BattleLog_performCounter','xlzaE','QoL','ArRedRate','onEscapeSuccess','damageRate','fyIfu','zyWvU','battleGrow','Exploiter','_stateSprite','skew','mainFontSize','zelCe','createBattleFieldBattleCore','extraHeight','ATTACK','opacity','JS\x20%1START\x20TURN','ActSeq_Camera_FocusTarget','updateShadowScale','JxxBq','_actorSprites','isBreakStunned','RdMiE','ActSeq_Movement_Spin','Sprite_Enemy_update','StatusWindowAttachmentFrontOffsetY','performRecovery','GlplY','setVisibleUI','canEscape','_motionType','ActSeq_Movement_FaceDirection','qGSiD','escape','WaitForSkew','isOpponent','_forcedBattleLayout','SwUkE','qiHhu','CmdIconAutoBattle','WaitForMovement','dFXhn','processVictory','movement','return\x200','VisuMZ_0_CoreEngine','ParseWeaponNotetags','fnordRemovedStates','Window_BattleLog_displayTpDamage','callOkHandler','MOTIONS','TiWUs','Actor-%1-%2','jkmYK','preemptive','performAttack','JLnZC','UNTITLED','xPnsX','setupZoomBlurImpactFilter','YAFob','bcZTq','hhKmh','isBattlerGrounded','hpDamage','message4','hasSvBattler','SkipPartyCmd','isJumping','<CUSTOM\x20ACTION\x20SEQUENCE>','getSkillIdWithName','playEnemyAttack','WeaponTypeID','Formula','Game_Action_setAttack','stateRate','_eventId','inMvY','alive\x20friends\x20not\x20user','_isBattlerFlipped','effect','isAnyoneJumping','isPreviousSceneBattleTransitionable','_baseLineStack','WkLIU','urAtt','padding','_deathStateApplied','HitRate','ActionEffect','VisuMZ_3_WeaknessDisplay','ActSeq_Movement_HomeMoveToTarget','weapons','evade','BVAXU','process_VisuMZ_BattleCore_CreateRegExp','updateWeather','result','displayChangedStates','linkSprite','canAttack','Game_Action_isForFriend','qrtrf','displayFailure','isFloating','createPartyCommandWindowBattleCore','CYphO','okMMm','applyData','vUXuO','startAction','isForFriendBattleCore','hitFlat','WEAPON\x20SWAP','ActSeq_Horror_NoiseRemove','ActSeq_Animation_AttackAnimation','VisuMZ_4_CombatLog','uzVeJ','startHomeMove','skillId','guardSkillId','_ptbActionCost','Sprite_Damage_createChildSprite','atbInterrupt','isActor','isDamagePopupRequested','changeAtbChargeTime','CnsGd','rvDtp','setupActionSet','_jumpHeight','setBattleZoom','createStateSprite','createLowerLayer','gainBravePoints','string','isSkipPartyCommandWindow','pLQxz','changeCtbChargeTime','CmdIconItem','onBattleEndBattleCore','battleMove','StateIconOffsetY','onEscapeFailure','removeOnceParallelInterpreter','ShowPopup','displayChangedBuffs','MP_Flat','IoGvH','contents','type','_back2Sprite','processEscape','KTgBm','makeTargetSprites','getTraitSetKeys','ufaWQ','createMiss','right','idsTV','onOpacityEnd','waitForAnimation','hlvdR','isBypassDamageCap','Window_BattleLog_performRecovery','becomeSTBExploited','endAnimation','options','lprQg','isPlaytest','battlelog','hpHealingFmt','setCustomDamageFormula','aInhG','Game_Action_apply','requestMotionRefresh','setWaitMode','getDamageStyle','placeActorName','BattleManager_onEscapeSuccess','_pattern','TextColor','isMagicSkill','Sprite_Actor_moveToStartPosition','anchor','createEmptyBitmap','alive\x20friends\x20not\x20target','onEncounter','anchorY','FOibs','windowPadding','getItemDamageAmountLabelBattleCore','ActSeq_Target_CurrentIndex','xSHYa','destroy','battleback1Name','mainSpriteScaleX','yZVIg','pVUGh','commandStyle','join','_damagePopupArray','isOkEnabled','removeImmortal','compatibilityVisible','changePaintOpacity','showPortraits','_targetGrowY','addChildToBack','2300811nfDYcZ','Sprite_AnimationMV_updatePosition','+%1\x20MP','WaitForZoom','WaitForCamera','applyGlobalCommonEventNotetags','createBattleField','AlphaFilter','VBeGn','VisuMZ_2_BattleSystemSTB','length','PjaKF','context','BattleManager_checkBattleEnd','_svBattlerData','createShadowSprite','isBattleRefreshRequested','gXgpu','ActSeq_Mechanics_Collapse','setGuard','drawItemImagePortraitStyle','addPartyCommand','initBattleCore','updateMain','UZBmR','ActSeq_Movement_FacePoint','2ctzHjH','_tempBattler','BattleManager_processDefeat','processDefeat','waitCount','commandEscape','_iconIndex','growBattler','PostEndTurnJS','XWfdc','startDamagePopup','NyQZk','KPKrz','VisuMZ_3_ActSeqImpact','_lastEnemy','_jumpDuration','drawSkillCost','AllowRandomSpeed','worldTransform','isForOpponent','Scene_Battle_initialize','Post','isOpen','BattleVictoryJS','Spriteset_Battle_update','updatePhase','coreEngineRepositionEnemies','JS\x20ESCAPE\x20FAILURE','AKSbK','ZIViq','dybEO','initBattlePortrait','Scene_Options','SvMotionIdleSolo-%1-%2','commandNameWindowDrawBackground','actionEffect','NameAlwaysHidden','ActSeq_Mechanics_CustomDmgFormula','updateUiContainerPosition','createAnimationSprite','Window_BattleLog_performMagicEvasion','HelpItem','performActionStart','CombatLogIcon','GzKaf','NameAlwaysVisible','_onceParallelInterpreters','Sprite_Battler_damageOffsetX','addGeneralOptions','canBattlerMove','VisuMZ_2_BattleSystemETB','pHemC','addBattleCoreAutoBattleStyleCommand','JhajT','pjZas','kIlAQ','ResetFocus','alterPriority','VPnQG','centerFrontViewSprite','Sprite_Enemy_updateBossCollapse','ShowAddedState','Sprite_Actor_createStateSprite','FUNC','_updateClientArea','power','_animationCount','isPhysical','_updateCursorFilterArea','Sprite_Weapon_loadBitmap','textAlign','_effectType','_dragonbonesSpriteContainer','hide','isBattleCoreTargetScope','vWBez','_lastPluginCommandInterpreter','States','snapForBackground','applyAngleChange','AttachStateOffsetX','\x20to\x20%1\x20midbattle.','createKeyJS','ActSeq_Skew_Reset','Window_PartyCommand_initialize','actorCommandAutoBattle','ActSeq_Movement_HomeReset','isAutoBattleCommandAdded','updateStateSpriteBattleCore','cpNBk','canAttackBattleCore','getWtypeIdWithName','IEXQg','ActSeq_Movement_FaceTarget','ActionItemMsg','setCommonEvent','gWZmD','resizeWindowBorderStyle','RhRTV','ParseEnemyNotetags','Opacity','Misxl','CalcEscapeRatioJS','_createCursorArea','TimeScale','ITEM','_targetIndex','qmsAI','isSelected','removeStatesAuto','%1StartActionJS','charging','mhp','jumpBattler','commandOptions','CmdTextAlign','battleAnimation','Xtzdr','createHelpWindowBattleCore','moveBattlerToPoint','BattleDefeatJS','ActSeq_Projectile_Animation','ParseSkillNotetags','missle','isDuringNonLoopingMotion','Intensity','PvXTF','TargetLocation','getColor','updateBorderStyle','sRdpK','Game_Battler_forceAction','attackMotions','battleMembers','isChangingOpacity','buffRemove','stypeId','HlRVt','_enemyNameContainer','fontSize','refreshMotion','VKzso','_floatWholeDuration','process_VisuMZ_BattleCore_Action_Notetags','FMiHo','AACso','rgOKb','isATB','xdwyo','faceWidth','battleJump','ActionSkillMsg2','createWeather','AnchorX','ActSeq_Weapon_NextActiveWeapon','Exploited','lMHck','EVAL','ActionSequence','center','windowskin','actorId','clearActiveWeaponSet','VRinr','getEnemyIdWithName','currentClass','loadBitmap','friendsUnit','ActSeq_Element_Clear','ActSeq_Movement_Skew','FJWhM','mBQdY','WaitForSpin','bBzAL','ShowRemovedState','updateMotionCount','battleEnd','start','isBusy','_createEffectsContainer','animationNextDelay','makeTargets','refreshStatusWindow','_speed','itemLineRect','_jumpWholeDuration','MoZVW','chantStyle','updateSpin','Destination','_escapeRatio','_activeWeaponSlot','_floatEasing','JS\x20%1DAMAGE\x20%2','AntiTintUiElements','mainSpriteWidth','BattleManager_inputtingAction','applyCritical','Scene_Battle_start','Window_BattleLog_pushBaseLine','displayAffectedStatus','yJHkd','setBattler','fillRect','updateShadowPosition','CmdIconOptions','_skewX','setBackgroundType','RtnFo','getDefeatedEnemies','Scene_Battle_startEnemySelection','svShadow','textSizeEx','ZxOiv','gradientFillRect','wHlSs','BqXwU','portrait','SmoothImage','CriticalHitFlat','finishActionSet','iXpeS','Scene_Battle_startActorSelection','getBattlePortraitOffsetX','setBattleSkew','HDEBX','JS\x20%1APPLY\x20%2','alUQf','endAction','VisuMZ_2_BattleSystemPTB','commandNameWindowDrawText','left','getNextSubjectFromPool','backColor','iconText','drawActorFace','bitmap','eVyHi','DNxxs','KGkPK','visible','Scene_Battle_startPartyCommandSelection','canAddSkillCommand','HBtjq','sfXRj','Window_BattleLog_update','PreEndActionJS','getSkillTypes','_animationSprites','zhTxP','addedStateObjects','removeBuff','HkDAB','MPMqv','YOKgp','dying','Linear','auPuF','Skills','_growY','displayBattleCoreTransitionErrorMsg','EscapeFailureJS','onEncounterBattleCore','ActSeq_Movement_WaitForScale','CommandVisible','_borderPortraitTargetX','AUTO\x20BATTLE','bgType','needsSelection','createDamageSprite','isActing','_enemy','initialize','checkShowHideSkillNotetags','log','Direction','makeDamageValue','_backAttachmentSprite','MFENc','amQpV','oJJQn','Window_BattleLog_displayCritical','BattleManager_onEncounter','BattleManager_cancelActorInput','iXBoD','vZmlv','updateFrame','NameLegacy','fight','alive\x20actors\x20not\x20target','Buffs','Immortal','allowCollapse','_cursorArea','_item','_offsetX','ZTcjQ','PreRegenerateJS','QjqgZ','waitForOpacity','actionBattleCoreJS','exit','playOnceParallelInterpreter','battlerSprites','JzJAa','updatePosition','ActSeq_Impact_MotionTrailRemove','ActSeq_Mechanics_VariablePopup','angleDuration','isHidden','showAnimation','_flashColor','_freezeMotionData','min','process_VisuMZ_BattleCore_jsFunctions','ZZaaC','isAnyoneMoving','FaceDirection','wtypeId','destroyDamageSprite','addAttackCommand','initVisibility','revertTpbCachedActor','DPuKt','_battler','addOptionsCommand','Btosa','ActSeq_Movement_WaitForSkew','weatherPower','applyFreezeMotionFrames','Game_Action_isForOpponent','_homeDuration','QIauP','MDF','getItemDamageAmountLabelOriginal','slices','CcAaU','uzvGd','pRoTK','resetFontSettings','damageContainer','isFrameVisible','ubzNT','isSpriteVisible','hrZmA','Actor','ShuffleArray','iIYVm','startBattle','some','BattleManager_processVictory','alive\x20friends','autoMeleeMultiTargetActionSet','kZDpV','_skewDuration','Qdivt','_borderPortraitDuration','ActSeq_BattleLog_Clear','PreDamageJS','startGrow','createDigits','Sprite_Actor_updateShadow','startSkew','makeActions','KmrBy','_targetFloatHeight','Battleback','updateScale','setupTextPopup','sortDamageSprites','zdyke','PDqWQ','VFNTG','Game_Map_encounterList','Rate','ghLLm','pQJsF','waitForMovement','ConvertParams','battleEffect','autoBattleUseSkills','FuTUb','getHalfActionsPTB','drawSingleSkillCost','ParseClassNotetags','performSubstitute','ActiveTpbOptionsMessage','ApplyImmortal','enemyId','ActSeq_BattleLog_PushBaseLine','Game_Action_makeTargets','HP_Rate','performAttackSlot','border','uElkC','createActionSequenceProjectile','stbGainInstant','addState','dead','_damageContainer','setupBattleCoreData','gainHalfActionsPTB','ActSeq_Mechanics_BtbGain','partyCommandWindowRectBorderStyle','ActSeq_Motion_MotionType','ActSeq_Projectile_Picture','refresh','xmgYM','freezeFrame','_tempActor','createAttachedSprites','RiDuA','SzoNG','EFFECT_COMMON_EVENT','Debuffs','setupMotion','_tempEquipCheck','BattleManager_checkSubstitute','asTAe','EtuLZ','isAutoBattle','clearResult','CastAnimation','createHelpWindow','wUbuq','DualWield','_inputting','createActors','Wave','dsNjU','checkShowHideBattleNotetags','updateStart','actorCommandCancelTPB','lLiUf','mlKFp','MuoSp','ForceRandom','dragonbonesData','svAnchorY','performJump','updateBattlebackBitmap','thrust','_enemies','JS\x20ESCAPE\x20SUCCESS','windowAreaHeight','battlerShadowScaleY','NPlid','Scene_Battle_selectNextCommand','isDisplayEmergedEnemies','cWZxL','EnableSoftCap','getMenuImage','_targetHomeY','performCastAnimation','requestMotion','addTextToCombatLog','VwlZV','-%1','createStateIconSprite','reserveCommonEvent','rqqKS','DefeatEvent','hue','DistanceX','xjeBI','svBattlerAnchorX','createEffectActionSet','ZQzBE','_requestRefresh','_floatHeight','performCollapse','waitForEffect','format','StepDistanceX','RQLhf','DamageType%1','startInput','svBattlerShadowVisible','_skewY','getConfigValue','_damages','WaitForAnimation','isAnyoneGrowing','wOlVT','Knwra','qVxcx','updateAttachmentSprites','_weather','ActionSkillMsg1','zrRao','ShowActorGauge','putActiveBattlerOnTop','KNFsb','refreshRequest','waitForJump','removeBuffsAuto','Class-%1-%2','FDkBp','isForRandomBattleCore','PostStartActionJS','damageFlat','PrioritySortActors','Angle','waitForNewLine','CommandWidth','ActSeq_Set_FinishAction','ShowHide','UrkdF','Scene_Party','icon','Settings','uuhkR','xiGjo','POJqD','aliveMembers','ActSeq_Element_AddElements','_createDamageContainer','540924PCwWII','drawItemImageListStyle','YhYvv','ActSeq_ChangeSkew','trueRandomTarget','Scene_Battle_skillWindowRect','%1EndTurnJS','rlpYn','Scene_Battle_itemWindowRect','createChildSprite','GOQiF','setValue','clearBattlerMotionTrailData','Defeat','AutoBattle','getBattlePortrait','damage','PostRegenerateJS','Parse_Notetags_Targets','_lastRegenFrameCount','Enemy-%1-%2','vzjlm','duration','updateShadowVisibility','innerWidth','myjAw','itemEffectAddAttackState','onTurnEnd','naXnN','_reflectionTarget','applyEasing','isDTB','ActSeq_Angle_WaitForAngle','clamp','STRUCT','ActSeq_Movement_Scale','LbxCj','mBtKs','pKhha','uyuqN','Game_Party_removeActor','lUFEY','_enemyId','FullActions','drawTextTopAligned','Game_Battler_performMiss','scope','vkXjE','oWelw','Game_Action_isForRandom','HpGaugeOffsetX','Scene_Battle_createActorCommandWindow','_enemyIDs','isBattleFlipped','displayMpDamage','spriteId','_angleRevertOnFinish','BattleManager_endBattle','fnordAddedStates','ActSeq_BattleLog_DisplayAction','scale','NSfBe','battleOpacity','JXnrv','onHomeMoveEnd','_lineHeight','ActSeq_Mechanics_OtbOrder','statusWindowRect','createCommandVisibleJS','ShowTpDmg','createBattleUIOffsetX','JS\x20%1START\x20ACTION','helpWindowRect','Window_BattleLog_clear','buffAdd','_motion','gainStoredBoostPoints','isIncludedInEnemyWindow','_emptyBitmap','gaugeX','ActSeq_Horror_TVRemove','isAnimationShownOnBattlePortrait','ParseArmorNotetags','Sprite_Actor_update','PreStartTurnJS','State-%1-%2','_dimmerSprite','RYsae','forceSelect','QhBUZ','subject','Name','XMSQD','setSkill','aTmJa','TpbActiveChangeEnabled','PEaJr','Turns','setBattlerFacePoint','filter','showHelpWindow','Window_BattleEnemy_initialize','TBryJ','zGNMF','startWeaponAnimation','clearForcedGameTroopSettingsBattleCore','commandNameWindowCenter','skills','members','drawIcon','_armorPenetration','gAfeh','ScaleUp','hySXv','_text','_action','isNextSceneBattleTransitionable','reduce','_targetOpacity','selectPreviousCommand','Game_Battler_performActionStart','ymOMg','_actorWindow','Parse_Notetags_TraitObjects','CwTtB','DefaultDamageStyle','battleStatusWindowAnimationContainer','ActSeq_Mechanics_OnceParallel','XPSpriteYLocation','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','_methods','process_VisuMZ_BattleCore_Notetags','applyTargetFilters','setup','onAllActionsEnd','bNKcS','JtMFh','QOdFe','attackAnimationId2','startOpacity','ShowAddedDebuff','criticalDmgFlat','updatePositionBattleCore','contentsOpacity','isQueueOptionsMenu','performAction','isAppeared','65SQshBq','QETLN','freezeMotion','_windowLayer','isOTB','move','ActSeq_Motion_PerformAction','performCounter','ActSeq_Motion_ClearFreezeFrame','cRtkr','getLastPluginCommandInterpreter','custom','IUUBe','ThxBw','lineHeight','updateJump','fRXYL','drawBackgroundRect','battleback2Name','updateBossCollapse','getBattlePortraitFilename','RwKYY','isCustomBattleScope','ActSeq_Horror_GlitchCreate','battleZoom','param','updateAngleCalculations','DamageDisplay','_battlerName','checkAutoCustomActionSequenceNotetagEffect','sortEnemies','updateInterpreter','battleCameraData','index','ActSeq_Angle_Reset','traitObjects','displayMiss','ShowCosts','head','ActSeq_Element_NullElements','OMekK','gPlPk','setHelpWindow','EhxSy','forceEscapeSprite','Window_BattleLog_performEvasion','LLPvq','AS\x20USER','oWFdj','parent','repositionCancelButtonBorderStyle','_homeX','WvpPQ','displayReflection','autoBattleStyle','sleep','setCursorRect','isForAll','TP_Rate','dXytl','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','remove','dMZoR','removeAnimationFromContainer','performDamage','JumpToLabel','adjustPosition','ActionStart','HFvKQ','Spriteset_Battle_updateActors','damageStyle','updateStaticSvBattlerFrames','gmjgi','ActSeq_Mechanics_StbRemoveExcessActions','15048bKBtDX','Game_Map_setupBattleback','missile','visualHpGauge','dGFPY','autoBattleWindowRect','isNonSubmenuCancel','StyleON','ShowAddedBuff','PNepc','onSelectAction','setFrame','updatePadding','setText','BlORL','addItemCommand','Sprite_Battler_isMoving','addSkillCommands','placeGauge','xjfQQ','CmdStyle','canMove','Window_ItemList_maxCols','createEnemies','svBattlerAnchorY','Scene_Battle_onActorCancel','mVaKP','mainSpriteScaleY','WaitComplete','OXJSs','Scene_Map_initialize','PopupDuration','Game_Action_evalDamageFormula','boxWidth','ParseItemNotetags','_targetAngle','ShowFacesListStyle','changeBattlerOpacity','processRandomizedData','IconStypeMagic','hasStaticSvBattler','880QBVshY','pVvVV','RVaHY','inputtingAction','createSeparateDamagePopups','isSceneChanging','yzjlr','tkfnB','fOxEL','addChildAt','SkillItemBorderCols','setActiveWeaponSlot','vYKcF','setActiveWeaponSet','_animationContainer','WaitForAngle','NlInm','onEnemyOk','inputting','makeDeepCopy','popBaseLine','setupBattleback','isBattleSys','OffsetY','Amp','applyBattleCoreJS','displayHpDamage','VisuMZ_1_ElementStatusCore','SkewY','textBaseline','walk','_actions','drawItemStatusXPStyle','isAnyoneSpinning','loadEnemy','jump','ScaleToFit','SkillItemMiddleLayout','ARRAYSTR','anchorX','ajair','includes','StartTurnShow','WaitCount1','MIN_SAFE_INTEGER','AXeRw','statusText','_cursorSprite','moveBattlerHomeToPoint','ParseStateNotetags','surprise','clearFreezeMotionForWeapons','prev\x20target','OiYXz','hardDamageCap','makeEscapeRatio','createTroopNote','battleSkew','updateCommandNameWindow','_regionBattleback1','magicReflection','_angleDuration','ROJZR','Game_BattlerBase_refresh','isFTB','_tpbSceneChangeCacheActor','IlEPe','itemTextAlign','pow','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','_forcedHomeY','WkYXJ','updateCancel','VisuMZ_3_ActSeqCamera','optDisplayTp','startEnemySelection','QzRAl','ActSeq_Movement_Opacity','Actions','eraseState','okTargetSelectionVisibility','jaIQf','_effectDuration','XoCha','SvKCA','gnUid','status','STYPES','waitForFloat','pNVCU','isPTB','BattleLog','AGI','Scene_Boot_onDatabaseLoaded','innerHeight','bitmapWidth','popupDamage','frameCount','toUseBoostPoints','initMembersBattleCore','save','isCustomActionSequence','battlerSmoothImage','processAnimationRequests','uocdg','ActSeq_Animation_ActionAnimation','TpcNd','TpGaugeOffsetX','gMlqX','CastPhysical','KqkRV','WaitForJump','updateBorderSprite','canInput','_multipliers','pUomf','isTurnBased','TpbGaugeOffsetX','tone','magicSkills','_motionCount','arRedFlat','isPartyTpbInputtable','XPActorCommandLines','DgiSE','battleProjectiles','StatusWindowSelectableBackHide','nameY','findTargetSprite','isItem','sliceMax','show','applyDamageCaps','JsalS','PreDamageAsTargetJS','ActSeq_Movement_MoveBy','StartTurnWait','logWindowRect','battleCoreTpbMainPhase','performMoveToTargets','getAttackMotionSlot','battleSys','isDying','turnOrderChangeOTB','isImmortal','Game_Action_clear','svAnchorX','DefaultSoftCap','resetBreakShield','UfymL','Game_Enemy_setup','_tpbNeedsPartyCommand','processBattleCoreJS','formula','alterCost','mXPRZ','_targetSkewX','LECor','Game_Battler_makeSpeed','partyCommandWindowRectDefaultStyle','VariableDmg','_stypeIDs','gainFullActionsPTB','_drawTextOutline','updateOpacity','autoBattle','QPnOT','Sprite_Battler_updateMain','frameVisible','processRefresh','GUARD','BravePoints','BattleLayout','ActSeq_Mechanics_DamagePopup','collapse','battler','_list','initMembers','iXQRA','TP_Flat','ARRAYNUM','Game_BattlerBase_die','ShowSubstitute','NameAlwaysSelectOnly','updateSkew','playOnceParallelTroopPage','victory','commandAutoBattle','erOsz','zqiOH','needsActorInputCancel','updateStateSprite','uptkY','hyUrR','_jumpMaxHeight','BattleManager_startTurn','Rrmvz','battleCoreResumeLaunchBattle','weaponImageId','pTcwN','battleCorePreBattleCommonEvent','IVhNL','removedStateObjects','message1','ANTI_TINT_UI','_branch','traitSet','drawItemStatusListStyle','Rqklq','drawItem','ZLVxR','visibilityState','ZhihF','updateEffectContainers','ActSeq_Target_PrevTarget','1256aQIpPq','bottom','TvVUp','gjTgM','ERcfs','battleCamera','ActSeq_Mechanics_TextPopup','DistanceY','Scene_ItemBase_applyItem','NkRrl','onJumpEnd','isCommandEnabled','lHEaf','VKRcy','TtbtE','VFnqP','AsUser','applyArmorModifiers','VisuMZ_1_MainMenuCore','_surprise','isTickBased','ActSeq_Set_TargetActionSet','statusWindowRectDefaultStyle','isSpinning','isTpbMainPhase','stepBack','jnSrI','skillItemWindowRectMiddle','command357','messageSpeed','randomInt','process_VisuMZ_BattleCore_DamageStyles','prototype','makeSpeed','_frame','Sprite_Actor_setActorHome','oIwXP','BattleManager_startBattle','displayEvasion','maxBattleMembers','removedBuffs','WWsyo','isAlwaysHidden','EhtkL','loadSystem','makeHpDamageText','statusWindowRectBorderStyle','refreshActorPortrait','activate','_helpWindow','50281xEYLBM','CurrentTurn','getDualWieldTimes','alive\x20enemies','KYvbg','Game_BattlerBase_addNewState','pqOzb','HpGauge','BattleStartEvent','addSingleSkillCommands','setHome','Window_Options_addGeneralOptions','active','process_VisuMZ_BattleCore_TraitObject_Notetags','clearWeaponAnimation','PostDamageAsUserJS','loop','toLowerCase','_attackAnimationId','FollowTurn','Mute','ePnTR','gaugeLineHeight','sQsFS','Sprite_Battleback_adjustPosition','DistanceAdjust','PostStartTurnJS','_opacityEasing','alive\x20battlers\x20not\x20target','_battlePortrait','qORff','displayActionResults','Window_BattleLog_performReflection','GTKRh','RegExp','Zhqbz','removeDamageSprite','unshift','customDamageFormula','fLJiX','_flashDuration','UhSXF','clearFreezeMotion','NewPopupBottom','maxCommands','VisuMZ_2_DragonbonesUnion','isAnyoneSkewing','TextAlign','_updateFilterArea','TpGaugeOffsetY','updateStatusWindowPosition','azgWu','FktbF','FQyYZ','Window_BattleLog_performMiss','useDigitGrouping','list','Window_BattleLog_displayMiss','startFloat','hasSkill','loadPicture','StatusWindowAttachmentBackOffsetX','StatusWindowAttachmentBack','_linkedSprite','fjNfh','ShowEnemyGauge','ConvertActionSequenceTarget','motionIdle','Game_Action_needsSelection','updateEventMain','animationBaseDelay','Text','_enemySprites','selectNextCommand','BattleEndEvent','Victory','wait','onActorCancel','PortraitScaleBorderStyle','createAllWindows','BattleManager_selectNextCommand','JS\x20%1END\x20BATTLE','swing','makeActionListAutoAttack','mmp','performMagicEvasion','ehyAJ','map','isGuardWaiting','_homeEasing','LdFDr','Armor-%1-%2','battleSpriteSkew','drawLineText','jrWkr','drawText','ShowRemovedBuff','DisablePartyCmd','applyGlobal','updateOnceParallelInterpreters','ActSeq_Weapon_SetActiveWeapon','MeleeDistance','getFullActionsPTB','performFlinch','Scene_Battle_terminate','command3011','ActSeq_BattleLog_UI','_baseTexture','ActSeq_Mechanics_ActionEffect','switchToWeaponType','_partyCommandWindow','Scene_Battle_createCancelButton','invokeAction','jZQOQ','Game_Interpreter_PluginCommand','_shadowSprite','vPzEO','Elements','turn','BattleManager_updatePhase','Spriteset_Battle_createBattleField','evalDamageFormula','SkillsStatesCore','ReflectAnimation','VikHM','autoSelect','performEvasion','ChargeRate','Sprite_Actor_initMembers','drawItemImage','PRE-','YoFiU','cameraClamp','extraPositionX','equips','_preemptive','NBXxz','velBB','setActionState','makeTargetsBattleCore','clearMotion','MKBFd','Scene_Battle_createHelpWindow','Game_BattlerBase_eraseState','aBjZH','ActSeq_Element_ForceElements','SwWrd','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','requestFauxAnimation','partyCommandWindowRectXPStyle','ActSeq_Mechanics_PtbFullHalfAction','alive\x20battlers','TeNQY','commandName','xRVhI','ConvertCount','_colorType','dead\x20enemies','clearElementChanges','PreStartActionJS','_scene','QKIFK','updateWaitMode','AutoBattleRect','bhILd','ShowPortraitsBorderStyle','ARRAYEVAL','terminate','iconIndex','ActSeq_Mechanics_BreakShieldChange','StatusWindowAttachmentFront','bOwHK','process_VisuMZ_BattleCore_PluginParams','NvoZC','_duration','CopyCombatLog','bEgVg','isEnemy','awJSV','needsSelectionBattleCore','die','_displayBattleCoreTransitionErrorMsg','HelpAutoBattle','actionSplicePoint','expRate','LUK','critical','isGuard','isDebuffAffected','UxCMK','smooth','StyleOFF','zkqXb','%1EndBattleJS','applyResultSwitches','ActSeq_Mechanics_AddBuffDebuff','weatherType','AsTarget','ObyjL','dead\x20battlers','alive\x20enemies\x20not\x20target','mWpVh','recoverAll','addSkillTypeCommand','boxHeight','isAnyoneFloating','displayType','BreakShields','ActSeq_Mechanics_RemoveBuffDebuff','UtFDr','NpcyQ','applyImmortal','SKILLS','isFlipped','setupHpGaugeSprite','getItemDamageAmountTextOriginal','PopupShiftX','clearBattleCoreData','Window_BattleEnemy_show','jvnaE','origin','CalcEscapeRaiseJS','toString','parameters','stop','AttackAnimation','NrGKa','pushBaseLine','gsSAN','selectNextCommandTpb','makeActionOrders','HiblD','pfekw','NameFontSize','ActSeq_Motion_RefreshMotion','EkkEI','startAttackWeaponAnimation','createDistortionSprite','isEffecting','children','glitch','reverse','bQmul','tEpaA','processPostBattleCommonEvents','createCommandNameWindow','qmWDs','MotionType','_growWholeDuration','CriticalHitMultiplier','FlashColor','updateFloat','contains','setupBattleCore','Targets2','cJead','process_VisuMZ_BattleCore_PreBattleCommonEvent','makeTargetSelectionMoreVisible','noSimilarSTypes','ShowFailure','Sprite_Battler_updatePosition','_targetSkewY','qFLvM','createCancelButton','CriticalDmgFlat','setupCriticalEffect','GmwNk','ActSeq_BattleLog_WaitForNewLine','JSON','match','wgaAW','_battleCoreAddedElements','animationId','ActSeq_Animation_ChangeBattlePortrait','_skewEasing','spinBattler','isPartyCommandWindowDisabled','KuSBK','isAffectedByBreakShield','updateHpGaugePosition','Scene_Battle_commandFight','yvhlH','attackAnimationId1','unchanged','Sprite_Battler_setBattler','ActSeq_Camera_FocusPoint','ActSeq_Mechanics_Multipliers','tSzXp','qTGNR','_weaponImageId','tpbActorSwitchConditionsMet','ENjcq','%1StartTurnJS','QdsvU','tQUEj','Pre','svBattlerName','HelpFight','ElementStatusCore','isTpbCharged','_homeWholeDuration','gainCurrentActionsFTB','partyCommandWindowRect','isNextScene','Enemy','Sprite_Enemy_setBattler','isAnyProjectilePresent','uIelJ','isOptionsCommandAdded','updateBattlerContainer','isFriendly','ActSeq_Mechanics_WaitForEffect','VisuMZ_2_BattleSystemCTB','Gazti','XaPvE','_forcedHomeX','compareBattlerSprites','_angleEasing','_cacheTextWidth','isAttack','ActSeq_Mechanics_PtbConvert','Sprite_Battler_update','ActSeq_Mechanics_StbExploit','addText','ZNuri','autoSelectLastSelected','StartName','AnimationID','loadBattleback2','ActSeq_Mechanics_CtbOrder','getInputButtonString','Strength','addImmortal','isStateResist','registerCommand','isChanting','setTroopPage','randomTargets','StatusWindowSkinFilename','taatf','Scene_Battle_partyCommandWindowRect','EfoiW','QGATB','WaCaf','note','rAvXM','isCharging','HygER','VisuMZ_4_BreakShields','BOAeU','ForceExploited','IODrc','PopupShiftY','drawItemBackground','Game_Troop_setup','isActiveTpb','CONio','PreApplyAsUserJS','CreateActionSequenceTargets','addOnceParallelInterpreter','CmdIconFight','height','GroupDigits','updateTargetPosition','trim','_svBattlerSprite','setupDamagePopup','_currentAngle','_battlerContainer','onSkewEnd','isVisualHpGaugeDisplayed','autoBattleStart','AutoMeleeSolo','EscapeSuccessJS','yStTD','_createClientArea','QFAxd','makeAutoBattleActions','setBattlePortrait','BTestBypass','BZqMB','Setting','create','aTPqV','IPCWd','createBattleFieldContainer','ZCRAg','attackSkillId','VisuMZ_3_ActSeqProjectiles','PreStartBattleJS','Scene_Battle_createAllWindows','flashColor','PreEndBattleJS','performActionEndMembers','displayCritical','TWtbh','addLoadListener','onAngleEnd','plJuK','UWVDX','updateShadowBattleCore','ActSeq_Impact_ShockwavePoint','isOptionsCommandEnabled','ActSeq_Mechanics_EnemyEscape','ZNlXf','iOtRo','Game_Temp_requestAnimation','iconWidth','_battleCoreNoElement','statusTextAutoBattleStyle','_frontAttachmentSprite','_currentActor','Game_Action_itemHit','callOptions','ZPrNy','NIUjh','updateHomeMove','setHelpWindowItem','_opacityDuration','meLgl','Scene_Battle_windowAreaHeight','mainSpriteHeight','isETB','actorCommandEscape','createDamageContainer','adjustPosition_ScaleUp','statusWindowRectXPStyle','kDatf','regionId','PostStartBattleJS','isBTB','vcYki','Window_BattleLog_performActionStart','JS\x20%1END\x20TURN','HomePosJS','setHorrorEffectSettings','Scene_Battle_logWindowRect','applyForcedGameTroopSettingsBattleCore','counterAttack','DYWRF','helpAreaHeight','drain','Window_BattleLog_displayMpDamage','ShowReflect','isForFriend','FlinchDistanceY','performMoveToPoint','FTvJT','HelpEscape','Shadow2','getStypeIdWithName','isBattleMember','setMoveEasingType','-%1\x20MP','notFocusValid','cancelActorInput','GPtqy','tkCyM','max','drawItemStyleIcon','GSzHt','sort','battleAngle','playEnemyDamage','mMLtP','isMoving','toUpperCase','Game_Battler_performDamage','DkDvP','ActSeq_ChangeAngle','iBiqc','floor','yJVDA','nRiJJ','value1','setAttack','updateCollapse','isMeleeSingleTargetAction','calcWindowHeight','Weapon-%1-%2','GWTpX','evaded','rulLV','YKunt','Window_BattleStatus_drawItemImage','ActSeq_Movement_WaitForMovement','_skewWholeDuration','WaitForNewLine','autoBattleAtStart','CheckSkillCommandShowSwitches','Window_BattleLog_performSubstitute','vNuXK','battleCommandName','addAnimationSpriteToContainer','updateBattleProcess','isMeleeMultiTargetAction','_totalValue','missed','startActorCommandSelection','iSyYL','LBJkm','Sprite_SvEnemy','checkSceneBattleTransitionable','JS\x20%1REGENERATE','NDnBD','_makeFontNameText','bPCGO','MbCUW','Game_Interpreter_command301','WUvfU','endBattle','isSideButtonLayout','cameraDuration','evPxt','maxLines','isDeathStateAffected','battlerName','updateForceAction','isForOpponentBattleCore','_immortal','displayStartMessages','getBattlePortraitOffsetY','clearActiveWeaponSlot','replace','_cancelButton','Lqodg','ArPenRate','Scene_Battle_onEnemyOk','Game_Map_battleback2Name','bossCollapse','updateFlip','uXdaZ','performWeaponAnimation','stepFlinch','isEscapeCommandEnabled','GgbMQ','StatusWindowAttachmentFrontOffsetX','pIUwp','YVgrh','_actor','EscapeSuccess','AutoNotetag','isRightInputMode','setBattlerBattleCore','updateStyleOpacity','SceneManager_isSceneChanging','setFullActionsPTB','FBlKs','Scene_Map_updateCallMenu','NAFGz','JS\x20%1START\x20BATTLE','ActSeq_Mechanics_EtbAction','GbaUp','Scene_Battle_createPartyCommandWindow','command236','febFs','itemEffectAddNormalState','Window_SkillList_maxCols','_createCursorSprite','startSpin','_drawTextBody','Scene_Map_initializeAfter','updateBattlebackBitmap1','round','HalfActions','_targets','ActionEnd','enemy','_padding','Cazuy','setBattlerFlip','hpAffected','zqCNa','bitmapHeight','filters','iconHeight','VisuMZ_2_PartySystem','WjBmJ','width','commandFight','_effectsContainer','playReflection','SesUV','ActSeq_Movement_WaitForFloat','VisuMZ_3_BoostAction','Sprite_Enemy_updateCollapse','KHmjw','createMainSprite','NNCwv','chant','StepDistanceY','startTurn','BindCommonEventKeysForGroup','vXNYy','SideviewSelect','dVPSB','isTriggered','setActorHome','mpDamageFmt','isDead','VisuMZ_3_SideviewBattleUI','isBattlerFlipped','Game_Actor_setup','updateLink','bind','message2','_spriteset','adjustWeaponSpriteOffset','onBattleEnd','tLrrz','ATK','ActSeq_Horror_TVCreate','BQzyL','_preBattleCommonEvent','drawEnemyName','Sprite_Battler_setHome','RecTU','jIiqK','JS\x20BATTLE\x20DEFEAT','EhamP','createUIContainer','applyGuard','makeCommandList','Game_Action_setGuard','addShowHpGaugeCommand','nEPsA','isAtbChargingState','battleDisplayText','HvSKY','displaySubstitute','motionSpeed','isActionSelectionValid','clone','skillItemWindowRectBorderStyle','_commonEventQueue','Game_Actor_equips','transform','PXdEu','OffsetAdjust','repeatTargets','KqJyt','ActSeq_Horror_Clear','iqMDd','ActSeq_BattleLog_Refresh','ZNmqA','isSideView','canGuardBattleCore','uQfzl','fXSbN','Nkwwj','ZVwxc','debuffAdd','updateShadow','displayRemovedStates','addEscapeCommand','ActSeq_BattleLog_AddText','NMitb','MAT','StepDuration','HlcRE','XJQCx','PreDamage%1JS','VisuMZ_1_SkillsStatesCore','ActSeq_Zoom_WaitForZoom','hitRate','isUndecided','createJS','jPLsw','_targetHomeX','battleCommandIcon','actorCommandSingleSkill','ActSeq_Mechanics_AtbGauge','isSceneBattle','XyFgI','TjbIM','charged','canUseItemCommand','battleFloat','displayAction','PPLhS','alive\x20opponents\x20not\x20target','FlaWC','_active','ActSeq_Impact_ZoomBlurTargetCenter','drawItemStyleIconText','_opacityWholeDuration','MpXfm','animationShouldMirror','usePremadeActionSequence','DamageStyles','isHiddenSkill','Sprite_Actor_updateFrame','processActorCommandCancelTPB','isOnCurrentMap','emerge','processBorderActor','cGMRX','OJCzT','Window_BattleLog_performAction','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','constructor','isAutoBattleCommandEnabled','Shadow','LyQIs','1:1','_lastAction','UsUhE','command283','moveToStartPosition','BattleLogRectJS','arPenRate','ShowCurrentState','draox','MotionSpeed','getCommonEventIdWithName','doesPageHaveOnceParallelStart','ShowWeapon','textColor','evalDamageFormulaBattleCore','wkdtO','bUyee','HelpOptions','removeState','placeStateIcon','kwtMx','XKlQB','stepForward','ActSeq_Impact_ZoomBlurPoint','animationWait','HOrLp','ibaGS','shadow','isCertainHit','position','WSMfZ','vgJmn','ActSeq_Animation_AttackAnimation2','dhcnS','zaLgk','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','createAttachmentSprites','Game_Action_applyGlobal','_borderPortraitSprite','addBattleCoreAutoBattleStartupCommand','WUBVU','208524BxGEkc','JjNgY','resize','yHzNp','applyItem','HgIEe','CommonEventID','vjJwk','7236207WkhRGT','updateAction','_back1Sprite','Sprite_Enemy_createStateIconSprite','weaponTypes','_baseY','DxlIx','default','pattern','MpGaugeOffsetX','pop','alphabetic','startTpbTurn','MpGaugeOffsetY','addFightCommand','moveToStartPositionBattleCore','YDRnZ','WaitCount','PostEndBattleJS','onGrowEnd','Targets','aKimV','HelpSkillType','getNextSubject','clearOnceParallelInterpreters','updatePointAnimations','zYFyk','animation','aAGYn','setupBattlebackBattleCore','makeData','jzajj','Parse_Notetags_Action','vXsEk','addCommand','pages','commandStyleCheck','redraw','_endBattle','update','isBattleTest','_tpbState','ShowCritical','iterateBattler','lukEffectRate','loadSvEnemy','canGuard','_distortionSprite','okButtonText','xZEHJ','Scene_Battle_stop','BattleManager_startAction','StatusWindowAttachmentBackOffsetY','createTargetsJS','SwitchMissEvade','NameOffsetY','setBattleCameraPoint','KSvUq','cnfPY','StatusWindowSkinHide','MBtRB','TeUbe','onBattleStart','ActSeq_Movement_MoveToTarget','ActorCmd','PerformAction','checkTpbInputClose','performMiss','equipSlots','BattleManager_endAction','itemHeight','_mainSprite','AutoMeleeAoE','BattleCore','CmdIconEscape','stateMotionIndex','finishActorInput','ActSeq_Movement_Jump','JOtSH','_defeatedEnemies','addCustomCommands','AutoBattleMsg','addGuardCommand','ParseAllNotetags','EbAgg','QAGbQ','lsyjp','rowSpacing','collapseType','isAnimationPlaying','startMove','tKQid','uiMenuStyle','criticalDmgRate','_logWindow','helpWindowRectBorderStyle','inHomePosition','addActor','floatBattler','VisuMZ_2_BattleSystemFTB','nQRhh','itemRect','_skillIDs','filterArea','alive\x20opponents','inBattle','mvknR','battleSpin','cancelButtonText','LIvjD','ESCAPE','XPActorDefaultHeight','noise','_motionSpeed','PartyCmd','concat','_handlers','ActSeq_Mechanics_BreakShieldReset','ActionCount','alive\x20battlers\x20not\x20user','createHpGaugeSprite','cancelTargetSelectionVisibility','jLWsq','ActSeq_Movement_BattleStep','requestRefresh','Window_BattleLog_popupDamage','BJuPZ','createContents','isItemCommandEnabled','updateAttachedSprites','setHalfActionsPTB','StyleName','useItem','ShowCounter','alterActionCostPTB','changeCtbCastTime','expTotal','Spriteset_Battle_createLowerLayer','Skill-%1-%2','_hpGaugeSprite','ActSeq_Movement_HomeMoveToPoint','Duration','DBgKg','FOndJ','displayAddedStates','_battleCoreBattleStartEvent','ActSeq_Mechanics_RemoveState','ihnoA','getAttackWeaponAnimationId','SceneManager_push','CastCertain','executeDamage','_appeared','skill','isForOne','currentAction','value','moveBattlerHomeDistance','lgYab','createActorCommandWindow','itemWindowRect','createInnerPortrait','auto','XVCTg','FlashDuration','setBattleCameraTargets','speed','Window_Options_statusText','forceAction','_target','maxTp','command301_PreBattleEvent','actions','\x5cI[%1]%2','WaitForFloat','battleLayoutStyle','version','prepareBorderActor','rjEue','jMvPl','hRieE','sjLLp','QzFaS','Window_ActorCommand_setup','WYzaN','DTB','VariableHeal','BattleManager_makeActionOrders','logActionList','Damage','JRdjc','font','Game_System_initialize','JUlIB','MaxLines','_statusWindow','ActSeq_Mechanics_CtbSpeed','Window_BattleLog_performDamage','isSkewing','performActionMotions','_phase','ActSeq_Mechanics_StbExtraAction','damageOffsetY','aJfNm','PostApplyJS','maxItems','displayCurrentState','checkCacheKey','createActorCommandWindowBattleCore','Window_BattleLog_displayEvasion','placeTimeGauge','regenerateAllBattleCore','ScaleY','globalAlpha','canAlterActionCostPTB','_battleField','flashDuration','WaitForEffect','yfqYK','validTargets','Mechanics','gainCurrentActionsETB','_cache','mainSprite','process_VisuMZ_BattleCore_BaseTroops','_homeY','_lines','_autoBattleWindow','adjustPosition_ScaleToFit','setupFont','ShowHpDmg','onRegeneratePlayStateAnimation','loadBattleback1','_callSceneOptions','splice','HIuOy','autoSelectPriority','GpGbL','attack','ActSeq_Impact_MotionBlurTarget','Window_BattleLog_performActionEnd','command301','qVboG','_commonEventIDs','_subject','BoostPoints','applySoftDamageCap','WxaBi','isFastForward','finalizeScale','DEF','float','getNextDamagePopup','VisuMZ_2_BattleSystemBTB','isAlwaysVisible','_enemyWindow','_interpreter','isAnyoneChangingOpacity','nextActiveWeaponSlot','_growX','dataId','NjLHE','PreEndTurnJS','indexOf','hFMAW','Scene_Battle_updateStatusWindowPosition','onEnemyCancel','DCmey','updateRefresh','_regionBattleback2','COMBATLOG','StartTurnMsg','updateEffectsContainer','Scene_Map_launchBattle','effects','startMotion','GGKAu','EasingType','_animation','Scale','Game_Action_itemEffectAddAttackState','Game_Interpreter_updateWaitMode','NameAttachStateIcon','RequiresDefeat','clear','ActSeq_Animation_WaitForAnimation','split','ZFxmE','addDamageSprite','FocusX','refreshCursor','ParseActorNotetags','BattleManager_startInput','wholeActionSet','PreDamageAsUserJS','troop','isShownOnBattlePortrait','adjustPosition_1for1','DigitGrouping','makeBattleCommand','_autoBattle','deathStateId'];_0x53be=function(){return _0x444268;};return _0x53be();}(function(_0x37759d,_0x3cdf94){const _0x1d462c=_0x5893,_0x3166ac=_0x37759d();while(!![]){try{const _0x28680d=parseInt(_0x1d462c(0x4d5))/0x1+parseInt(_0x1d462c(0x2d0))/0x2*(-parseInt(_0x1d462c(0x2b6))/0x3)+parseInt(_0x1d462c(0x9cd))/0x4*(-parseInt(_0x1d462c(0x568))/0x5)+parseInt(_0x1d462c(0xb78))/0x6+-parseInt(_0x1d462c(0x6e4))/0x7*(-parseInt(_0x1d462c(0x6b2))/0x8)+-parseInt(_0x1d462c(0x5b2))/0x9*(-parseInt(_0x1d462c(0x5db))/0xa)+-parseInt(_0x1d462c(0x9d5))/0xb*(parseInt(_0x1d462c(0x1ad))/0xc);if(_0x28680d===_0x3cdf94)break;else _0x3166ac['push'](_0x3166ac['shift']());}catch(_0x1b76da){_0x3166ac['push'](_0x3166ac['shift']());}}}(_0x53be,0x9b1fe));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x1a0039(0x538)](function(_0x44e828){const _0x5e2008=_0x1a0039;return _0x44e828[_0x5e2008(0x631)]&&_0x44e828[_0x5e2008(0x178)][_0x5e2008(0x604)]('['+label+']');})[0x0];VisuMZ[label][_0x1a0039(0x4ce)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x1a0039(0x44a)]=function(_0x5647c3,_0x5e2cfb){const _0x3e305c=_0x1a0039;for(const _0x42c821 in _0x5e2cfb){if(_0x42c821[_0x3e305c(0x7f1)](/(.*):(.*)/i)){if('tZqBR'!=='WRWbG'){const _0x34679b=String(RegExp['$1']),_0x387db2=String(RegExp['$2'])['toUpperCase']()[_0x3e305c(0x850)]();let _0x52c35d,_0x570a77,_0x55c2fe;switch(_0x387db2){case'NUM':_0x52c35d=_0x5e2cfb[_0x42c821]!==''?Number(_0x5e2cfb[_0x42c821]):0x0;break;case _0x3e305c(0x68f):_0x570a77=_0x5e2cfb[_0x42c821]!==''?JSON[_0x3e305c(0xb47)](_0x5e2cfb[_0x42c821]):[],_0x52c35d=_0x570a77[_0x3e305c(0x73b)](_0x532947=>Number(_0x532947));break;case _0x3e305c(0x36d):_0x52c35d=_0x5e2cfb[_0x42c821]!==''?eval(_0x5e2cfb[_0x42c821]):null;break;case _0x3e305c(0x78a):_0x570a77=_0x5e2cfb[_0x42c821]!==''?JSON[_0x3e305c(0xb47)](_0x5e2cfb[_0x42c821]):[],_0x52c35d=_0x570a77[_0x3e305c(0x73b)](_0x3061ea=>eval(_0x3061ea));break;case _0x3e305c(0x7f0):_0x52c35d=_0x5e2cfb[_0x42c821]!==''?JSON[_0x3e305c(0xb47)](_0x5e2cfb[_0x42c821]):'';break;case'ARRAYJSON':_0x570a77=_0x5e2cfb[_0x42c821]!==''?JSON['parse'](_0x5e2cfb[_0x42c821]):[],_0x52c35d=_0x570a77[_0x3e305c(0x73b)](_0x43de42=>JSON['parse'](_0x43de42));break;case _0x3e305c(0x30f):_0x52c35d=_0x5e2cfb[_0x42c821]!==''?new Function(JSON[_0x3e305c(0xb47)](_0x5e2cfb[_0x42c821])):new Function(_0x3e305c(0x211));break;case'ARRAYFUNC':_0x570a77=_0x5e2cfb[_0x42c821]!==''?JSON['parse'](_0x5e2cfb[_0x42c821]):[],_0x52c35d=_0x570a77['map'](_0x43b7e7=>new Function(JSON[_0x3e305c(0xb47)](_0x43b7e7)));break;case'STR':_0x52c35d=_0x5e2cfb[_0x42c821]!==''?String(_0x5e2cfb[_0x42c821]):'';break;case _0x3e305c(0x601):_0x570a77=_0x5e2cfb[_0x42c821]!==''?JSON[_0x3e305c(0xb47)](_0x5e2cfb[_0x42c821]):[],_0x52c35d=_0x570a77[_0x3e305c(0x73b)](_0x1c2d6d=>String(_0x1c2d6d));break;case _0x3e305c(0x4f7):_0x55c2fe=_0x5e2cfb[_0x42c821]!==''?JSON[_0x3e305c(0xb47)](_0x5e2cfb[_0x42c821]):{},_0x5647c3[_0x34679b]={},VisuMZ[_0x3e305c(0x44a)](_0x5647c3[_0x34679b],_0x55c2fe);continue;case'ARRAYSTRUCT':_0x570a77=_0x5e2cfb[_0x42c821]!==''?JSON[_0x3e305c(0xb47)](_0x5e2cfb[_0x42c821]):[],_0x52c35d=_0x570a77['map'](_0x3adcc3=>VisuMZ[_0x3e305c(0x44a)]({},JSON[_0x3e305c(0xb47)](_0x3adcc3)));break;default:continue;}_0x5647c3[_0x34679b]=_0x52c35d;}else this[_0x3e305c(0x55a)](this[_0x3e305c(0x723)][_0x3e305c(0x414)]);}}return _0x5647c3;},(_0x550de7=>{const _0x3f0273=_0x1a0039,_0x25b267=_0x550de7[_0x3f0273(0x192)];for(const _0x32bebf of dependencies){if(!Imported[_0x32bebf]){alert(_0x3f0273(0x99f)['format'](_0x25b267,_0x32bebf)),SceneManager[_0x3f0273(0x3fd)]();break;}}const _0x227c6d=_0x550de7[_0x3f0273(0x178)];if(_0x227c6d[_0x3f0273(0x7f1)](/\[Version[ ](.*?)\]/i)){const _0xf7438d=Number(RegExp['$1']);_0xf7438d!==VisuMZ[label][_0x3f0273(0xa85)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'['format'](_0x25b267,_0xf7438d)),SceneManager[_0x3f0273(0x3fd)]());}if(_0x227c6d['match'](/\[Tier[ ](\d+)\]/i)){if('vIpAu'!=='YwmJb'){const _0xff697f=Number(RegExp['$1']);if(_0xff697f<tier){if(_0x3f0273(0x794)==='SYkfV')return!![];else alert(_0x3f0273(0x5a4)['format'](_0x25b267,_0xff697f,tier)),SceneManager[_0x3f0273(0x3fd)]();}else tier=Math['max'](_0xff697f,tier);}else return![];}VisuMZ[_0x3f0273(0x44a)](VisuMZ[label][_0x3f0273(0x4ce)],_0x550de7[_0x3f0273(0x7c3)]);})(pluginData),VisuMZ[_0x1a0039(0x84a)]=function(_0x4a5d31){const _0x9d7c9c=_0x1a0039;let _0x28add4=[];for(const _0xf566d6 of _0x4a5d31){_0x28add4=_0x28add4[_0x9d7c9c(0xa48)](VisuMZ[_0x9d7c9c(0x726)](_0xf566d6));}return _0x28add4[_0x9d7c9c(0x538)](_0x5e3f0b=>_0x5e3f0b);},VisuMZ['ConvertActionSequenceTarget']=function(_0x1d515c){const _0x2cb915=_0x1a0039,_0x475b49=BattleManager[_0x2cb915(0x142)]()[_0x2cb915(0x538)](_0x5d0773=>_0x5d0773&&_0x5d0773[_0x2cb915(0x567)]()),_0x56e959=BattleManager[_0x2cb915(0xac9)],_0x5dbae9=BattleManager[_0x2cb915(0xa7e)],_0x3f2eae=BattleManager[_0x2cb915(0x1a8)]?BattleManager[_0x2cb915(0x1a8)][_0x2cb915(0x130)](0x0):_0x475b49;_0x1d515c=_0x1d515c['toLowerCase']()[_0x2cb915(0x850)]();if(_0x1d515c===_0x2cb915(0x1da)){if(_0x2cb915(0x170)===_0x2cb915(0x170))return[_0x56e959];else _0x18d2f0[_0x2cb915(0x4e5)][_0x2cb915(0x79e)]=!![];}else{if(_0x1d515c===_0x2cb915(0xbb5)){if(_0x2cb915(0x724)===_0x2cb915(0x724))return[_0x5dbae9];else this['isShownOnBattlePortrait']()?_0x133cf5[_0x2cb915(0x784)][_0x2cb915(0xa98)][_0x2cb915(0x708)](_0x27cfd7):(this[_0x2cb915(0x424)]()[_0x2cb915(0xb6e)](_0xa8fe8e),this[_0x2cb915(0x4b0)][_0x2cb915(0x5a5)](_0x42b1d7),_0x5a706c[_0x2cb915(0x2a7)]());}else{if(_0x1d515c===_0x2cb915(0x60f)){if(_0x5dbae9){if(_0x2cb915(0x920)===_0x2cb915(0x73e))return this['svBattlerData']()['anchorX'];else{const _0x1e159c=_0x3f2eae['indexOf'](_0x5dbae9);return _0x1e159c>=0x0?[_0x3f2eae[_0x1e159c-0x1]||_0x5dbae9]:[_0x5dbae9];}}}else{if(_0x1d515c==='text\x20target'){if('ObyjL'===_0x2cb915(0x7aa)){if(_0x5dbae9){const _0x59ff20=_0x3f2eae['indexOf'](_0x5dbae9);return _0x59ff20>=0x0?[_0x3f2eae[_0x59ff20+0x1]||_0x5dbae9]:[_0x5dbae9];}}else this[_0x2cb915(0x69a)](),this[_0x2cb915(0x904)]();}else{if(_0x1d515c==='all\x20targets')return _0x3f2eae;else{if(_0x1d515c==='focus'){if(_0x2cb915(0x977)===_0x2cb915(0x69c))_0x40ba1d[_0x2cb915(0x53e)](),_0x55e6f9['applyForcedGameTroopSettingsBattleCore'](_0x5b1d44),_0x59cbeb[_0x2cb915(0xa1e)][_0x2cb915(0x846)][_0x2cb915(0xb33)](this,_0x401bb8);else return[_0x56e959][_0x2cb915(0xa48)](_0x3f2eae);}else{if(_0x1d515c==='not\x20focus'){if(_0x2cb915(0x73a)!==_0x2cb915(0x5dc))return _0x475b49[_0x2cb915(0x538)](_0x19ebe0=>_0x19ebe0!==_0x56e959&&!_0x3f2eae[_0x2cb915(0x604)](_0x19ebe0)&&_0x19ebe0[_0x2cb915(0x8aa)]());else{if(_0x5d1f6a['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1a366f=_0x3d6f3d(_0x403fc5['$1'])['toUpperCase']()['trim']();if(_0x1a366f==='MANUAL')return _0x2cb915(0xbc8);if(_0x581dfa[_0x2cb915(0x995)][_0x1a366f])return _0x1a366f;}const _0x3aad11=_0x2b1d0a[_0x2cb915(0xa1e)][_0x2cb915(0x4ce)][_0x2cb915(0xa92)][_0x2cb915(0x552)]['toUpperCase']()['trim']();if(_0x392739[_0x2cb915(0x995)][_0x3aad11])return _0x3aad11;return _0x2cb915(0xbc8);}}}}}}}}if(_0x56e959){if(_0x1d515c===_0x2cb915(0x42f)){if('QNExI'===_0x2cb915(0x361))_0xbe017c[_0x2cb915(0x6d2)]['stop'][_0x2cb915(0xb33)](this);else return _0x56e959[_0x2cb915(0x377)]()[_0x2cb915(0x4d2)]();}else{if(_0x1d515c===_0x2cb915(0x233)){if(_0x2cb915(0x796)===_0x2cb915(0x243))this[_0x2cb915(0x998)]();else return _0x56e959[_0x2cb915(0x377)]()[_0x2cb915(0x4d2)]()[_0x2cb915(0x538)](_0x26c1a0=>_0x26c1a0!==_0x56e959);}else{if(_0x1d515c===_0x2cb915(0x29f))return _0x56e959['friendsUnit']()[_0x2cb915(0x4d2)]()[_0x2cb915(0x538)](_0x34887b=>_0x34887b!==_0x5dbae9);else{if(_0x1d515c==='dead\x20friends'){if('meLgl'===_0x2cb915(0x887))return _0x56e959[_0x2cb915(0x377)]()[_0x2cb915(0xb43)]();else _0x3240e4[_0x2cb915(0xa1e)][_0x2cb915(0x9c9)][_0x2cb915(0xb33)](this),this[_0x2cb915(0x2bb)](),this[_0x2cb915(0xbbc)]();}else{if(_0x1d515c[_0x2cb915(0x7f1)](/FRIEND INDEX (\d+)/i)){if(_0x2cb915(0x647)!=='RhqeG'){const _0x5045c4=Number(RegExp['$1']);return[_0x56e959['friendsUnit']()[_0x2cb915(0x541)]()[_0x5045c4]];}else{if(!_0x31d107['isSceneBattle']())return;const _0x192830=_0x6814f2['getLastPluginCommandInterpreter'](),_0x11d9c5=_0x1765e2[_0x2cb915(0xa33)];_0x11d9c5[_0x2cb915(0x4c7)](),_0x192830['setWaitMode']('battlelog');}}}}}}if(_0x1d515c===_0x2cb915(0xa3d))return _0x56e959['opponentsUnit']()[_0x2cb915(0x4d2)]();else{if(_0x1d515c===_0x2cb915(0x98c))return _0x56e959[_0x2cb915(0xbdf)]()['aliveMembers']()[_0x2cb915(0x538)](_0x4b4992=>_0x4b4992!==_0x5dbae9);else{if(_0x1d515c===_0x2cb915(0xb25))return _0x56e959[_0x2cb915(0xbdf)]()[_0x2cb915(0xb43)]();else{if(_0x1d515c[_0x2cb915(0x7f1)](/OPPONENT INDEX (\d+)/i)){const _0x55cbd9=Number(RegExp['$1']);return[_0x56e959[_0x2cb915(0xbdf)]()['members']()[_0x55cbd9]];}}}}}if(_0x1d515c==='alive\x20actors'){if('DYoRr'===_0x2cb915(0x8b4))_0x5ee996[_0x2cb915(0x6d2)][_0x2cb915(0x739)][_0x2cb915(0xb33)](this),this['requestMotion'](_0x2cb915(0x242));else return $gameParty[_0x2cb915(0x4d2)]();}else{if(_0x1d515c==='alive\x20actors\x20not\x20user'){if(_0x2cb915(0x20b)===_0x2cb915(0x20b))return $gameParty[_0x2cb915(0x4d2)]()[_0x2cb915(0x538)](_0x33d579=>_0x33d579!==_0x56e959);else{if(!_0x597cdc[_0x2cb915(0x984)]())return;_0x4f91a7[_0x2cb915(0x44a)](_0x180362,_0x14784b);const _0x55c6a0=_0x5df1d8[_0x2cb915(0x572)](),_0x7fdcf8=_0x443585['MotionFrameWait']*_0x450298[_0x2cb915(0xa46)];_0x55c6a0[_0x2cb915(0x730)](_0x7fdcf8);}}else{if(_0x1d515c===_0x2cb915(0x3f1))return _0x2cb915(0x481)==='XAFPN'?_0x337f87[_0x2cb915(0xa1e)][_0x2cb915(0x4dd)][_0x2cb915(0xb33)](this):$gameParty[_0x2cb915(0x4d2)]()[_0x2cb915(0x538)](_0x562eb3=>_0x562eb3!==_0x5dbae9);else{if(_0x1d515c==='dead\x20actors')return $gameParty[_0x2cb915(0xb43)]();else{if(_0x1d515c[_0x2cb915(0x7f1)](/ACTOR INDEX (\d+)/i)){if(_0x2cb915(0x909)===_0x2cb915(0x25a)){if(this['isTurnBased']())this[_0x2cb915(0x673)](_0x2cb915(0x529));_0xe173a2['BattleCore'][_0x2cb915(0x69e)][_0x2cb915(0xb33)](this);if(this['isTurnBased']())this[_0x2cb915(0x673)](_0x2cb915(0x6fe));}else{const _0x295e13=Number(RegExp['$1']);return[$gameParty[_0x2cb915(0x541)]()[_0x295e13]];}}else{if(_0x1d515c[_0x2cb915(0x7f1)](/ACTOR ID (\d+)/i)){if('RiDuA'!==_0x2cb915(0x46b))return this[_0x2cb915(0x95d)]();else{const _0x38e508=Number(RegExp['$1']);return[$gameActors[_0x2cb915(0xbc6)](_0x38e508)];}}}}}}}if(_0x1d515c===_0x2cb915(0x6e7))return $gameTroop[_0x2cb915(0x4d2)]();else{if(_0x1d515c==='alive\x20enemies\x20not\x20user')return $gameTroop[_0x2cb915(0x4d2)]()[_0x2cb915(0x538)](_0x13913b=>_0x13913b!==_0x56e959);else{if(_0x1d515c===_0x2cb915(0x7ac))return $gameTroop['aliveMembers']()[_0x2cb915(0x538)](_0x16b08a=>_0x16b08a!==_0x5dbae9);else{if(_0x1d515c===_0x2cb915(0x781))return $gameTroop[_0x2cb915(0xb43)]();else{if(_0x1d515c[_0x2cb915(0x7f1)](/ENEMY INDEX (\d+)/i)){const _0x59117a=Number(RegExp['$1']);return[$gameTroop[_0x2cb915(0x541)]()[_0x59117a]];}else{if(_0x1d515c[_0x2cb915(0x7f1)](/ENEMY ID (\d+)/i)){const _0x289033=Number(RegExp['$1']);return $gameTroop[_0x2cb915(0x4d2)]()['filter'](_0x223a03=>_0x223a03[_0x2cb915(0x454)]()===_0x289033);}}}}}}if(_0x1d515c===_0x2cb915(0x77b)){if('NyZOd'===_0x2cb915(0x3f8))this[_0x2cb915(0x209)]=_0x2cb915(0x9dc);else return _0x475b49['filter'](_0x2dae3c=>_0x2dae3c[_0x2cb915(0x140)]());}else{if(_0x1d515c===_0x2cb915(0xa4c)){if('eMMeU'!=='IruXp')return _0x475b49[_0x2cb915(0x538)](_0x20ae1a=>_0x20ae1a[_0x2cb915(0x140)]()&&_0x20ae1a!==_0x56e959);else this[_0x2cb915(0x3e0)](...arguments);}else{if(_0x1d515c===_0x2cb915(0x700))return _0x2cb915(0x55c)===_0x2cb915(0x98b)?_0xaed2f0(_0x5cb9bd['$1'])/0x64:_0x475b49[_0x2cb915(0x538)](_0x5eb099=>_0x5eb099[_0x2cb915(0x140)]()&&_0x5eb099!==_0x5dbae9);else{if(_0x1d515c===_0x2cb915(0x7ab))return _0x2cb915(0xb57)!=='mDywI'?(this[_0x2cb915(0xa00)](_0x3d489c[0x0],_0x3e473f[0x1],_0x5ad020=>{const _0xe4a8fc=_0x2cb915;!_0x5ad020['isDeathStateAffected']()&&(_0x5ad020[_0xe4a8fc(0xa7d)](_0x4da4d1[0x2],_0x4542a8[0x3]),_0x15f55f[_0xe4a8fc(0xa7d)](_0x5ad020));}),!![]):_0x475b49['filter'](_0x44c264=>_0x44c264[_0x2cb915(0x93b)]());}}}return[];},PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x1c8),_0x1165f2=>{const _0x9c31ee=_0x1a0039;if(!SceneManager[_0x9c31ee(0x984)]())return;VisuMZ['ConvertParams'](_0x1165f2,_0x1165f2);const _0x3c3c18=$gameTemp[_0x9c31ee(0x572)](),_0x32f43b=BattleManager[_0x9c31ee(0x548)],_0x1ce5cf=BattleManager[_0x9c31ee(0xac9)],_0x549a40=BattleManager[_0x9c31ee(0x1a8)]?BattleManager[_0x9c31ee(0x1a8)][_0x9c31ee(0x130)](0x0):[],_0x177b37=BattleManager[_0x9c31ee(0xa33)];if(!_0x3c3c18||!_0x32f43b||!_0x1ce5cf)return;if(!_0x32f43b[_0x9c31ee(0x19a)]())return;if(_0x1165f2['DisplayAction'])_0x177b37[_0x9c31ee(0x98a)](_0x1ce5cf,_0x32f43b[_0x9c31ee(0x19a)]());_0x1165f2[_0x9c31ee(0x453)]&&_0x177b37[_0x9c31ee(0xb15)](_0x9c31ee(0x7b7),_0x1ce5cf,_0x549a40,!![]);if(_0x1165f2[_0x9c31ee(0x5ab)])_0x177b37[_0x9c31ee(0xb15)]('performActionStart',_0x1ce5cf,_0x32f43b);if(_0x1165f2['WaitForMovement'])_0x177b37[_0x9c31ee(0xb15)](_0x9c31ee(0x449));if(_0x1165f2[_0x9c31ee(0x476)])_0x177b37[_0x9c31ee(0xb15)](_0x9c31ee(0x495),_0x1ce5cf,_0x32f43b);if(_0x1165f2[_0x9c31ee(0x4b1)])_0x177b37['push'](_0x9c31ee(0x286));_0x3c3c18[_0x9c31ee(0x295)](_0x9c31ee(0x28f));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_Set_WholeActionSet',_0x17bcac=>{const _0x3c440b=_0x1a0039;if(!SceneManager[_0x3c440b(0x984)]())return;VisuMZ[_0x3c440b(0x44a)](_0x17bcac,_0x17bcac);const _0x5f404d=$gameTemp[_0x3c440b(0x572)](),_0x2e0540=BattleManager[_0x3c440b(0x548)],_0x428224=BattleManager[_0x3c440b(0xac9)],_0x1e3a17=BattleManager[_0x3c440b(0x1a8)]?BattleManager['_allTargets'][_0x3c440b(0x130)](0x0):[],_0x30a3ac=BattleManager[_0x3c440b(0xa33)],_0xa87397=_0x17bcac[_0x3c440b(0x479)]??![];if(!_0x5f404d||!_0x2e0540||!_0x428224)return;if(!_0x2e0540[_0x3c440b(0x19a)]())return;let _0x5c229d=_0xa87397?_0x30a3ac[_0x3c440b(0x6e6)](_0x428224):0x1;for(let _0x2b4a54=0x0;_0x2b4a54<_0x5c229d;_0x2b4a54++){_0xa87397&&_0x428224[_0x3c440b(0x261)]()&&_0x30a3ac['push'](_0x3c440b(0x5e8),_0x428224,_0x2b4a54);if(_0x17bcac['PerformAction'])_0x30a3ac[_0x3c440b(0xb15)](_0x3c440b(0x566),_0x428224,_0x2e0540);if(_0x17bcac[_0x3c440b(0x9e6)]>0x0)_0x30a3ac[_0x3c440b(0xb15)](_0x3c440b(0x2d4),_0x17bcac[_0x3c440b(0x9e6)]);if(_0x17bcac[_0x3c440b(0xb4f)])_0x30a3ac[_0x3c440b(0xb15)](_0x3c440b(0x406),_0x428224,_0x1e3a17,_0x2e0540['item']()[_0x3c440b(0x7f4)]);if(_0x17bcac['WaitForAnimation'])_0x30a3ac[_0x3c440b(0xb15)](_0x3c440b(0x286));for(const _0x1cb9c2 of _0x1e3a17){if(!_0x1cb9c2)continue;if(_0x17bcac[_0x3c440b(0x23e)])_0x30a3ac[_0x3c440b(0xb15)](_0x3c440b(0x2f3),_0x428224,_0x1cb9c2);}}_0xa87397&&_0x428224[_0x3c440b(0x261)]()&&_0x30a3ac[_0x3c440b(0xb15)](_0x3c440b(0x372),_0x428224);if(_0x17bcac[_0x3c440b(0x453)])_0x30a3ac[_0x3c440b(0xb15)](_0x3c440b(0x7b7),_0x428224,_0x1e3a17,![]);_0x5f404d[_0x3c440b(0x295)]('battlelog');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x6c7),_0x936d78=>{const _0x2fb84f=_0x1a0039;if(!SceneManager[_0x2fb84f(0x984)]())return;VisuMZ[_0x2fb84f(0x44a)](_0x936d78,_0x936d78);const _0x21d728=$gameTemp[_0x2fb84f(0x572)](),_0x10eb43=BattleManager['_action'],_0x3890af=BattleManager[_0x2fb84f(0xac9)],_0x10fea3=BattleManager[_0x2fb84f(0x1a8)]?BattleManager[_0x2fb84f(0x1a8)][_0x2fb84f(0x130)](0x0):[],_0x209854=BattleManager[_0x2fb84f(0xa33)],_0x23359c=_0x936d78[_0x2fb84f(0x479)]??![];if(!_0x21d728||!_0x10eb43||!_0x3890af)return;if(!_0x10eb43[_0x2fb84f(0x19a)]())return;let _0x105b9e=_0x23359c?_0x209854[_0x2fb84f(0x6e6)](_0x3890af):0x1;for(let _0x4f8722=0x0;_0x4f8722<_0x105b9e;_0x4f8722++){for(const _0x1c3131 of _0x10fea3){if(!_0x1c3131)continue;_0x23359c&&_0x3890af['isActor']()&&_0x209854[_0x2fb84f(0xb15)](_0x2fb84f(0x5e8),_0x3890af,_0x4f8722);if(_0x936d78[_0x2fb84f(0xa16)])_0x209854[_0x2fb84f(0xb15)](_0x2fb84f(0x566),_0x3890af,_0x10eb43);if(_0x936d78[_0x2fb84f(0x606)]>0x0)_0x209854[_0x2fb84f(0xb15)](_0x2fb84f(0x2d4),_0x936d78['WaitCount1']);if(_0x936d78[_0x2fb84f(0xb4f)])_0x209854['push']('showAnimation',_0x3890af,[_0x1c3131],_0x10eb43[_0x2fb84f(0x19a)]()[_0x2fb84f(0x7f4)]);if(_0x936d78[_0x2fb84f(0xb2e)]>0x0)_0x209854[_0x2fb84f(0xb15)](_0x2fb84f(0x2d4),_0x936d78[_0x2fb84f(0xb2e)]);if(_0x936d78[_0x2fb84f(0x23e)])_0x209854['push'](_0x2fb84f(0x2f3),_0x3890af,_0x1c3131);}}_0x23359c&&_0x3890af[_0x2fb84f(0x261)]()&&_0x209854[_0x2fb84f(0xb15)]('clearActiveWeaponSet',_0x3890af);if(_0x936d78[_0x2fb84f(0x453)])_0x209854['push']('applyImmortal',_0x3890af,_0x10fea3,![]);_0x21d728[_0x2fb84f(0x295)](_0x2fb84f(0x28f));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x4c9),_0x5afac5=>{const _0x179501=_0x1a0039;if(!SceneManager[_0x179501(0x984)]())return;VisuMZ[_0x179501(0x44a)](_0x5afac5,_0x5afac5);const _0x1768ba=$gameTemp[_0x179501(0x572)](),_0x3be854=BattleManager[_0x179501(0x548)],_0x1cc340=BattleManager[_0x179501(0xac9)],_0xc498f9=BattleManager[_0x179501(0x1a8)]?BattleManager['_allTargets'][_0x179501(0x130)](0x0):[],_0x164df8=BattleManager[_0x179501(0xa33)];if(!_0x1768ba||!_0x3be854||!_0x1cc340)return;if(!_0x3be854[_0x179501(0x19a)]())return;if(_0x5afac5['ApplyImmortal'])_0x164df8['push']('applyImmortal',_0x1cc340,_0xc498f9,![]);if(_0x5afac5[_0x179501(0x8cb)])_0x164df8['push']('waitForNewLine');if(_0x5afac5[_0x179501(0xaae)])_0x164df8['push'](_0x179501(0x4a7));if(_0x5afac5['ClearBattleLog'])_0x164df8[_0x179501(0xb15)](_0x179501(0xaf1));if(_0x5afac5[_0x179501(0x91a)])_0x164df8[_0x179501(0xb15)](_0x179501(0xbd8),_0x1cc340);if(_0x5afac5[_0x179501(0x20d)])_0x164df8[_0x179501(0xb15)]('waitForMovement');_0x1768ba[_0x179501(0x295)]('battlelog');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x8b9),_0x2073cb=>{const _0x8143c2=_0x1a0039;if(!SceneManager[_0x8143c2(0x984)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x8143c2(0x44a)](_0x2073cb,_0x2073cb);const _0x2d9f34=$gameTemp[_0x8143c2(0x572)](),_0x4c61ed=_0x2073cb[_0x8143c2(0x5ea)];if(!_0x2d9f34)return;$gameScreen['setBattleAngle'](_0x2073cb[_0x8143c2(0x4c6)],_0x2073cb['Duration'],_0x2073cb['EasingType']);if(_0x4c61ed)_0x2d9f34[_0x8143c2(0x295)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x58a),_0x1cb8e0=>{const _0x358623=_0x1a0039;if(!SceneManager[_0x358623(0x984)]())return;if(!Imported[_0x358623(0x624)])return;VisuMZ[_0x358623(0x44a)](_0x1cb8e0,_0x1cb8e0);const _0x2be407=$gameTemp[_0x358623(0x572)](),_0x2890b1=_0x1cb8e0[_0x358623(0x5ea)];if(!_0x2be407)return;$gameScreen['setBattleAngle'](0x0,_0x1cb8e0[_0x358623(0xa62)],_0x1cb8e0['EasingType']);if(_0x2890b1)_0x2be407[_0x358623(0x295)](_0x358623(0x8b2));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x4f5),_0x132be2=>{const _0x29a30f=_0x1a0039;if(!SceneManager[_0x29a30f(0x984)]())return;if(!Imported[_0x29a30f(0x624)])return;const _0xb707d0=$gameTemp[_0x29a30f(0x572)]();if(!_0xb707d0)return;_0xb707d0[_0x29a30f(0x295)]('battleAngle');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x644),_0x1630a0=>{const _0x20cbec=_0x1a0039;if(!SceneManager[_0x20cbec(0x984)]())return;VisuMZ[_0x20cbec(0x44a)](_0x1630a0,_0x1630a0);const _0x36db86=$gameTemp[_0x20cbec(0x572)](),_0x1b6415=BattleManager[_0x20cbec(0x548)],_0x1b6c97=BattleManager[_0x20cbec(0xac9)],_0x18985a=VisuMZ[_0x20cbec(0x84a)](_0x1630a0[_0x20cbec(0x9e9)]),_0xedcb67=_0x1630a0[_0x20cbec(0x13a)],_0x593b42=BattleManager[_0x20cbec(0xa33)];if(!_0x36db86||!_0x1b6415||!_0x1b6c97)return;if(!_0x1b6415['item']())return;let _0x5093c7=_0x1b6415[_0x20cbec(0x19a)]()['animationId'];if(_0x5093c7<0x0)_0x5093c7=_0x1b6c97[_0x20cbec(0x7fe)]();$gameTemp[_0x20cbec(0x193)](_0x18985a,_0x5093c7,_0xedcb67),_0x1630a0['WaitForAnimation']&&_0x36db86[_0x20cbec(0x295)](_0x20cbec(0x344));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x258),_0x2b8f54=>{const _0x17d0b2=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x17d0b2(0x44a)](_0x2b8f54,_0x2b8f54);const _0x3e1635=$gameTemp[_0x17d0b2(0x572)](),_0x164d75=BattleManager[_0x17d0b2(0xac9)],_0x123244=VisuMZ['CreateActionSequenceTargets'](_0x2b8f54['Targets']),_0x32765f=_0x2b8f54[_0x17d0b2(0x13a)],_0x4c610d=BattleManager[_0x17d0b2(0xa33)];if(!_0x3e1635||!_0x164d75)return;const _0x14d818=_0x164d75[_0x17d0b2(0x7fe)]();$gameTemp['requestAnimation'](_0x123244,_0x14d818,_0x32765f),_0x2b8f54[_0x17d0b2(0x4b1)]&&(_0x17d0b2(0x399)!==_0x17d0b2(0xb39)?_0x3e1635['setWaitMode'](_0x17d0b2(0x344)):(_0x1bb9f0=_0x1c7a1f(_0x2e07e2['$1']),_0x347cf8=_0x1c8ca3(_0xaa54eb['$2'])));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x9c4),_0x87377e=>{const _0x1b41c4=_0x1a0039;if(!SceneManager[_0x1b41c4(0x984)]())return;VisuMZ[_0x1b41c4(0x44a)](_0x87377e,_0x87377e);const _0x4b34e4=_0xd08279[_0x1b41c4(0xba5)](_0x87377e[_0x1b41c4(0x1a2)]);if(_0x4b34e4<=0x0)return;const _0x4b7376=$gameTemp['getLastPluginCommandInterpreter'](),_0xd08279=BattleManager[_0x1b41c4(0xac9)],_0x4a4c2a=VisuMZ[_0x1b41c4(0x84a)](_0x87377e['Targets']),_0x4cb394=_0x87377e[_0x1b41c4(0x13a)],_0xa775b5=BattleManager[_0x1b41c4(0xa33)];if(!_0x4b7376||!_0xd08279)return;$gameTemp[_0x1b41c4(0x193)](_0x4a4c2a,_0x4b34e4,_0x4cb394),_0x87377e[_0x1b41c4(0x4b1)]&&_0x4b7376[_0x1b41c4(0x295)](_0x1b41c4(0x344));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_Animation_CastAnimation',_0x9e1e2=>{const _0x32d6ce=_0x1a0039;if(!SceneManager[_0x32d6ce(0x984)]())return;VisuMZ[_0x32d6ce(0x44a)](_0x9e1e2,_0x9e1e2);const _0x200743=$gameTemp[_0x32d6ce(0x572)](),_0x1c5df9=BattleManager[_0x32d6ce(0x548)],_0xc1bfec=_0x9e1e2['Mirror'],_0x806c84=VisuMZ[_0x32d6ce(0x84a)](_0x9e1e2[_0x32d6ce(0x9e9)]);if(!_0x200743||!_0x1c5df9)return;if(!_0x1c5df9[_0x32d6ce(0x19a)]())return;for(const _0x4e5127 of _0x806c84){if(_0x32d6ce(0x52e)===_0x32d6ce(0xa53)){if(!_0x552bcb['BattleCore'][_0x32d6ce(0x4ce)][_0x32d6ce(0x814)][_0x32d6ce(0x3ef)])return;this[_0x32d6ce(0x35a)]=new _0x37c9c6(),this[_0x32d6ce(0x35a)]['x']=this[_0x32d6ce(0x56b)]['x'],this[_0x32d6ce(0x35a)]['y']=this[_0x32d6ce(0x56b)]['y'];const _0x4adf39=this[_0x32d6ce(0x7d3)]['indexOf'](this[_0x32d6ce(0x56b)]);this['addChildAt'](this[_0x32d6ce(0x35a)],_0x4adf39);for(let _0x1d3691=0x0;_0x1d3691<0x8;_0x1d3691++){const _0x583a9d=new _0x5881c7(_0x1d3691);this[_0x32d6ce(0x35a)][_0x32d6ce(0xb20)](_0x583a9d);}}else{if(!_0x4e5127)continue;_0x4e5127['performCastAnimation'](_0x1c5df9,_0xc1bfec);}}if(_0x9e1e2[_0x32d6ce(0x4b1)])_0x200743['setWaitMode'](_0x32d6ce(0x344));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x7f5),_0x263e43=>{const _0x48cc9b=_0x1a0039;VisuMZ[_0x48cc9b(0x44a)](_0x263e43,_0x263e43);const _0x428056=$gameTemp[_0x48cc9b(0x572)](),_0x133d15=VisuMZ[_0x48cc9b(0x84a)](_0x263e43[_0x48cc9b(0x9e9)]),_0x2044fd=_0x263e43['Filename'];if(!_0x2044fd)return;for(const _0x5560dc of _0x133d15){if(_0x48cc9b(0x2a2)!==_0x48cc9b(0xb58)){if(!_0x5560dc)continue;if(!_0x5560dc[_0x48cc9b(0x261)]())continue;_0x5560dc[_0x48cc9b(0x85e)](_0x2044fd);}else this[_0x48cc9b(0x548)][_0x48cc9b(0x4f2)]=_0x101a62,this[_0x48cc9b(0xa33)]['displayReflection'](_0x4c2b56),this[_0x48cc9b(0xa33)][_0x48cc9b(0xbb7)](_0x576e6e,this['_action']),this[_0x48cc9b(0x548)]['apply'](_0x1a4f94),this[_0x48cc9b(0xa33)][_0x48cc9b(0x703)](_0x1e08fa,_0x470b13);}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x1b4),_0x22fc6a=>{const _0x45b108=_0x1a0039;if(!SceneManager[_0x45b108(0x784)])return;if(!SceneManager[_0x45b108(0x784)]['_spriteset'])return;if(!Imported[_0x45b108(0x212)])return;VisuMZ[_0x45b108(0x44a)](_0x22fc6a,_0x22fc6a);const _0x8a5aa2=$gameTemp[_0x45b108(0x572)](),_0x26a787=Math[_0x45b108(0x917)](_0x22fc6a['pointX']),_0x2059ee=Math[_0x45b108(0x917)](_0x22fc6a[_0x45b108(0xbd7)]);$gameTemp[_0x45b108(0x1ba)](_0x26a787,_0x2059ee,_0x22fc6a['AnimationID'],_0x22fc6a['Mirror'],_0x22fc6a[_0x45b108(0x6f8)]);if(_0x22fc6a[_0x45b108(0x5ce)]&&_0x8a5aa2){if(_0x45b108(0xb22)!==_0x45b108(0xb22)){if(this[_0x45b108(0x227)]()){if(this[_0x45b108(0xa2d)]()>=0x1)return!![];return this[_0x45b108(0x195)]()[_0x45b108(0x689)];}else return!![];}else SceneManager[_0x45b108(0x784)]['_spriteset'][_0x45b108(0x9ee)](),_0x8a5aa2['setWaitMode'](_0x45b108(0x344));}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Animation_ShowAnimation',_0xbd4661=>{const _0x4e6c0b=_0x1a0039;if(!SceneManager[_0x4e6c0b(0x984)]())return;VisuMZ['ConvertParams'](_0xbd4661,_0xbd4661);const _0x5aadef=$gameTemp[_0x4e6c0b(0x572)](),_0x22eb00=VisuMZ[_0x4e6c0b(0x84a)](_0xbd4661[_0x4e6c0b(0x9e9)]),_0x376e1a=_0xbd4661[_0x4e6c0b(0x82b)],_0x4cf202=_0xbd4661[_0x4e6c0b(0x13a)];if(!_0x5aadef)return;$gameTemp[_0x4e6c0b(0x193)](_0x22eb00,_0x376e1a,_0x4cf202);if(_0xbd4661[_0x4e6c0b(0x4b1)])_0x5aadef[_0x4e6c0b(0x295)](_0x4e6c0b(0x344));}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0xaf2),_0x143f1e=>{const _0x599b77=_0x1a0039;if(!SceneManager[_0x599b77(0x984)]())return;const _0x3e7e7a=$gameTemp[_0x599b77(0x572)]();if(!_0x3e7e7a)return;_0x3e7e7a[_0x599b77(0x295)](_0x599b77(0x344));}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x973),_0x44f8d6=>{const _0x217adc=_0x1a0039;if(!SceneManager[_0x217adc(0x984)]())return;VisuMZ['ConvertParams'](_0x44f8d6,_0x44f8d6);const _0x539ec4=BattleManager[_0x217adc(0xa33)],_0x3ec19a=_0x44f8d6[_0x217adc(0x793)]&&Imported[_0x217adc(0x259)];_0x539ec4['addText'](_0x44f8d6[_0x217adc(0x72b)]),_0x3ec19a&&Imported[_0x217adc(0x259)]&&$gameSystem[_0x217adc(0x497)](_0x44f8d6[_0x217adc(0x72b)]||'',_0x44f8d6['CombatLogIcon']||0x0);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x435),_0x5e7451=>{const _0x440ede=_0x1a0039;if(!SceneManager[_0x440ede(0x984)]())return;const _0x305db3=BattleManager['_logWindow'];_0x305db3[_0x440ede(0xaf1)]();}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x510),_0x6c434d=>{const _0x288b24=_0x1a0039;if(!SceneManager[_0x288b24(0x984)]())return;const _0x108a0c=$gameTemp[_0x288b24(0x572)](),_0x32a642=BattleManager[_0x288b24(0x548)],_0x2d834f=BattleManager[_0x288b24(0xac9)],_0x48ac45=BattleManager[_0x288b24(0xa33)];if(!_0x108a0c||!_0x32a642||!_0x2d834f)return;if(!_0x32a642[_0x288b24(0x19a)]())return;_0x48ac45[_0x288b24(0x98a)](_0x2d834f,_0x32a642[_0x288b24(0x19a)]()),_0x108a0c[_0x288b24(0x295)](_0x288b24(0x28f));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_BattleLog_PopBaseLine',_0x3035a9=>{const _0x509af5=_0x1a0039;if(!SceneManager['isSceneBattle']())return;const _0x49d56b=BattleManager[_0x509af5(0xa33)];_0x49d56b[_0x509af5(0x5ef)]();}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x455),_0x4fe915=>{const _0x2668f0=_0x1a0039;if(!SceneManager['isSceneBattle']())return;const _0x36f4d6=BattleManager[_0x2668f0(0xa33)];_0x36f4d6['pushBaseLine']();}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x967),_0x1c3eab=>{const _0x5d7a3a=_0x1a0039;if(!SceneManager[_0x5d7a3a(0x984)]())return;const _0x37f798=BattleManager['_logWindow'];_0x37f798[_0x5d7a3a(0x466)]();}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x74e),_0x173d79=>{const _0x1ee1be=_0x1a0039;if(!SceneManager[_0x1ee1be(0x984)]())return;VisuMZ['ConvertParams'](_0x173d79,_0x173d79),SceneManager[_0x1ee1be(0x784)][_0x1ee1be(0x201)](_0x173d79[_0x1ee1be(0x4ca)]);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x18b),_0xa604e9=>{const _0x45a5e0=_0x1a0039;if(!SceneManager[_0x45a5e0(0x984)]())return;const _0x18f9ce=$gameTemp[_0x45a5e0(0x572)]();_0x18f9ce[_0x45a5e0(0x295)](_0x45a5e0(0x28f));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x7ef),_0x4a89d4=>{const _0x5a57ce=_0x1a0039;if(!SceneManager[_0x5a57ce(0x984)]())return;const _0x3afc19=$gameTemp['getLastPluginCommandInterpreter'](),_0x351875=BattleManager[_0x5a57ce(0xa33)];_0x351875[_0x5a57ce(0x4c7)](),_0x3afc19[_0x5a57ce(0x295)]('battlelog');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x173),_0x876e31=>{const _0x2f8bbd=_0x1a0039;if(!SceneManager[_0x2f8bbd(0x984)]())return;if(!Imported[_0x2f8bbd(0x624)])return;VisuMZ['ConvertParams'](_0x876e31,_0x876e31);const _0x1f465c=$gameScreen[_0x2f8bbd(0x588)]();_0x1f465c[_0x2f8bbd(0x768)]=_0x876e31[_0x2f8bbd(0x861)];}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x801),_0x9fdd93=>{const _0xc3ae86=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xc3ae86(0x44a)](_0x9fdd93,_0x9fdd93);const _0x1e91b3=$gameTemp[_0xc3ae86(0x572)](),_0x10ad4d=_0x9fdd93[_0xc3ae86(0x2ba)];$gameScreen['setBattleCameraPoint'](_0x9fdd93[_0xc3ae86(0xaf6)],_0x9fdd93[_0xc3ae86(0x19d)],_0x9fdd93[_0xc3ae86(0xa62)],_0x9fdd93[_0xc3ae86(0xaea)]);if(_0x10ad4d)_0x1e91b3['setWaitMode'](_0xc3ae86(0x6b7));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x1f6),_0x5105dd=>{const _0x3ee5f1=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ee5f1(0x624)])return;VisuMZ[_0x3ee5f1(0x44a)](_0x5105dd,_0x5105dd);const _0xd8bb70=$gameTemp[_0x3ee5f1(0x572)](),_0x5bddfc=VisuMZ['CreateActionSequenceTargets'](_0x5105dd['Targets']),_0x4cd264=_0x5105dd['WaitForCamera'];$gameScreen[_0x3ee5f1(0xa7a)](_0x5bddfc,_0x5105dd[_0x3ee5f1(0xa62)],_0x5105dd[_0x3ee5f1(0xaea)]);if(_0x4cd264)_0xd8bb70['setWaitMode']('battleCamera');}),PluginManager[_0x1a0039(0x832)](pluginData['name'],'ActSeq_Camera_Offset',_0x3dd49d=>{const _0x4d73d9=_0x1a0039;if(!SceneManager[_0x4d73d9(0x984)]())return;if(!Imported[_0x4d73d9(0x624)])return;VisuMZ[_0x4d73d9(0x44a)](_0x3dd49d,_0x3dd49d);const _0x2cd3dc=$gameTemp[_0x4d73d9(0x572)](),_0x165440=_0x3dd49d[_0x4d73d9(0x2ba)];$gameScreen[_0x4d73d9(0x1cc)](_0x3dd49d[_0x4d73d9(0x1b9)],_0x3dd49d[_0x4d73d9(0x5f2)],_0x3dd49d[_0x4d73d9(0xa62)],_0x3dd49d[_0x4d73d9(0xaea)]);if(_0x165440)_0x2cd3dc[_0x4d73d9(0x295)](_0x4d73d9(0x6b7));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Camera_Reset',_0x26bb21=>{const _0x2020d3=_0x1a0039;if(!SceneManager[_0x2020d3(0x984)]())return;if(!Imported[_0x2020d3(0x624)])return;VisuMZ['ConvertParams'](_0x26bb21,_0x26bb21);const _0x16fccb=$gameTemp[_0x2020d3(0x572)](),_0x424c70=_0x26bb21[_0x2020d3(0x308)],_0x1a52e6=_0x26bb21['ResetOffset'],_0x26f54c=_0x26bb21[_0x2020d3(0x2ba)];if(_0x424c70){if(_0x2020d3(0x472)!==_0x2020d3(0x472))_0x4fbf42[_0x2020d3(0xa1e)][_0x2020d3(0x773)][_0x2020d3(0xb33)](this,_0x564237),this[_0x2020d3(0x795)]()&&_0x5f1e79===this['deathStateId']()&&this[_0x2020d3(0x140)]()&&(this['_visualHpGauge_JustDied']=![]),!this[_0x2020d3(0x469)]&&!this[_0x2020d3(0x2d1)]&&_0x370293[_0x2020d3(0x984)]()&&this[_0x2020d3(0x294)]();else{const _0x5aa06f=Math[_0x2020d3(0x917)](Graphics['width']/0x2),_0x2954de=Math[_0x2020d3(0x917)](Graphics['height']/0x2);$gameScreen[_0x2020d3(0xa0d)](_0x5aa06f,_0x2954de,_0x26bb21['Duration'],_0x26bb21['EasingType']);}}_0x1a52e6&&('TvVUp'!==_0x2020d3(0x6b4)?this[_0x2020d3(0x209)]=_0x2020d3(0x189):$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x26bb21['Duration'],_0x26bb21[_0x2020d3(0xaea)]));if(_0x26f54c)_0x16fccb['setWaitMode'](_0x2020d3(0x6b7));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0xbed),_0x30f37a=>{const _0x25cce0=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x25cce0(0x624)])return;const _0x5c089e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5c089e)return;_0x5c089e['setWaitMode']('battleCamera');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_DB_DragonbonesMotionAni',_0x4acc63=>{const _0x42486a=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x42486a(0x711)])return;VisuMZ[_0x42486a(0x44a)](_0x4acc63,_0x4acc63);const _0x5692ab=VisuMZ[_0x42486a(0x84a)](_0x4acc63[_0x42486a(0x9e9)]),_0x573bd7=_0x4acc63['MotionAni']['toLowerCase']()[_0x42486a(0x850)]();for(const _0x2d828e of _0x5692ab){if(_0x42486a(0x660)===_0x42486a(0x660)){if(!_0x2d828e)continue;_0x2d828e['requestDragonbonesAnimation'](_0x573bd7);}else{if(this['_lastEnemy']&&this['_enemies'][_0x42486a(0x604)](this[_0x42486a(0x2de)])){const _0x576523=this[_0x42486a(0x48a)][_0x42486a(0xadc)](this[_0x42486a(0x2de)]);this[_0x42486a(0x52d)](_0x576523);}else this['autoSelectPriority']();}}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0xb72),_0x86339a=>{const _0x1976e1=_0x1a0039;if(!SceneManager[_0x1976e1(0x984)]())return;if(!Imported[_0x1976e1(0x711)])return;VisuMZ[_0x1976e1(0x44a)](_0x86339a,_0x86339a);const _0x87fb1a=VisuMZ['CreateActionSequenceTargets'](_0x86339a[_0x1976e1(0x9e9)]),_0x180f50=_0x86339a[_0x1976e1(0x338)];for(const _0x248f7d of _0x87fb1a){if(!_0x248f7d)continue;_0x248f7d[_0x1976e1(0x485)]()['timeScale']=_0x180f50;}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x4d3),_0x3eb1d6=>{const _0x3fd303=_0x1a0039;if(!SceneManager[_0x3fd303(0x984)]())return;if(!Imported[_0x3fd303(0x5f6)])return;VisuMZ[_0x3fd303(0x44a)](_0x3eb1d6,_0x3eb1d6);const _0x4ca200=BattleManager[_0x3fd303(0x548)],_0x584ac9=_0x3eb1d6['Elements'];if(!_0x4ca200)return;_0x4ca200[_0x3fd303(0x7f3)]=_0x584ac9;}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x378),_0xf705d4=>{const _0x2ebaba=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ebaba(0x5f6)])return;const _0x1e53e6=BattleManager[_0x2ebaba(0x548)];if(!_0x1e53e6)return;_0x1e53e6[_0x2ebaba(0x782)]();}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x775),_0x2cdd19=>{const _0x589aaf=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x589aaf(0x5f6)])return;VisuMZ['ConvertParams'](_0x2cdd19,_0x2cdd19);const _0x393cb1=BattleManager['_action'],_0x115ecf=_0x2cdd19['Elements'];if(!_0x393cb1)return;_0x393cb1[_0x589aaf(0x159)]=_0x115ecf;}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x58f),_0x4cd18c=>{const _0x1c2c4e=_0x1a0039;if(!SceneManager[_0x1c2c4e(0x984)]())return;if(!Imported[_0x1c2c4e(0x5f6)])return;const _0x5dde1f=BattleManager[_0x1c2c4e(0x548)];if(!_0x5dde1f)return;_0x5dde1f[_0x1c2c4e(0x87c)]=!![];}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x965),_0x1fad29=>{const _0x13ed0c=_0x1a0039;if(!Imported[_0x13ed0c(0xb8f)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x13ed0c(0x44a)](_0x1fad29,_0x1fad29);const _0x2e8e9a=VisuMZ[_0x13ed0c(0x84a)](_0x1fad29[_0x13ed0c(0x9e9)]);for(const _0x2c47d2 of _0x2e8e9a){if(!_0x2c47d2)continue;_0x2c47d2['removeHorrorEffect']('noise'),_0x2c47d2['removeHorrorEffect'](_0x13ed0c(0x7d4)),_0x2c47d2[_0x13ed0c(0xbcb)]('tv'),_0x2c47d2[_0x13ed0c(0x187)]();}$gamePlayer[_0x13ed0c(0x466)]();}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x57f),_0xf26648=>{const _0x16344c=_0x1a0039;if(!Imported[_0x16344c(0xb8f)])return;if(!SceneManager[_0x16344c(0x984)]())return;VisuMZ[_0x16344c(0x44a)](_0xf26648,_0xf26648);const _0x5b7a0d=VisuMZ['CreateActionSequenceTargets'](_0xf26648['Targets']),_0x1e7c58=_0x16344c(0x7d4);_0xf26648['sliceMin']=Math[_0x16344c(0xb9b)](_0xf26648[_0x16344c(0x41f)]/0x2),_0xf26648[_0x16344c(0x65d)]=_0xf26648[_0x16344c(0x41f)],_0xf26648[_0x16344c(0x4bd)]=!![];for(const _0x34a51d of _0x5b7a0d){if(!_0x34a51d)continue;_0x34a51d[_0x16344c(0x897)](_0x1e7c58,_0xf26648);}$gamePlayer['refresh']();}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Horror_GlitchRemove',_0x127932=>{const _0x58ba96=_0x1a0039;if(!Imported[_0x58ba96(0xb8f)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x127932,_0x127932);const _0x5f06aa=VisuMZ[_0x58ba96(0x84a)](_0x127932[_0x58ba96(0x9e9)]);for(const _0xc4fb8c of _0x5f06aa){if(_0x58ba96(0x6ea)===_0x58ba96(0x205)){this['bitmap']=new _0x3efeb7(0x1,0x1);if(this[_0x58ba96(0x227)]()){const _0x19b96d=this['_enemy']['svBattlerData']();this[_0x58ba96(0x3bc)]=new _0x272685(_0x19b96d[_0x58ba96(0x926)],_0x19b96d['height']),this[_0x58ba96(0xa1c)][_0x58ba96(0x3bc)]=new _0x1b044a(0x1,0x1);}else _0x24ecb1['isSideView']()?(this[_0x58ba96(0xa1c)][_0x58ba96(0x3bc)]=_0x1c28c3[_0x58ba96(0xa02)](_0x8522ca),this[_0x58ba96(0xa1c)][_0x58ba96(0x3bc)][_0x58ba96(0x870)](this['createEmptyBitmap']['bind'](this))):(this[_0x58ba96(0xa1c)]['bitmap']=_0x202f57[_0x58ba96(0x5fd)](_0x6be516),this['_mainSprite']['bitmap']['addLoadListener'](this[_0x58ba96(0x29e)][_0x58ba96(0x940)](this)));}else{if(!_0xc4fb8c)continue;_0xc4fb8c['removeHorrorEffect'](_0x58ba96(0x7d4));}}$gamePlayer[_0x58ba96(0x466)]();}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_Horror_NoiseCreate',_0x1a2d92=>{const _0x3262a5=_0x1a0039;if(!Imported[_0x3262a5(0xb8f)])return;if(!SceneManager[_0x3262a5(0x984)]())return;VisuMZ[_0x3262a5(0x44a)](_0x1a2d92,_0x1a2d92);const _0x5cd3b8=VisuMZ['CreateActionSequenceTargets'](_0x1a2d92[_0x3262a5(0x9e9)]),_0x219242=_0x3262a5(0xa45);for(const _0x237b95 of _0x5cd3b8){if(!_0x237b95)continue;_0x237b95['setHorrorEffectSettings'](_0x219242,_0x1a2d92);}$gamePlayer[_0x3262a5(0x466)]();}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x257),_0x5c4be1=>{const _0x40f35e=_0x1a0039;if(!Imported[_0x40f35e(0xb8f)])return;if(!SceneManager[_0x40f35e(0x984)]())return;VisuMZ['ConvertParams'](_0x5c4be1,_0x5c4be1);const _0xfe18ad=VisuMZ[_0x40f35e(0x84a)](_0x5c4be1[_0x40f35e(0x9e9)]);for(const _0x3ba7d5 of _0xfe18ad){if(!_0x3ba7d5)continue;_0x3ba7d5[_0x40f35e(0xbcb)](_0x40f35e(0xa45));}$gamePlayer[_0x40f35e(0x466)]();}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x947),_0x124f2f=>{const _0xe1203e=_0x1a0039;if(!Imported[_0xe1203e(0xb8f)])return;if(!SceneManager[_0xe1203e(0x984)]())return;VisuMZ['ConvertParams'](_0x124f2f,_0x124f2f);const _0x2cddf0=VisuMZ['CreateActionSequenceTargets'](_0x124f2f[_0xe1203e(0x9e9)]),_0x53537a='tv';for(const _0x105772 of _0x2cddf0){if(!_0x105772)continue;_0x105772[_0xe1203e(0x897)](_0x53537a,_0x124f2f);}$gamePlayer[_0xe1203e(0x466)]();}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x525),_0x27c3f8=>{const _0x1f9979=_0x1a0039;if(!Imported[_0x1f9979(0xb8f)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1f9979(0x44a)](_0x27c3f8,_0x27c3f8);const _0x46ff87=VisuMZ[_0x1f9979(0x84a)](_0x27c3f8[_0x1f9979(0x9e9)]);for(const _0x331499 of _0x46ff87){if(_0x1f9979(0xb07)===_0x1f9979(0xb07)){if(!_0x331499)continue;_0x331499['removeHorrorEffect']('tv');}else _0x3ab8cf[_0x1f9979(0xa1e)][_0x1f9979(0x158)][_0x1f9979(0xb33)](this,_0x191290),this['initBattleCore'](),this[_0x1f9979(0x9c8)]();}$gamePlayer[_0x1f9979(0x466)]();}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Impact_ColorBreak',_0x3953c0=>{const _0x27e9f7=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x11526b=SceneManager[_0x27e9f7(0x784)][_0x27e9f7(0x942)];if(!_0x11526b)return;VisuMZ['ConvertParams'](_0x3953c0,_0x3953c0);const _0x2a0d0c=_0x3953c0[_0x27e9f7(0x34d)]||0x1,_0x199585=_0x3953c0[_0x27e9f7(0xa62)]||0x1,_0x67c6f4=_0x3953c0[_0x27e9f7(0xaea)]||_0x27e9f7(0x3d0);_0x11526b[_0x27e9f7(0x143)](_0x2a0d0c,_0x199585,_0x67c6f4);}),PluginManager['registerCommand'](pluginData['name'],_0x1a0039(0x155),_0x1b7eb9=>{const _0x536bc8=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3bd427=SceneManager[_0x536bc8(0x784)][_0x536bc8(0x942)];if(!_0x3bd427)return;VisuMZ[_0x536bc8(0x44a)](_0x1b7eb9,_0x1b7eb9);const _0x378b21=Number(_0x1b7eb9['Angle'])||0x0,_0x2812b3=Number(_0x1b7eb9[_0x536bc8(0x446)]),_0x487c41=_0x1b7eb9[_0x536bc8(0xa62)]||0x1,_0x27c669=_0x1b7eb9[_0x536bc8(0xaea)]||_0x536bc8(0x3d0);_0x3bd427[_0x536bc8(0x13d)](_0x378b21,_0x2812b3,_0x487c41,_0x27c669);}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0xac4),_0x21b59b=>{const _0x3cbc96=_0x1a0039;if(!SceneManager[_0x3cbc96(0x984)]())return;if(!Imported[_0x3cbc96(0x2dd)])return;const _0x44e1ef=SceneManager[_0x3cbc96(0x784)]['_spriteset'];if(!_0x44e1ef)return;VisuMZ[_0x3cbc96(0x44a)](_0x21b59b,_0x21b59b);const _0x36cdfe=Number(_0x21b59b['Angle'])||0x0,_0x1983aa=Number(_0x21b59b['Rate']),_0x7ebefe=_0x21b59b[_0x3cbc96(0xa62)]||0x1,_0x571dd0=_0x21b59b[_0x3cbc96(0xaea)]||_0x3cbc96(0x3d0),_0x4b4f1c=VisuMZ[_0x3cbc96(0x84a)](_0x21b59b[_0x3cbc96(0x9e9)]);for(const _0x1ae0b9 of _0x4b4f1c){if(_0x3cbc96(0x8e1)===_0x3cbc96(0x3cc))this[_0x3cbc96(0x9ca)]['x']=0x0,this[_0x3cbc96(0x3d9)]=_0x48a346['ceil'](_0x39c06f[_0x3cbc96(0x926)]/0x2);else{if(!_0x1ae0b9)continue;if(!_0x1ae0b9['battler']())continue;_0x1ae0b9[_0x3cbc96(0x68a)]()[_0x3cbc96(0x13d)](_0x36cdfe,_0x1983aa,_0x7ebefe,_0x571dd0);}}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Impact_MotionTrailCreate',_0x2a0170=>{const _0x182ed7=_0x1a0039;if(!SceneManager[_0x182ed7(0x984)]())return;if(!Imported[_0x182ed7(0x2dd)])return;VisuMZ[_0x182ed7(0x44a)](_0x2a0170,_0x2a0170);const _0x1fbe44={'delay':_0x2a0170['delay'],'duration':_0x2a0170[_0x182ed7(0x4eb)],'hue':_0x2a0170[_0x182ed7(0x49e)],'opacityStart':_0x2a0170[_0x182ed7(0xb52)],'tone':_0x2a0170[_0x182ed7(0x651)],'visible':!![]},_0x43e412=VisuMZ[_0x182ed7(0x84a)](_0x2a0170[_0x182ed7(0x9e9)]);for(const _0x2d6c11 of _0x43e412){if('zmiDF'!==_0x182ed7(0x83d)){if(!_0x2d6c11)continue;_0x2d6c11['setBattlerMotionTrailData'](_0x1fbe44);}else this['_enemies'][_0x182ed7(0x7d5)]();}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x402),_0x4aeb70=>{const _0x4cced8=_0x1a0039;if(!SceneManager[_0x4cced8(0x984)]())return;if(!Imported[_0x4cced8(0x2dd)])return;VisuMZ[_0x4cced8(0x44a)](_0x4aeb70,_0x4aeb70);const _0x3a143d=VisuMZ['CreateActionSequenceTargets'](_0x4aeb70[_0x4cced8(0x9e9)]);for(const _0x5b4a9 of _0x3a143d){if(_0x4cced8(0x961)!==_0x4cced8(0x961)){const _0xf3cedb=this[_0x4cced8(0xac9)][_0x4cced8(0xa70)](),_0x2a0f0f=this[_0x4cced8(0xac9)];_0xf3cedb&&_0xf3cedb['subject']()===_0x2a0f0f&&_0xf3cedb[_0x4cced8(0x3fc)](_0x4cced8(0x783)),_0x84088f[_0x4cced8(0xa1e)][_0x4cced8(0xa08)][_0x4cced8(0xb33)](this),_0xf3cedb&&_0xf3cedb['subject']()===_0x2a0f0f&&_0xf3cedb['actionBattleCoreJS']('PostStartActionJS');}else{if(!_0x5b4a9)continue;_0x5b4a9[_0x4cced8(0x4e1)]();}}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x875),_0x3a0c9e=>{const _0x2307c6=_0x1a0039;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x276c49=SceneManager['_scene'][_0x2307c6(0x942)];if(!_0x276c49)return;VisuMZ[_0x2307c6(0x44a)](_0x3a0c9e,_0x3a0c9e);const _0x4654ee=_0x3a0c9e['X']||0x0,_0x27746a=_0x3a0c9e['Y']||0x0,_0x298a58=_0x3a0c9e['Amp']||0x0,_0x4cefb6=_0x3a0c9e[_0x2307c6(0x47c)]||0x0,_0x12a08c=_0x3a0c9e['Duration']||0x1;_0x276c49['setupShockwaveImpactFilter'](_0x4654ee,_0x27746a,_0x298a58,_0x4cefb6,_0x12a08c);}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0xb62),_0x558d23=>{const _0x407588=_0x1a0039;if(!SceneManager[_0x407588(0x984)]())return;if(!Imported[_0x407588(0x2dd)])return;const _0x30d519=SceneManager[_0x407588(0x784)]['_spriteset'];if(!_0x30d519)return;VisuMZ['ConvertParams'](_0x558d23,_0x558d23);const _0x485c8d=VisuMZ['CreateActionSequenceTargets'](_0x558d23[_0x407588(0x9e9)]),_0x4adf50=_0x558d23[_0x407588(0x34f)],_0xe34922=_0x558d23[_0x407588(0x1b9)]||0x0,_0x40710b=_0x558d23['OffsetY']||0x0,_0xa1d84d=_0x558d23[_0x407588(0x5f3)]||0x0,_0x3e2ce8=_0x558d23['Wave']||0x0,_0x67f236=_0x558d23[_0x407588(0xa62)]||0x1;for(const _0x3749a0 of _0x485c8d){if(_0x407588(0xa42)!==_0x407588(0xa42))return!this[_0x407588(0x64f)]()&&!this[_0x407588(0x6c6)]();else{if(!_0x3749a0)continue;if(!_0x3749a0[_0x407588(0x68a)]())continue;const _0x369966=_0x3749a0[_0x407588(0x68a)]();let _0x51afcd=_0x369966[_0x407588(0x1d4)],_0x2f28d5=_0x369966[_0x407588(0x9da)];_0x51afcd+=(Graphics['width']-Graphics[_0x407588(0x5d3)])/0x2,_0x2f28d5+=(Graphics['height']-Graphics[_0x407588(0x7b0)])/0x2;if(_0x4adf50[_0x407588(0x7f1)](/front/i)){if(_0x407588(0x9e5)!==_0x407588(0x7bf))_0x51afcd+=(_0x3749a0[_0x407588(0x795)]()?0x1:-0x1)*_0x369966['mainSpriteWidth']()/0x2;else{const _0x34bc17=this[_0x407588(0x388)](this[_0x407588(0x589)]());let _0x29a7c9=this[_0x407588(0x77d)](this[_0x407588(0x589)]());_0x29a7c9=_0x29a7c9['replace'](/\\I\[(\d+)\]/gi,''),_0x32946a[_0x407588(0x423)](),this[_0x407588(0x2f2)](_0x29a7c9,_0x34bc17),this[_0x407588(0x3b6)](_0x29a7c9,_0x34bc17),this[_0x407588(0x53f)](_0x29a7c9,_0x34bc17);}}else _0x4adf50[_0x407588(0x7f1)](/back/i)&&(_0x51afcd+=(_0x3749a0['isEnemy']()?-0x1:0x1)*_0x369966[_0x407588(0x393)]()/0x2);if(_0x4adf50[_0x407588(0x7f1)](/head/i))_0x407588(0xa11)===_0x407588(0xa11)?_0x2f28d5-=_0x369966[_0x407588(0x889)]():_0x35158e[_0x407588(0x9bf)]=!![];else _0x4adf50[_0x407588(0x7f1)](/center/i)&&(_0x2f28d5-=_0x369966[_0x407588(0x889)]()/0x2);_0x51afcd+=_0xe34922,_0x2f28d5+=_0x40710b,_0x30d519[_0x407588(0x152)](_0x51afcd,_0x2f28d5,_0xa1d84d,_0x3e2ce8,_0x67f236);}}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Impact_ShockwaveCenterTargets',_0x23698b=>{const _0x22fa5a=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x22fa5a(0x2dd)])return;const _0x5652ad=SceneManager[_0x22fa5a(0x784)]['_spriteset'];if(!_0x5652ad)return;VisuMZ[_0x22fa5a(0x44a)](_0x23698b,_0x23698b);const _0x44cee8=VisuMZ[_0x22fa5a(0x84a)](_0x23698b[_0x22fa5a(0x9e9)]),_0x25d1de=_0x23698b[_0x22fa5a(0x34f)],_0x143fc8=_0x23698b[_0x22fa5a(0x1b9)]||0x0,_0x1ff5d6=_0x23698b[_0x22fa5a(0x5f2)]||0x0,_0x1d6d8f=_0x23698b[_0x22fa5a(0x5f3)]||0x0,_0x5091ab=_0x23698b[_0x22fa5a(0x47c)]||0x0,_0x18afd5=_0x23698b[_0x22fa5a(0xa62)]||0x1,_0x377b57=Math[_0x22fa5a(0x409)](..._0x44cee8['map'](_0x528a90=>_0x528a90['battler']()[_0x22fa5a(0x1d4)]-_0x528a90[_0x22fa5a(0x68a)]()[_0x22fa5a(0x393)]()/0x2)),_0x2da2c9=Math[_0x22fa5a(0x8ae)](..._0x44cee8[_0x22fa5a(0x73b)](_0x5b68cc=>_0x5b68cc[_0x22fa5a(0x68a)]()[_0x22fa5a(0x1d4)]+_0x5b68cc[_0x22fa5a(0x68a)]()[_0x22fa5a(0x393)]()/0x2)),_0x102a1d=Math[_0x22fa5a(0x409)](..._0x44cee8[_0x22fa5a(0x73b)](_0x4d2f69=>_0x4d2f69[_0x22fa5a(0x68a)]()[_0x22fa5a(0x9da)]-_0x4d2f69[_0x22fa5a(0x68a)]()[_0x22fa5a(0x889)]())),_0x786543=Math['max'](..._0x44cee8[_0x22fa5a(0x73b)](_0x1788d0=>_0x1788d0[_0x22fa5a(0x68a)]()['_baseY'])),_0x32f021=_0x44cee8[_0x22fa5a(0x538)](_0x38a038=>_0x38a038['isActor']())[_0x22fa5a(0x2c0)],_0xa289d2=_0x44cee8['filter'](_0x3be256=>_0x3be256[_0x22fa5a(0x795)]())[_0x22fa5a(0x2c0)];let _0x4ca2ac=0x0,_0x10f53e=0x0;if(_0x25d1de[_0x22fa5a(0x7f1)](/front/i)){if('HvSKY'!==_0x22fa5a(0x958)){const _0x46f0d8=this[_0x22fa5a(0x77d)](_0x3a502f);if(_0x46f0d8['match'](/\\I\[(\d+)\]/i)){const _0x2ca4e6=this[_0x22fa5a(0x388)](_0x2cdc08),_0x318287=this[_0x22fa5a(0x3a4)](_0x46f0d8)[_0x22fa5a(0x926)];return _0x318287<=_0x2ca4e6[_0x22fa5a(0x926)]?_0x22fa5a(0x3ba):'icon';}}else _0x4ca2ac=_0x32f021>=_0xa289d2?_0x377b57:_0x2da2c9;}else{if(_0x25d1de[_0x22fa5a(0x7f1)](/middle/i)){if(_0x22fa5a(0xba6)!==_0x22fa5a(0xba6)){if(_0x4d55a6===_0x768ab6[_0x22fa5a(0xb02)]()){let _0x15896d=_0x426fd0[_0x22fa5a(0x8be)];_0x15896d*=_0x2936e7[_0x22fa5a(0x230)](_0x5c6a50),_0x15896d*=this['subject']()[_0x22fa5a(0xb0b)](_0x587b36),_0x15896d*=this['lukEffectRate'](_0x262304),_0x54b8a9[_0x22fa5a(0x16a)]()<_0x15896d&&(_0x25acf8['_deathStateApplied']=!![],this['makeSuccess'](_0x3e19fe));}}else _0x4ca2ac=(_0x377b57+_0x2da2c9)/0x2,melee=-0x1;}else _0x25d1de[_0x22fa5a(0x7f1)](/back/i)&&(_0x4ca2ac=_0x32f021>=_0xa289d2?_0x2da2c9:_0x377b57);}if(_0x25d1de[_0x22fa5a(0x7f1)](/head/i))_0x10f53e=_0x102a1d;else{if(_0x25d1de['match'](/center/i))_0x10f53e=(_0x102a1d+_0x786543)/0x2;else _0x25d1de['match'](/base/i)&&(_0x22fa5a(0x8a3)!=='nxfZC'?_0x10f53e=_0x786543:this[_0x22fa5a(0x2b0)]());}_0x4ca2ac+=(Graphics[_0x22fa5a(0x926)]-Graphics[_0x22fa5a(0x5d3)])/0x2,_0x10f53e+=(Graphics[_0x22fa5a(0x84d)]-Graphics[_0x22fa5a(0x7b0)])/0x2,_0x4ca2ac+=_0x143fc8,_0x10f53e+=_0x1ff5d6,_0x5652ad['setupShockwaveImpactFilter'](_0x4ca2ac,_0x10f53e,_0x1d6d8f,_0x5091ab,_0x18afd5);}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x9bb),_0x216c6e=>{const _0x9d7ad3=_0x1a0039;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x51a3aa=SceneManager[_0x9d7ad3(0x784)][_0x9d7ad3(0x942)];if(!_0x51a3aa)return;VisuMZ[_0x9d7ad3(0x44a)](_0x216c6e,_0x216c6e);const _0xe94864=_0x216c6e['X']||0x0,_0x2814be=_0x216c6e['Y']||0x0,_0x923e6=_0x216c6e[_0x9d7ad3(0x82f)]||0x0,_0x180b92=_0x216c6e[_0x9d7ad3(0x1d6)]||0x0,_0xcee5d9=_0x216c6e[_0x9d7ad3(0xa62)]||0x1,_0x43b536=_0x216c6e['EasingType']||'Linear';_0x51a3aa[_0x9d7ad3(0x220)](_0x923e6,_0xe94864,_0x2814be,_0x180b92,_0xcee5d9,_0x43b536);}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x98f),_0x5e450a=>{const _0x240733=_0x1a0039;if(!Imported[_0x240733(0x2dd)])return;const _0x4c8e77=SceneManager[_0x240733(0x784)][_0x240733(0x942)];if(!_0x4c8e77)return;VisuMZ[_0x240733(0x44a)](_0x5e450a,_0x5e450a);const _0x4b0543=VisuMZ[_0x240733(0x84a)](_0x5e450a[_0x240733(0x9e9)]),_0x655496=_0x5e450a[_0x240733(0x34f)],_0x5627d9=_0x5e450a[_0x240733(0x1b9)]||0x0,_0x2174d8=_0x5e450a[_0x240733(0x5f2)]||0x0,_0x112c1a=_0x5e450a[_0x240733(0x82f)]||0x0,_0x9ce9ee=_0x5e450a[_0x240733(0x1d6)]||0x0,_0x250e4c=_0x5e450a[_0x240733(0xa62)]||0x1,_0x431d18=_0x5e450a[_0x240733(0xaea)]||_0x240733(0x3d0),_0x1cd52c=Math[_0x240733(0x409)](..._0x4b0543[_0x240733(0x73b)](_0x484995=>_0x484995['battler']()[_0x240733(0x1d4)]-_0x484995[_0x240733(0x68a)]()[_0x240733(0x393)]()/0x2)),_0x19a261=Math['max'](..._0x4b0543['map'](_0x244032=>_0x244032['battler']()[_0x240733(0x1d4)]+_0x244032[_0x240733(0x68a)]()[_0x240733(0x393)]()/0x2)),_0x24f287=Math[_0x240733(0x409)](..._0x4b0543[_0x240733(0x73b)](_0xa098a9=>_0xa098a9['battler']()['_baseY']-_0xa098a9[_0x240733(0x68a)]()[_0x240733(0x889)]())),_0x556011=Math[_0x240733(0x8ae)](..._0x4b0543['map'](_0x55e079=>_0x55e079[_0x240733(0x68a)]()[_0x240733(0x9da)])),_0x512625=_0x4b0543['filter'](_0x4980e4=>_0x4980e4[_0x240733(0x261)]())['length'],_0x14b0c6=_0x4b0543[_0x240733(0x538)](_0x5b9ded=>_0x5b9ded[_0x240733(0x795)]())[_0x240733(0x2c0)];let _0x1e0cfc=0x0,_0x3c8979=0x0;if(_0x655496[_0x240733(0x7f1)](/front/i))_0x1e0cfc=_0x512625>=_0x14b0c6?_0x1cd52c:_0x19a261;else{if(_0x655496['match'](/middle/i))_0x1e0cfc=(_0x1cd52c+_0x19a261)/0x2,melee=-0x1;else _0x655496[_0x240733(0x7f1)](/back/i)&&(_0x240733(0x83f)==='HygER'?_0x1e0cfc=_0x512625>=_0x14b0c6?_0x19a261:_0x1cd52c:(_0x3f431f[_0x240733(0xa1e)]['BattleManager_initMembers'][_0x240733(0xb33)](this),this['_forcedBattlers']=[]));}if(_0x655496['match'](/head/i))'Mymft'===_0x240733(0x444)?this[_0x240733(0xa04)][_0x240733(0xb20)](this['_dragonbonesSpriteContainer']):_0x3c8979=_0x24f287;else{if(_0x655496['match'](/center/i)){if(_0x240733(0x62f)!==_0x240733(0x62f)){if(!_0x5ad87f[_0x240733(0x969)]())return;if(this['_flinched'])return;this[_0x240733(0x1de)]=!![];const _0x307a73=this['battler']();if(_0x307a73)_0x307a73['stepFlinch']();}else _0x3c8979=(_0x24f287+_0x556011)/0x2;}else _0x655496[_0x240733(0x7f1)](/base/i)&&(_0x3c8979=_0x556011);}_0x1e0cfc+=(Graphics[_0x240733(0x926)]-Graphics[_0x240733(0x5d3)])/0x2,_0x3c8979+=(Graphics[_0x240733(0x84d)]-Graphics[_0x240733(0x7b0)])/0x2,_0x1e0cfc+=_0x5627d9,_0x3c8979+=_0x2174d8,_0x4c8e77['setupZoomBlurImpactFilter'](_0x112c1a,_0x1e0cfc,_0x3c8979,_0x9ce9ee,_0x250e4c,_0x431d18);}),PluginManager['registerCommand'](pluginData['name'],_0x1a0039(0x750),_0x2bbafb=>{const _0x166fa9=_0x1a0039;if(!SceneManager[_0x166fa9(0x984)]())return;VisuMZ[_0x166fa9(0x44a)](_0x2bbafb,_0x2bbafb);const _0x20286e=$gameTemp['getLastPluginCommandInterpreter'](),_0x5270ff=BattleManager[_0x166fa9(0x548)],_0x2d9a5b=BattleManager[_0x166fa9(0xac9)],_0x188b3a=BattleManager[_0x166fa9(0xa33)];if(!_0x20286e||!_0x5270ff||!_0x2d9a5b)return;if(!_0x5270ff['item']())return;const _0x5128fa=VisuMZ['CreateActionSequenceTargets'](_0x2bbafb[_0x166fa9(0x9e9)]);for(const _0x231ca9 of _0x5128fa){if(_0x166fa9(0xb44)!==_0x166fa9(0xb44)){if(!_0xdb2083[_0x166fa9(0xa1e)][_0x166fa9(0x4ce)]['BattleLayout'][_0x166fa9(0x5d6)])return;const _0x50dc7b=this['actor'](_0x2a270b),_0x586eae=this[_0x166fa9(0xa3a)](_0x4f274e);_0x586eae['width']=_0x3c7411[_0x166fa9(0x365)],_0x586eae[_0x166fa9(0x84d)]-=0x2,this[_0x166fa9(0x3bb)](_0x50dc7b,_0x586eae['x']+0x1,_0x586eae['y']+0x1,_0x586eae[_0x166fa9(0x926)],_0x586eae[_0x166fa9(0x84d)]);}else{if(!_0x231ca9)continue;_0x188b3a['push']('actionEffect',_0x2d9a5b,_0x231ca9);}}_0x20286e[_0x166fa9(0x295)](_0x166fa9(0x28f));}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x7a7),_0xb90305=>{const _0x478b62=_0x1a0039;if(!SceneManager[_0x478b62(0x984)]())return;VisuMZ[_0x478b62(0x44a)](_0xb90305,_0xb90305);const _0x32fe74=['MAXHP',_0x478b62(0xb36),_0x478b62(0x946),_0x478b62(0xacf),'MAT',_0x478b62(0x41d),_0x478b62(0x637),_0x478b62(0x79d)],_0x28cd7c=_0xb90305[_0x478b62(0x3f2)],_0x395f17=_0xb90305[_0x478b62(0x46e)],_0x5b0fc6=_0xb90305[_0x478b62(0x536)],_0x181b5c=VisuMZ[_0x478b62(0x84a)](_0xb90305[_0x478b62(0x9e9)]);for(const _0x4ab360 of _0x181b5c){if(!_0x4ab360)continue;for(const _0x118889 of _0x28cd7c){const _0x590f70=_0x32fe74[_0x478b62(0xadc)](_0x118889[_0x478b62(0x8b6)]()['trim']());_0x590f70>=0x0&&_0x590f70<=0x7&&_0x4ab360['addBuff'](_0x590f70,_0x5b0fc6);}for(const _0x40dcb6 of _0x395f17){if(_0x478b62(0x574)===_0x478b62(0x574)){const _0x5b1513=_0x32fe74[_0x478b62(0xadc)](_0x40dcb6[_0x478b62(0x8b6)]()['trim']());if(_0x5b1513>=0x0&&_0x5b1513<=0x7){if(_0x478b62(0x421)!==_0x478b62(0x3a7))_0x4ab360['addDebuff'](_0x5b1513,_0x5b0fc6);else{if(this[_0x478b62(0x91b)]()[_0x478b62(0x83c)][_0x478b62(0x7f1)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x57b4a3[_0x478b62(0x6d2)][_0x478b62(0x301)]['call'](this);}}}else this[_0x478b62(0x4a5)]=this[_0x478b62(0x4f3)](this[_0x478b62(0x4a5)],this[_0x478b62(0x43d)],_0x305a77,_0x1eb6e2,_0x34640a);}}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],'ActSeq_Mechanics_AddState',_0xffb1f3=>{const _0x50c810=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x50c810(0x44a)](_0xffb1f3,_0xffb1f3);const _0x5e56f4=_0xffb1f3['States'],_0x353090=VisuMZ[_0x50c810(0x84a)](_0xffb1f3['Targets']);for(const _0x444a0f of _0x353090){if(!_0x444a0f)continue;for(const _0x42888f of _0x5e56f4){_0x444a0f[_0x50c810(0x45d)](_0x42888f);}}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0xb73),_0x20f095=>{const _0x44cc80=_0x1a0039;if(!SceneManager[_0x44cc80(0x984)]())return;VisuMZ[_0x44cc80(0x44a)](_0x20f095,_0x20f095);const _0xa21346=BattleManager[_0x44cc80(0x548)],_0x1f7565={'arPenRate':_0x20f095[_0x44cc80(0x8f2)],'arPenFlat':_0x20f095[_0x44cc80(0xb5b)],'arRedRate':_0x20f095[_0x44cc80(0x1e6)],'arRedFlat':_0x20f095['ArRedFlat']};_0xa21346['_armorPenetration']=_0x1f7565;}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_Mechanics_AnalyzeWeakness',_0x240452=>{const _0x48fc66=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x48fc66(0x23f)])return;VisuMZ[_0x48fc66(0x44a)](_0x240452,_0x240452);const _0x36be81=VisuMZ['CreateActionSequenceTargets'](_0x240452['Targets']),_0x443e9f=_0x240452['Reveal']||0x1;for(const _0x2564bd of _0x36be81){if(_0x48fc66(0x6c1)===_0x48fc66(0x6c1)){if(!_0x2564bd)continue;if(!_0x2564bd[_0x48fc66(0x795)]())continue;_0x2564bd['revealNewWeaknesses'](_0x443e9f);}else{let _0x43d448=_0x19eb63(_0x1803ab['$1']);while(_0x43d448--){_0xbfebb6[_0x48fc66(0xb15)](this[_0x48fc66(0xbdf)]()[_0x48fc66(0x4d9)]());}return this[_0x48fc66(0x963)](_0x2b0bb6);}}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x983),_0x39f832=>{const _0x232e41=_0x1a0039;if(!SceneManager[_0x232e41(0x984)]())return;if(!Imported[_0x232e41(0x162)])return;if(!BattleManager[_0x232e41(0x363)]())return;VisuMZ[_0x232e41(0x44a)](_0x39f832,_0x39f832);const _0x391a21=VisuMZ[_0x232e41(0x84a)](_0x39f832[_0x232e41(0x9e9)]),_0x584cb7=_0x39f832[_0x232e41(0x763)],_0x2177a8=_0x39f832[_0x232e41(0x763)],_0x8f4364=_0x39f832['Interrupt'];for(const _0x575811 of _0x391a21){if(_0x232e41(0x7f9)==='Eqyrk'){if(!_0x44a059[_0x232e41(0x984)]())return;const _0x235303=_0x1141bc[_0x232e41(0x572)]();if(!_0x235303)return;_0x235303[_0x232e41(0x295)](_0x232e41(0xa40));}else{if(!_0x575811)continue;if(_0x575811[_0x232e41(0x956)]())_0x575811['changeAtbChargeTime'](_0x584cb7);else{if(_0x575811[_0x232e41(0xb3d)]()){if(_0x232e41(0x6a2)!=='cibgS'){_0x575811[_0x232e41(0xb99)](_0x2177a8);if(_0x8f4364)_0x575811[_0x232e41(0x260)]();}else{const _0x5bf3e9=_0x9a745c[_0x232e41(0x355)]()[_0x341cf7],_0x45f7f6=new _0x1abe61();_0x45f7f6['moveToStartPositionBattleCore'](_0x5bf3e9),_0x45f7f6[_0x232e41(0x39a)](_0x5bf3e9),_0x45f7f6[_0x232e41(0x9fc)](),this[_0x232e41(0x1f9)][_0x232e41(0xb15)](_0x45f7f6),this[_0x232e41(0x854)][_0x232e41(0xb20)](_0x45f7f6);}}}}}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Mechanics_BoostPointsChange',_0x50254d=>{const _0x10545e=_0x1a0039;if(!SceneManager[_0x10545e(0x984)]())return;if(!Imported[_0x10545e(0x92c)])return;VisuMZ[_0x10545e(0x44a)](_0x50254d,_0x50254d);const _0xd2a0a7=VisuMZ['CreateActionSequenceTargets'](_0x50254d['Targets']),_0x47faf4=_0x50254d[_0x10545e(0xaca)];for(const _0x42d753 of _0xd2a0a7){if(!_0x42d753)continue;_0x42d753[_0x10545e(0x521)](_0x47faf4);}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Mechanics_BoostPointsStoreData',_0x4c3d17=>{const _0x5f11ab=_0x1a0039;if(!SceneManager[_0x5f11ab(0x984)]())return;if(!Imported[_0x5f11ab(0x92c)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x5f11ab(0x44a)](_0x4c3d17,_0x4c3d17);const _0x230deb=_0x4c3d17[_0x5f11ab(0xbb4)];$gameVariables[_0x5f11ab(0x4e0)](_0x230deb,BattleManager[_0x5f11ab(0xac9)]['toUseBoostPoints']());}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x78d),_0x33c01e=>{const _0x1b7b28=_0x1a0039;if(!SceneManager[_0x1b7b28(0x984)]())return;if(!Imported[_0x1b7b28(0x840)])return;VisuMZ['ConvertParams'](_0x33c01e,_0x33c01e);const _0x504544=VisuMZ['CreateActionSequenceTargets'](_0x33c01e['Targets']),_0x375610=_0x33c01e[_0x1b7b28(0x7b3)];for(const _0x7079be of _0x504544){if(_0x1b7b28(0xaa0)!==_0x1b7b28(0xaa0))_0x4faaf8[_0x1b7b28(0xa1e)][_0x1b7b28(0xb9a)][_0x1b7b28(0xb33)](this),this['opacity']=this[_0x1b7b28(0x2d6)]>0x0?0xff:0x0;else{if(!_0x7079be)continue;if(_0x7079be[_0x1b7b28(0x1fa)]())continue;if(!_0x7079be[_0x1b7b28(0x7fa)]())continue;_0x7079be['alterBreakShield'](_0x375610);}}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0xa4a),_0x48a507=>{const _0x180ff7=_0x1a0039;if(!SceneManager[_0x180ff7(0x984)]())return;if(!Imported[_0x180ff7(0x840)])return;VisuMZ[_0x180ff7(0x44a)](_0x48a507,_0x48a507);const _0x4ed8ea=VisuMZ['CreateActionSequenceTargets'](_0x48a507[_0x180ff7(0x9e9)]);for(const _0x18954a of _0x4ed8ea){if(_0x180ff7(0x4d1)==='olbcQ'){if(!_0x58f040[_0x180ff7(0x984)]())return;_0x36c103['ConvertParams'](_0x27d4fe,_0x1482ed);const _0x91edbe=_0x3abd3d[_0x180ff7(0x572)](),_0x5629e6=_0x58de54[_0x180ff7(0x548)],_0x44f6c8=_0x5a9170['_subject'],_0x2d203f=_0x3467a1[_0x180ff7(0x1a8)]?_0x2f1ed4[_0x180ff7(0x1a8)][_0x180ff7(0x130)](0x0):[],_0x197d52=_0xeffb69[_0x180ff7(0xa33)];if(!_0x91edbe||!_0x5629e6||!_0x44f6c8)return;if(!_0x5629e6[_0x180ff7(0x19a)]())return;if(_0x338528['DisplayAction'])_0x197d52[_0x180ff7(0x98a)](_0x44f6c8,_0x5629e6[_0x180ff7(0x19a)]());_0x231a3e[_0x180ff7(0x453)]&&_0x197d52[_0x180ff7(0xb15)](_0x180ff7(0x7b7),_0x44f6c8,_0x2d203f,!![]);if(_0x11c3a2['ActionStart'])_0x197d52[_0x180ff7(0xb15)](_0x180ff7(0x2fa),_0x44f6c8,_0x5629e6);if(_0x1a3f29[_0x180ff7(0x20d)])_0x197d52[_0x180ff7(0xb15)](_0x180ff7(0x449));if(_0x427977[_0x180ff7(0x476)])_0x197d52[_0x180ff7(0xb15)](_0x180ff7(0x495),_0x44f6c8,_0x5629e6);if(_0x5c86a2['WaitForAnimation'])_0x197d52[_0x180ff7(0xb15)](_0x180ff7(0x286));_0x91edbe[_0x180ff7(0x295)](_0x180ff7(0x28f));}else{if(!_0x18954a)continue;if(_0x18954a[_0x180ff7(0x1fa)]())continue;if(!_0x18954a[_0x180ff7(0x7fa)]())continue;_0x18954a[_0x180ff7(0x66f)]();}}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x462),_0x567fdf=>{const _0x5b37b4=_0x1a0039;if(!SceneManager[_0x5b37b4(0x984)]())return;if(!Imported[_0x5b37b4(0xad2)])return;if(!BattleManager[_0x5b37b4(0x892)]())return;VisuMZ[_0x5b37b4(0x44a)](_0x567fdf,_0x567fdf);const _0x3a8a11=VisuMZ[_0x5b37b4(0x84a)](_0x567fdf[_0x5b37b4(0x9e9)]),_0x3ffb60=_0x567fdf[_0x5b37b4(0x686)];for(const _0x9db458 of _0x3a8a11){if(!_0x9db458)continue;_0x9db458[_0x5b37b4(0x26b)](_0x3ffb60);}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x2c8),_0x556ea9=>{const _0x2bd0fe=_0x1a0039;if(!SceneManager[_0x2bd0fe(0x984)]())return;VisuMZ[_0x2bd0fe(0x44a)](_0x556ea9,_0x556ea9);const _0x1de23b=$gameTemp[_0x2bd0fe(0x572)](),_0x53db36=BattleManager['_action'],_0x7aa887=BattleManager['_subject'];if(!_0x1de23b||!_0x53db36||!_0x7aa887)return;if(!_0x53db36[_0x2bd0fe(0x19a)]())return;const _0x15428d=VisuMZ[_0x2bd0fe(0x84a)](_0x556ea9[_0x2bd0fe(0x9e9)]);for(const _0x56e609 of _0x15428d){if(!_0x56e609)continue;_0x556ea9['ForceDeath']&&(_0x56e609[_0x2bd0fe(0x2b0)](),_0x56e609[_0x2bd0fe(0x45d)](_0x56e609[_0x2bd0fe(0xb02)]())),_0x56e609['isDeathStateAffected']()&&(_0x2bd0fe(0x974)===_0x2bd0fe(0x2dc)?_0x49112d=_0x1b62d0(_0x520e90['$1']):_0x56e609[_0x2bd0fe(0x4a6)]());}_0x1de23b[_0x2bd0fe(0x295)]('battleEffect');}),PluginManager['registerCommand'](pluginData['name'],_0x1a0039(0x82d),_0x264166=>{const _0x44717b=_0x1a0039;if(!SceneManager[_0x44717b(0x984)]())return;if(!Imported[_0x44717b(0x81c)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x44717b(0x44a)](_0x264166,_0x264166);const _0x381b4c=VisuMZ[_0x44717b(0x84a)](_0x264166[_0x44717b(0x9e9)]),_0x1a1447=_0x264166['ChangeOrderBy'];for(const _0x2d987f of _0x381b4c){if(_0x44717b(0x8b8)!==_0x44717b(0x8c6)){if(!_0x2d987f)continue;_0x2d987f['changeTurnOrderByCTB'](_0x1a1447);}else _0x2a1a12[_0x44717b(0x28b)]&&_0x501096[_0x44717b(0x28b)]();}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0xa99),_0x5605b2=>{const _0x1fb1b6=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x1fb1b6(0xb64)]())return;VisuMZ[_0x1fb1b6(0x44a)](_0x5605b2,_0x5605b2);const _0x5c35bf=VisuMZ[_0x1fb1b6(0x84a)](_0x5605b2['Targets']),_0x239a5e=_0x5605b2[_0x1fb1b6(0x763)],_0x1dd4e2=_0x5605b2['ChargeRate'];for(const _0x2c41d6 of _0x5c35bf){if(_0x1fb1b6(0x3e8)!==_0x1fb1b6(0x3e8)){if(!_0x92b1a1['isSceneBattle']())return;const _0x1e5508=_0x2cb184[_0x1fb1b6(0x784)][_0x1fb1b6(0xa98)];if(_0x1e5508)_0x1e5508[_0x1fb1b6(0xa51)]();}else{if(!_0x2c41d6)continue;if(_0x2c41d6['_tpbState']===_0x1fb1b6(0x33f))_0x2c41d6[_0x1fb1b6(0x26f)](_0x239a5e);else _0x2c41d6[_0x1fb1b6(0x9fe)]===_0x1fb1b6(0x141)&&_0x2c41d6[_0x1fb1b6(0xa5c)](_0x1dd4e2);}}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x2f5),_0x30f75d=>{const _0x1de2b6=_0x1a0039;if(!SceneManager[_0x1de2b6(0x984)]())return;VisuMZ[_0x1de2b6(0x44a)](_0x30f75d,_0x30f75d);const _0x1a285c=BattleManager[_0x1de2b6(0x548)];if(!_0x1a285c)return;let _0x52626a=_0x30f75d[_0x1de2b6(0x22e)];_0x1a285c[_0x1de2b6(0x291)](_0x52626a);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x688),_0x2c9b04=>{const _0x5ad52c=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2c9b04,_0x2c9b04);const _0x520763=VisuMZ[_0x5ad52c(0x84a)](_0x2c9b04[_0x5ad52c(0x9e9)]);for(const _0x5c9296 of _0x520763){if(!_0x5c9296)continue;if(_0x5c9296[_0x5ad52c(0x1a1)]())_0x5c9296['startDamagePopup']();}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0xb3c),_0x3c77de=>{const _0x1c0480=_0x1a0039;if(!SceneManager[_0x1c0480(0x984)]())return;VisuMZ['ConvertParams'](_0x3c77de,_0x3c77de);const _0x41b850=$gameTemp[_0x1c0480(0x572)](),_0x4b0e54=BattleManager[_0x1c0480(0xac9)],_0x3bec9f=_0x3c77de[_0x1c0480(0x5a9)];if(!_0x41b850)return;if(!_0x4b0e54)return;_0x4b0e54&&_0x4b0e54[_0x1c0480(0x93b)]()&&_0x3bec9f[_0x1c0480(0x8b6)]()[_0x1c0480(0x850)]()!=='UNTITLED'&&_0x41b850[_0x1c0480(0x131)]([_0x3bec9f]);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x877),_0x57df68=>{const _0x368ed7=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x368ed7(0x44a)](_0x57df68,_0x57df68);const _0x18b71d=VisuMZ['CreateActionSequenceTargets'](_0x57df68[_0x368ed7(0x9e9)]);for(const _0x3029a2 of _0x18b71d){if('lFagN'==='lFagN'){if(!_0x3029a2)continue;if(!_0x3029a2[_0x368ed7(0x795)]())continue;_0x3029a2['escape']();}else this[_0x368ed7(0xbeb)]=new _0x5e595a(),_0x5b3398[_0x368ed7(0x6a7)]?this[_0x368ed7(0xb20)](this['_uiContainer']):this[_0x368ed7(0xaac)][_0x368ed7(0xb20)](this['_uiContainer']),_0x28a7fb[_0x368ed7(0x784)]['_uiContainer']=this[_0x368ed7(0xbeb)];}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x90b),_0x5583ea=>{const _0x4f0adf=_0x1a0039;if(!SceneManager[_0x4f0adf(0x984)]())return;if(!Imported[_0x4f0adf(0x302)])return;if(!BattleManager[_0x4f0adf(0x88a)]())return;VisuMZ[_0x4f0adf(0x44a)](_0x5583ea,_0x5583ea);const _0xd31780=_0x5583ea[_0x4f0adf(0xa4b)];if(BattleManager['_subject']){if('CERWz'!==_0x4f0adf(0xb6d))BattleManager[_0x4f0adf(0xac9)][_0x4f0adf(0x377)]()[_0x4f0adf(0xab2)](_0xd31780);else{const _0x53896d=_0x3e03d0[_0x4f0adf(0x19a)]();this[_0x4f0adf(0x266)](_0x4531fc,_0x215a9a,_0x424509),this[_0x4f0adf(0x4a2)](_0x1b5151,_0x2c69ef,_0x5e9aa8),this[_0x4f0adf(0x3ac)](_0x55e94f,_0x442406,_0x960636);}}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x18e),_0x101a49=>{const _0x182b73=_0x1a0039;if(!SceneManager[_0x182b73(0x984)]())return;if(!Imported[_0x182b73(0xa38)])return;if(!BattleManager[_0x182b73(0x61b)]())return;VisuMZ[_0x182b73(0x44a)](_0x101a49,_0x101a49);const _0x3b0cf1=_0x101a49[_0x182b73(0xa4b)];BattleManager['_subject']&&BattleManager['_subject'][_0x182b73(0x377)]()[_0x182b73(0x811)](_0x3b0cf1);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x1b7),_0x102850=>{const _0x3b7adf=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b7adf(0x44a)](_0x102850,_0x102850);const _0x37b460=VisuMZ[_0x3b7adf(0x84a)](_0x102850[_0x3b7adf(0x9e9)]),_0x46c157=_0x102850[_0x3b7adf(0x457)],_0x1b2775=_0x102850[_0x3b7adf(0xb19)],_0x4d83fb=_0x102850['MP_Rate'],_0x1671a9=_0x102850[_0x3b7adf(0x278)],_0x359b7d=_0x102850[_0x3b7adf(0x5a2)],_0x25e01f=_0x102850[_0x3b7adf(0x68e)],_0x5bf7cd=_0x102850[_0x3b7adf(0x276)];for(const _0x2baa4d of _0x37b460){if('rOGZB'!==_0x3b7adf(0x3e7)){if(!_0x2baa4d)continue;const _0x5ee07a=_0x2baa4d[_0x3b7adf(0x140)](),_0xfc035=Math[_0x3b7adf(0x917)](_0x46c157*_0x2baa4d[_0x3b7adf(0x340)]+_0x1b2775),_0x53007a=Math[_0x3b7adf(0x917)](_0x4d83fb*_0x2baa4d[_0x3b7adf(0x738)]+_0x1671a9),_0x379519=Math['round'](_0x359b7d*_0x2baa4d[_0x3b7adf(0xa7f)]()+_0x25e01f);if(_0xfc035!==0x0)_0x2baa4d[_0x3b7adf(0xbe3)](_0xfc035);if(_0x53007a!==0x0)_0x2baa4d['gainMp'](_0x53007a);if(_0x379519!==0x0)_0x2baa4d['gainTp'](_0x379519);if(_0x5bf7cd)_0x2baa4d[_0x3b7adf(0x2da)]();_0x5ee07a&&_0x2baa4d[_0x3b7adf(0x93b)]()&&_0x2baa4d[_0x3b7adf(0x4a6)]();}else this[_0x3b7adf(0x853)]=_0xfb637f,this['_angleRevertOnFinish']&&(this[_0x3b7adf(0x5d5)]=0x0,this['_currentAngle']=0x0);}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Mechanics_Immortal',_0x293c09=>{const _0x5eab2d=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5eab2d(0x44a)](_0x293c09,_0x293c09);const _0x233a18=VisuMZ[_0x5eab2d(0x84a)](_0x293c09['Targets']);for(const _0x4f69f3 of _0x233a18){if('rZgOB'!==_0x5eab2d(0x4a0)){if(!_0x4f69f3)continue;_0x4f69f3['setImmortal'](_0x293c09[_0x5eab2d(0x3f3)]);}else this[_0x5eab2d(0x564)]-=0x10;}}),PluginManager['registerCommand'](pluginData['name'],_0x1a0039(0x802),_0x3232b6=>{const _0x18b2b2=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x18b2b2(0x44a)](_0x3232b6,_0x3232b6);const _0x3932c4=BattleManager[_0x18b2b2(0x548)],_0x280380={'criticalHitRate':_0x3232b6[_0x18b2b2(0xb32)],'criticalHitFlat':_0x3232b6[_0x18b2b2(0x3ab)],'criticalDmgRate':_0x3232b6[_0x18b2b2(0x161)],'criticalDmgFlat':_0x3232b6[_0x18b2b2(0x7ec)],'damageRate':_0x3232b6['DamageRate'],'damageFlat':_0x3232b6['DamageFlat'],'hitRate':_0x3232b6[_0x18b2b2(0x23d)],'hitFlat':_0x3232b6['HitFlat']};_0x3932c4[_0x18b2b2(0x64d)]=_0x280380;}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x554),_0x57022a=>{const _0x5195b0=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5195b0(0x44a)](_0x57022a,_0x57022a);const _0x35b082=_0x57022a[_0x5195b0(0x9d3)];SceneManager[_0x5195b0(0x784)][_0x5195b0(0x3fe)](_0x35b082);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x517),_0x1343ad=>{const _0x59020f=_0x1a0039;if(!SceneManager[_0x59020f(0x984)]())return;if(!Imported[_0x59020f(0x1cf)])return;if(!BattleManager[_0x59020f(0x56c)]())return;VisuMZ['ConvertParams'](_0x1343ad,_0x1343ad);const _0x43d6e9=VisuMZ[_0x59020f(0x84a)](_0x1343ad[_0x59020f(0x9e9)]);for(const _0x418a9c of _0x43d6e9){if(!_0x418a9c)continue;let _0x2b4964=_0x1343ad[_0x59020f(0x6e5)],_0x59d262=_0x1343ad['NextTurn'],_0x1ea5ce=_0x1343ad[_0x59020f(0x6f7)];if(BattleManager[_0x59020f(0x12c)]['includes'](_0x418a9c))_0x2b4964+=_0x1ea5ce;else{if(_0x59020f(0x930)==='NNCwv')_0x59d262+=_0x1ea5ce;else return!![];}BattleManager[_0x59020f(0x66a)](_0x418a9c,-_0x2b4964,![]),BattleManager['turnOrderChangeOTB'](_0x418a9c,-_0x59d262,!![]);}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_Mechanics_PtbAlterCost',_0x101b04=>{const _0x33eeef=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x33eeef(0x3b5)])return;if(!BattleManager[_0x33eeef(0x635)]())return;VisuMZ[_0x33eeef(0x44a)](_0x101b04,_0x101b04);const _0xd6df8a=BattleManager[_0x33eeef(0xac9)]['friendsUnit'](),_0x418d9d=_0x101b04[_0x33eeef(0x157)],_0x14aa5e=_0x101b04[_0x33eeef(0xbd5)]||_0x33eeef(0x7ff),_0x17ca72=_0x101b04[_0x33eeef(0x167)]||'unchanged',_0x10ccbd=_0x101b04[_0x33eeef(0x675)]||0x0,_0x3ccd41=_0x101b04[_0x33eeef(0x309)]||0x0;(_0xd6df8a[_0x33eeef(0xaab)]()||_0x418d9d)&&(_0x418d9d&&(_0x33eeef(0x37d)===_0x33eeef(0x37d)?(_0xd6df8a[_0x33eeef(0x25e)]=_0xd6df8a[_0x33eeef(0x25e)]||{},_0xd6df8a[_0x33eeef(0x25e)][_0x33eeef(0xb93)]=0x0):_0x57d7aa=(_0x282117+_0x301195)/0x2),_0xd6df8a[_0x33eeef(0xa5b)](_0x14aa5e,_0x17ca72,_0x10ccbd,_0x3ccd41));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x824),_0x65cdf2=>{const _0x20ca0c=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x20ca0c(0x635)]())return;VisuMZ[_0x20ca0c(0x44a)](_0x65cdf2,_0x65cdf2);const _0x25e76b=BattleManager[_0x20ca0c(0xac9)]['friendsUnit']();let _0x2a4630=Math[_0x20ca0c(0x8ae)](_0x65cdf2[_0x20ca0c(0x77f)],0x0),_0x111731=_0x25e76b[_0x20ca0c(0x74a)](),_0x4371e5=_0x25e76b[_0x20ca0c(0x44e)]();while(_0x2a4630--){if(_0x111731<=0x0&&_0x4371e5<=0x0)break;else{if(_0x111731>0x0)_0x111731--,_0x4371e5++;else{if(_0x20ca0c(0x2ce)!==_0x20ca0c(0x791))_0x4371e5--;else return this['customDamageFormula'](_0x585e41);}}}_0x25e76b[_0x20ca0c(0x906)](_0x111731),_0x25e76b[_0x20ca0c(0xa57)](_0x4371e5);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x77a),_0x209ab9=>{const _0x89a169=_0x1a0039;if(!SceneManager[_0x89a169(0x984)]())return;if(!Imported[_0x89a169(0x3b5)])return;if(!BattleManager[_0x89a169(0x635)]())return;VisuMZ[_0x89a169(0x44a)](_0x209ab9,_0x209ab9);const _0x4c2244=BattleManager[_0x89a169(0xac9)][_0x89a169(0x377)]();let _0x5924fe=_0x209ab9[_0x89a169(0x500)],_0xc07c12=_0x209ab9[_0x89a169(0x918)];_0x4c2244[_0x89a169(0x67d)](_0x5924fe),_0x4c2244[_0x89a169(0x461)](_0xc07c12);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x7b4),_0x25d43d=>{const _0x448bd2=_0x1a0039;if(!SceneManager[_0x448bd2(0x984)]())return;VisuMZ[_0x448bd2(0x44a)](_0x25d43d,_0x25d43d);const _0x2e4013=['MAXHP',_0x448bd2(0xb36),'ATK',_0x448bd2(0xacf),_0x448bd2(0x975),'MDF',_0x448bd2(0x637),_0x448bd2(0x79d)],_0x2b3cf4=_0x25d43d[_0x448bd2(0x3f2)],_0x437ac7=_0x25d43d['Debuffs'],_0x36a929=VisuMZ[_0x448bd2(0x84a)](_0x25d43d[_0x448bd2(0x9e9)]);for(const _0x3f9ccd of _0x36a929){if(!_0x3f9ccd)continue;for(const _0x393a0d of _0x2b3cf4){const _0xb9f064=_0x2e4013[_0x448bd2(0xadc)](_0x393a0d['toUpperCase']()[_0x448bd2(0x850)]());if(_0xb9f064>=0x0&&_0xb9f064<=0x7&&_0x3f9ccd['isBuffAffected'](_0xb9f064)){if('xiGjo'===_0x448bd2(0x4d0))_0x3f9ccd[_0x448bd2(0x3cb)](_0xb9f064);else{const _0xee902e=_0x5e08f9[_0x448bd2(0x83c)];if(_0xee902e['match'](_0x58bce1[_0x448bd2(0xa1e)][_0x448bd2(0x706)][_0x3289f6])){const _0x1b8052=_0x2eaae0['$1'],_0x37615b='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x448bd2(0x4a8)](_0x1b8052),_0xca549d=_0x5ae206[_0x448bd2(0xa1e)][_0x448bd2(0x322)](_0x2b9d30,_0x42c12e);_0x1ac028['BattleCore']['JS'][_0xca549d]=new _0xe5645e(_0x37615b);}}}}for(const _0x379cbf of _0x437ac7){const _0x366008=_0x2e4013['indexOf'](_0x379cbf[_0x448bd2(0x8b6)]()[_0x448bd2(0x850)]());_0x366008>=0x0&&_0x366008<=0x7&&_0x3f9ccd[_0x448bd2(0x7a0)](_0x366008)&&_0x3f9ccd[_0x448bd2(0x3cb)](_0x366008);}}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0xa67),_0x22adaf=>{const _0x53e12c=_0x1a0039;if(!SceneManager[_0x53e12c(0x984)]())return;VisuMZ[_0x53e12c(0x44a)](_0x22adaf,_0x22adaf);const _0x53d6ba=_0x22adaf['States'],_0x45d5d2=VisuMZ[_0x53e12c(0x84a)](_0x22adaf[_0x53e12c(0x9e9)]);for(const _0x3e2c3b of _0x45d5d2){if(_0x53e12c(0xbc7)!==_0x53e12c(0x426)){if(!_0x3e2c3b)continue;for(const _0x1bad5e of _0x53d6ba){_0x3e2c3b[_0x53e12c(0x9b6)](_0x1bad5e);}}else this[_0x53e12c(0xa1c)][_0x53e12c(0x3bc)]=_0x9cf5cc[_0x53e12c(0x5fd)](_0x1949f4),this['_mainSprite']['bitmap'][_0x53e12c(0x870)](this[_0x53e12c(0x29e)][_0x53e12c(0x940)](this));}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x826),_0x3635e9=>{const _0x56cba8=_0x1a0039;if(!SceneManager[_0x56cba8(0x984)]())return;if(!Imported[_0x56cba8(0x2bf)])return;if(!BattleManager[_0x56cba8(0x1b6)]())return;VisuMZ[_0x56cba8(0x44a)](_0x3635e9,_0x3635e9);const _0x377bb4=_0x3635e9[_0x56cba8(0x36b)],_0x538448=VisuMZ[_0x56cba8(0x84a)](_0x3635e9['Targets']),_0x5aacfe=_0x3635e9[_0x56cba8(0x842)],_0x4ebfcb=_0x3635e9[_0x56cba8(0x1ec)],_0x2c808e=_0x3635e9[_0x56cba8(0xb1f)],_0x388ebf=BattleManager['_action'];if(_0x377bb4){if(_0x56cba8(0x21f)===_0x56cba8(0x21f))for(const _0x5bd359 of _0x538448){if(_0x56cba8(0xb50)!==_0x56cba8(0xb50)){const _0x5c242f=_0x25a47d[_0x56cba8(0xa1e)][_0x56cba8(0x4ce)][_0x56cba8(0x687)];_0x5c242f[_0x56cba8(0x836)]?this[_0x56cba8(0x370)]=_0x29f98b[_0x56cba8(0x6de)](_0x5c242f[_0x56cba8(0x836)]):_0x50f2c4[_0x56cba8(0x6d2)][_0x56cba8(0x1cb)][_0x56cba8(0xb33)](this);}else{if(!_0x5bd359)continue;if(_0x5bd359===user)continue;if(_0x5aacfe)_0x5bd359[_0x56cba8(0xb5d)](![]);_0x5bd359[_0x56cba8(0x28a)](BattleManager[_0x56cba8(0xac9)],_0x388ebf);}}else this[_0x56cba8(0xa04)]=new _0x37b317(),this[_0x56cba8(0xa04)]['anchor']['x']=0.5,this['_distortionSprite'][_0x56cba8(0x29d)]['y']=0.5,this[_0x56cba8(0xb20)](this[_0x56cba8(0xa04)]);}if(_0x4ebfcb&&BattleManager[_0x56cba8(0xac9)]){if(_0x56cba8(0x6f9)!=='ePnTR'){const _0x548ec9=_0x304a3b['BattleCore'][_0x56cba8(0x199)][_0x42ee01],_0x125911={'code':0x2c,'dataId':_0x548ec9,'value1':0x1,'value2':0x0};_0x55a4a2['effects'][_0x56cba8(0xb15)](_0x125911);}else{if(_0x2c808e)BattleManager['_subject'][_0x56cba8(0xb5d)](![]);const _0x18209c=_0x538448[0x0];BattleManager['performSTBExploiter'](_0x18209c,_0x388ebf);}}}),PluginManager['registerCommand'](pluginData['name'],_0x1a0039(0xa9e),_0x25c1be=>{const _0x4ee3f1=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4ee3f1(0x2bf)])return;if(!BattleManager[_0x4ee3f1(0x1b6)]())return;VisuMZ[_0x4ee3f1(0x44a)](_0x25c1be,_0x25c1be);const _0x36138d=_0x25c1be[_0x4ee3f1(0x629)];BattleManager[_0x4ee3f1(0xac9)]&&BattleManager['_subject'][_0x4ee3f1(0x45c)](_0x36138d);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x5b1),_0x10ce6c=>{const _0x1477d3=_0x1a0039;if(!SceneManager[_0x1477d3(0x984)]())return;if(!Imported[_0x1477d3(0x2bf)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x1477d3(0x44a)](_0x10ce6c,_0x10ce6c);let _0x43cbf5=_0x10ce6c[_0x1477d3(0x629)];if(BattleManager[_0x1477d3(0xac9)]){if(_0x1477d3(0x968)!==_0x1477d3(0x77c)){BattleManager[_0x1477d3(0xac9)][_0x1477d3(0x5fa)]=BattleManager[_0x1477d3(0xac9)][_0x1477d3(0x5fa)]||[];while(_0x43cbf5--){if(BattleManager[_0x1477d3(0xac9)][_0x1477d3(0x5fa)][_0x1477d3(0x2c0)]<=0x0)break;BattleManager['_subject'][_0x1477d3(0x5fa)][_0x1477d3(0xbb9)]();}}else this[_0x1477d3(0x1b3)]['open'](),this['_skillWindow'][_0x1477d3(0x6f0)]&&this['_skillWindow']['show'](),this['_itemWindow'][_0x1477d3(0xb30)](),this[_0x1477d3(0x12b)][_0x1477d3(0x6f0)]&&this[_0x1477d3(0x12b)][_0x1477d3(0x65e)]();}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Mechanics_SwapWeapon',_0x58980d=>{const _0x632353=_0x1a0039;if(!SceneManager[_0x632353(0x984)]())return;if(!Imported[_0x632353(0xbbb)])return;VisuMZ[_0x632353(0x44a)](_0x58980d,_0x58980d);const _0x3eba4d=VisuMZ[_0x632353(0x84a)](_0x58980d['Targets']),_0x1b2c39=_0x58980d[_0x632353(0x22d)];for(const _0x5b3af of _0x3eba4d){if(!_0x5b3af)continue;if(!_0x5b3af[_0x632353(0x261)]())continue;_0x5b3af[_0x632353(0x751)](_0x1b2c39);}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x6b8),_0x402905=>{const _0x1d5a9e=_0x1a0039;if(!SceneManager[_0x1d5a9e(0x984)]())return;VisuMZ[_0x1d5a9e(0x44a)](_0x402905,_0x402905);const _0x449df9=VisuMZ[_0x1d5a9e(0x84a)](_0x402905[_0x1d5a9e(0x9e9)]),_0x2a6247=_0x402905[_0x1d5a9e(0x72b)],_0x36cb1a={'textColor':ColorManager[_0x1d5a9e(0x350)](_0x402905[_0x1d5a9e(0x29a)]),'flashColor':_0x402905[_0x1d5a9e(0x7de)],'flashDuration':_0x402905[_0x1d5a9e(0xa79)]};for(const _0x1ab92e of _0x449df9){if(!_0x1ab92e)continue;_0x1ab92e[_0x1d5a9e(0x440)](_0x2a6247,_0x36cb1a);}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x403),_0x48d995=>{const _0x2c55ef=_0x1a0039;if(!SceneManager[_0x2c55ef(0x984)]())return;VisuMZ[_0x2c55ef(0x44a)](_0x48d995,_0x48d995);const _0x1ebf60=VisuMZ['CreateActionSequenceTargets'](_0x48d995[_0x2c55ef(0x9e9)]);let _0x332d72=$gameVariables[_0x2c55ef(0xa71)](_0x48d995[_0x2c55ef(0x168)]);if(Imported[_0x2c55ef(0x212)]&&_0x48d995[_0x2c55ef(0xaff)]){if('WWsyo'===_0x2c55ef(0x6db))_0x332d72=VisuMZ[_0x2c55ef(0x84e)](_0x332d72);else{const _0x5bbbc8=_0xe689ec['BattleCore']['Settings'][_0x2c55ef(0x687)],_0x5e4ed2=_0x164d87[_0x2c55ef(0x625)]?0x4:0x3,_0x31141f=_0x5e4ed2*0x80+(_0x5e4ed2-0x1)*0x8+0x4,_0x5343eb=this[_0x2c55ef(0xbc6)](_0x3a6666),_0xf06e9=this[_0x2c55ef(0xa3a)](_0x1f82b5);let _0x295904=_0xf06e9['x']+this['padding'];_0x5bbbc8[_0x2c55ef(0x5d6)]?_0x295904=_0xf06e9['x']+_0x597a60[_0x2c55ef(0x365)]+0x8:_0x295904+=_0xfe701c[_0x2c55ef(0x87b)];const _0x418787=_0x5e8b52['round'](_0x479525[_0x2c55ef(0x409)](_0xf06e9['x']+_0xf06e9[_0x2c55ef(0x926)]-_0x31141f,_0x295904)),_0x327164=_0x6a7057[_0x2c55ef(0x917)](_0xf06e9['y']+(_0xf06e9[_0x2c55ef(0x84d)]-_0x109646['prototype'][_0x2c55ef(0x921)]())/0x2),_0x2eaee1=_0x388c18[_0x2c55ef(0x917)](_0x418787-_0x51137b[_0x2c55ef(0x87b)]/0x2-0x4),_0x1432a2=_0x1bc356[_0x2c55ef(0x917)](_0xf06e9['y']+(_0xf06e9[_0x2c55ef(0x84d)]-_0xed2f61[_0x2c55ef(0x923)])/0x2+_0x1c69c0['iconHeight']/0x2);let _0x55e9eb=_0x418787+0x88;const _0x509470=_0x327164;this[_0x2c55ef(0xaa7)](_0x5343eb,_0x418787-0x4+(_0x5bbbc8['TpbGaugeOffsetX']||0x0),_0x327164+(_0x5bbbc8[_0x2c55ef(0xb13)]||0x0)),this['placeActorName'](_0x5343eb,_0x418787+(_0x5bbbc8[_0x2c55ef(0x16e)]||0x0),_0x327164+(_0x5bbbc8[_0x2c55ef(0xa0c)]||0x0)),this[_0x2c55ef(0x9b7)](_0x5343eb,_0x2eaee1+(_0x5bbbc8['StateIconOffsetX']||0x0),_0x1432a2+(_0x5bbbc8[_0x2c55ef(0x273)]||0x0)),this[_0x2c55ef(0x5c4)](_0x5343eb,'hp',_0x55e9eb+0x88*0x0+(_0x5bbbc8[_0x2c55ef(0x507)]||0x0),_0x509470+(_0x5bbbc8['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x5343eb,'mp',_0x55e9eb+0x88*0x1+(_0x5bbbc8[_0x2c55ef(0x9de)]||0x0),_0x509470+(_0x5bbbc8[_0x2c55ef(0x9e2)]||0x0)),_0x4b9682[_0x2c55ef(0x625)]&&this[_0x2c55ef(0x5c4)](_0x5343eb,'tp',_0x55e9eb+0x88*0x2+(_0x5bbbc8[_0x2c55ef(0x646)]||0x0),_0x509470+(_0x5bbbc8[_0x2c55ef(0x715)]||0x0));}}const _0x136277=String(_0x332d72),_0x48b816={'textColor':ColorManager[_0x2c55ef(0x350)](_0x48d995[_0x2c55ef(0x29a)]),'flashColor':_0x48d995[_0x2c55ef(0x7de)],'flashDuration':_0x48d995[_0x2c55ef(0xa79)]};for(const _0x12f339 of _0x1ebf60){if(_0x2c55ef(0x4b5)===_0x2c55ef(0x4b5)){if(!_0x12f339)continue;_0x12f339[_0x2c55ef(0x440)](_0x136277,_0x48b816);}else{if(!_0x293e2f[_0x2c55ef(0x984)]())return;const _0x3dcd85=_0x394bd6[_0x2c55ef(0xa33)];_0x3dcd85[_0x2c55ef(0x5ef)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0x1a0039(0x81b),_0x177739=>{const _0x469694=_0x1a0039;if(!SceneManager[_0x469694(0x984)]())return;const _0x589911=$gameTemp[_0x469694(0x572)]();if(!_0x589911)return;_0x589911['setWaitMode'](_0x469694(0x44b));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x570),_0x4d8b0e=>{const _0x27e247=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x27e247(0x44a)](_0x4d8b0e,_0x4d8b0e);const _0xb21263=VisuMZ['CreateActionSequenceTargets'](_0x4d8b0e[_0x27e247(0x9e9)]);for(const _0x2380cf of _0xb21263){if(!_0x2380cf)continue;_0x2380cf['clearFreezeMotion']();}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_Motion_FreezeMotionFrame',_0x2d3894=>{const _0x39f6ed=_0x1a0039;if(!SceneManager[_0x39f6ed(0x984)]())return;VisuMZ[_0x39f6ed(0x44a)](_0x2d3894,_0x2d3894);const _0x57a42a=VisuMZ[_0x39f6ed(0x84a)](_0x2d3894[_0x39f6ed(0x9e9)]),_0x4d0478=_0x2d3894[_0x39f6ed(0x7db)][_0x39f6ed(0x6f5)]()[_0x39f6ed(0x850)]();let _0x496d5d=_0x2d3894[_0x39f6ed(0x9b0)];const _0x3bda52=_0x2d3894['Frame'];![_0x39f6ed(0xac3),_0x39f6ed(0x489),_0x39f6ed(0x736),'missile']['includes'](_0x4d0478)&&(_0x496d5d=![]);for(const _0x1496e3 of _0x57a42a){if('Misxl'===_0x39f6ed(0x335)){if(!_0x1496e3)continue;_0x1496e3[_0x39f6ed(0x56a)](_0x4d0478,_0x496d5d,_0x3bda52);}else _0x42ecdd['BattleCore'][_0x39f6ed(0x99e)][_0x39f6ed(0xb33)](this,_0x254194,_0x5e45d1),this[_0x39f6ed(0x15a)]();}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x464),_0x5f0fe4=>{const _0x15521e=_0x1a0039;if(!SceneManager[_0x15521e(0x984)]())return;VisuMZ[_0x15521e(0x44a)](_0x5f0fe4,_0x5f0fe4);const _0x40c4fa=VisuMZ['CreateActionSequenceTargets'](_0x5f0fe4[_0x15521e(0x9e9)]),_0x5992df=_0x5f0fe4[_0x15521e(0x7db)][_0x15521e(0x6f5)]()[_0x15521e(0x850)](),_0x2dcdbe=_0x5f0fe4[_0x15521e(0x9b0)];for(const _0x4a0f91 of _0x40c4fa){if(!_0x4a0f91)continue;if(_0x5992df[_0x15521e(0x7f1)](/ATTACK[ ](\d+)/i)){if(_0x15521e(0x6ab)==='Rqklq')_0x4a0f91[_0x15521e(0x458)](Number(RegExp['$1']));else return this[_0x15521e(0xa70)]()&&this[_0x15521e(0xa70)]()[_0x15521e(0x19a)]()&&this[_0x15521e(0xa70)]()['isMagical']();}else{if(_0x5992df==='attack'){if(_0x15521e(0xb18)===_0x15521e(0x24f)){this[_0x15521e(0x9ca)][_0x15521e(0x3c0)]=_0xaeadd5[_0x15521e(0x165)]();const _0x5213aa=_0x310e17[_0x15521e(0xbc6)]();if(_0x5213aa===this[_0x15521e(0x9ca)][_0x15521e(0xbc6)])return;this['_borderPortraitSprite'][_0x15521e(0xbc6)]=_0x5213aa||this[_0x15521e(0x9ca)][_0x15521e(0xbc6)];if(!_0x5213aa)return;else{if(_0x5213aa[_0x15521e(0x57c)]()===''){this[_0x15521e(0x9ca)][_0x15521e(0x3bc)]=_0x1ac577[_0x15521e(0x523)];return;}else{const _0x4791ce=_0x2e969f[_0x15521e(0x720)](_0x5213aa[_0x15521e(0x57c)]());_0x4791ce[_0x15521e(0x870)](this[_0x15521e(0x99b)][_0x15521e(0x940)](this,_0x4791ce));}}}else _0x4a0f91[_0x15521e(0x21c)]();}else _0x4a0f91['requestMotion'](_0x5992df);}if(!_0x2dcdbe)_0x4a0f91['startWeaponAnimation'](0x0);else{if(_0x2dcdbe&&['thrust','swing',_0x15521e(0x34b)][_0x15521e(0x604)](_0x5992df)){}}}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x56e),_0x44c6bc=>{const _0x97a217=_0x1a0039;if(!SceneManager[_0x97a217(0x984)]())return;VisuMZ['ConvertParams'](_0x44c6bc,_0x44c6bc);const _0x22e351=BattleManager['_action'];if(!_0x22e351)return;if(!_0x22e351['item']())return;const _0x3b2d37=VisuMZ[_0x97a217(0x84a)](_0x44c6bc['Targets']);for(const _0x1f544d of _0x3b2d37){if(!_0x1f544d)continue;_0x1f544d[_0x97a217(0x566)](_0x22e351);}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x7ce),_0x826b92=>{const _0xdabbb5=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xdabbb5(0x44a)](_0x826b92,_0x826b92);const _0x33e575=VisuMZ[_0xdabbb5(0x84a)](_0x826b92[_0xdabbb5(0x9e9)]);for(const _0x26824b of _0x33e575){if(_0xdabbb5(0x37b)===_0xdabbb5(0x37b)){if(!_0x26824b)continue;if(!_0x26824b[_0xdabbb5(0x68a)]())continue;_0x26824b[_0xdabbb5(0x68a)]()[_0xdabbb5(0x35c)]();}else{const _0x298ced=_0x48cbca[_0xdabbb5(0xa1e)]['Settings'][_0xdabbb5(0x814)];_0x298ced['LastSelected']?this[_0xdabbb5(0x829)]():this[_0xdabbb5(0xac1)]();}}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0xb2c),_0xaf2d1e=>{const _0x46e450=_0x1a0039;if(!SceneManager[_0x46e450(0x984)]())return;VisuMZ[_0x46e450(0x44a)](_0xaf2d1e,_0xaf2d1e);const _0x2627d1=$gameTemp[_0x46e450(0x572)](),_0x3ca982=_0xaf2d1e['MotionFrameWait']*Sprite_Battler[_0x46e450(0xa46)];_0x2627d1[_0x46e450(0x730)](_0x3ca982);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0xa50),_0x32e6dd=>{const _0x5e6f98=_0x1a0039;if(!SceneManager[_0x5e6f98(0x984)]())return;VisuMZ[_0x5e6f98(0x44a)](_0x32e6dd,_0x32e6dd);const _0x3e3c5c=$gameTemp[_0x5e6f98(0x572)](),_0x1e31e2=BattleManager[_0x5e6f98(0x548)];if(!_0x3e3c5c||!_0x1e31e2)return;if(!_0x1e31e2['item']())return;const _0x205fd0=VisuMZ[_0x5e6f98(0x84a)](_0x32e6dd['Targets']);for(const _0x49a9aa of _0x205fd0){if(!_0x49a9aa)continue;_0x49a9aa[_0x5e6f98(0x2fa)](_0x1e31e2);}if(_0x32e6dd[_0x5e6f98(0x20d)])_0x3e3c5c[_0x5e6f98(0x295)](_0x5e6f98(0x272));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],'ActSeq_Movement_HomeMoveBy',_0x4bea6f=>{const _0x84993d=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x4bea6f,_0x4bea6f);const _0x13d06c=$gameTemp[_0x84993d(0x572)](),_0x14bfdb=VisuMZ['CreateActionSequenceTargets'](_0x4bea6f[_0x84993d(0x9e9)]),_0x42514a=_0x4bea6f[_0x84993d(0x6fd)],_0x36214c=_0x4bea6f['DistanceX'],_0x568d42=_0x4bea6f[_0x84993d(0x6b9)],_0x5386c6=_0x4bea6f[_0x84993d(0xa62)],_0x1ba823=_0x4bea6f['FaceDirection'],_0x17ce7f=_0x4bea6f['EasingType'],_0x5ed8c0=_0x4bea6f[_0x84993d(0x7db)],_0x48f189=_0x4bea6f[_0x84993d(0x20d)];if(!_0x13d06c)return;for(const _0x3f3bcf of _0x14bfdb){if(_0x84993d(0x483)===_0x84993d(0x483)){if(!_0x3f3bcf)continue;let _0x49dbbe=_0x36214c,_0x54df9a=_0x568d42;if(_0x42514a[_0x84993d(0x7f1)](/horz/i))_0x49dbbe*=_0x3f3bcf[_0x84993d(0x261)]()?-0x1:0x1;if(_0x42514a[_0x84993d(0x7f1)](/vert/i))_0x54df9a*=_0x3f3bcf['isActor']()?-0x1:0x1;_0x3f3bcf['moveBattlerHomeDistance'](_0x49dbbe,_0x54df9a,_0x5386c6,_0x1ba823,_0x17ce7f),_0x3f3bcf[_0x84993d(0x496)](_0x5ed8c0);}else this[_0x84993d(0xb20)](this[_0x84993d(0xbeb)]);}if(_0x48f189)_0x13d06c['setWaitMode']('battleMove');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0xa61),_0x1d5126=>{const _0x249266=_0x1a0039;if(!SceneManager[_0x249266(0x984)]())return;if(!$gameSystem[_0x249266(0x969)]())return;VisuMZ['ConvertParams'](_0x1d5126,_0x1d5126);const _0x2cef8c=$gameTemp[_0x249266(0x572)](),_0x730a3e=VisuMZ[_0x249266(0x84a)](_0x1d5126[_0x249266(0x9e9)]),_0x536aaf=_0x1d5126['Destination'],_0x24683f=_0x1d5126[_0x249266(0x962)],_0x5f5598=_0x1d5126['OffsetX'],_0xd8b4c7=_0x1d5126[_0x249266(0x5f2)],_0x59491b=_0x1d5126[_0x249266(0xa62)],_0x10d195=_0x1d5126['FaceDirection'],_0x3d794e=_0x1d5126['EasingType'],_0x20cf1d=_0x1d5126['MotionType'],_0x2be985=_0x1d5126[_0x249266(0x20d)];if(!_0x2cef8c)return;for(const _0x31cf39 of _0x730a3e){if(!_0x31cf39)continue;let _0x35dc9f=_0x31cf39[_0x249266(0x68a)]()[_0x249266(0x1d4)],_0x4337be=_0x31cf39[_0x249266(0x68a)]()['_baseY'];if(_0x536aaf[_0x249266(0x7f1)](/home/i))_0x35dc9f=_0x31cf39[_0x249266(0x68a)]()['_homeX'],_0x4337be=_0x31cf39['battler']()[_0x249266(0xab6)];else{if(_0x536aaf[_0x249266(0x7f1)](/center/i))_0x35dc9f=Graphics['boxWidth']/0x2,_0x4337be=Graphics[_0x249266(0x7b0)]/0x2;else _0x536aaf['match'](/point (\d+), (\d+)/i)&&(_0x35dc9f=Number(RegExp['$1']),_0x4337be=Number(RegExp['$2']));}if(_0x24683f[_0x249266(0x7f1)](/none/i))_0x249266(0xa8a)==='sjLLp'?(_0x35dc9f+=_0x5f5598,_0x4337be+=_0xd8b4c7):this['x']=_0x5b0c69['boxWidth']-this[_0x249266(0x91b)]()[_0x249266(0x68a)]()['_baseX'];else{if(_0x24683f[_0x249266(0x7f1)](/horz/i)&&_0x24683f[_0x249266(0x7f1)](/vert/i))'iIYVm'!==_0x249266(0x42b)?_0x1e8f5e=_0x5b9426:(_0x35dc9f+=_0x31cf39[_0x249266(0x261)]()?-_0x5f5598:_0x5f5598,_0x4337be+=_0x31cf39['isActor']()?-_0xd8b4c7:_0xd8b4c7);else{if(_0x24683f[_0x249266(0x7f1)](/horz/i))_0x35dc9f+=_0x31cf39[_0x249266(0x261)]()?-_0x5f5598:_0x5f5598,_0x4337be+=_0xd8b4c7;else{if(_0x24683f[_0x249266(0x7f1)](/vert/i)){if(_0x249266(0x1f8)===_0x249266(0x94c)){const _0x13f0a3=this[_0x249266(0x91c)];this[_0x249266(0x3f5)][_0x249266(0x56d)](_0x13f0a3,_0x13f0a3),this[_0x249266(0x3f5)]['x']=_0x13f0a3-this[_0x249266(0x7c0)]['x'],this['_cursorArea']['y']=_0x13f0a3-this[_0x249266(0x7c0)]['y'],this['innerWidth']>0x0&&this[_0x249266(0x639)]>0x0?this[_0x249266(0x3f5)][_0x249266(0x3c0)]=this[_0x249266(0x2e6)]():this['_cursorArea']['visible']=![];}else _0x35dc9f+=_0x5f5598,_0x4337be+=_0x31cf39[_0x249266(0x261)]()?-_0xd8b4c7:_0xd8b4c7;}}}}_0x31cf39[_0x249266(0x60b)](_0x35dc9f,_0x4337be,_0x59491b,_0x10d195,_0x3d794e,-0x1),_0x31cf39[_0x249266(0x496)](_0x20cf1d);}if(_0x2be985)_0x2cef8c[_0x249266(0x295)](_0x249266(0x272));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x240),_0x5172c5=>{const _0x1afedd=_0x1a0039;if(!SceneManager[_0x1afedd(0x984)]())return;if(!$gameSystem[_0x1afedd(0x969)]())return;VisuMZ[_0x1afedd(0x44a)](_0x5172c5,_0x5172c5);const _0x480388=$gameTemp[_0x1afedd(0x572)](),_0x5761e2=VisuMZ[_0x1afedd(0x84a)](_0x5172c5[_0x1afedd(0x1e2)]),_0x5ad702=VisuMZ[_0x1afedd(0x84a)](_0x5172c5[_0x1afedd(0x7e2)]),_0x12f968=_0x5172c5[_0x1afedd(0x34f)];let _0x32c3ed=_0x5172c5[_0x1afedd(0x749)];const _0x477d47=_0x5172c5[_0x1afedd(0x962)],_0x12c680=_0x5172c5[_0x1afedd(0x1b9)],_0x2286be=_0x5172c5[_0x1afedd(0x5f2)],_0x482b6b=_0x5172c5[_0x1afedd(0xa62)],_0x2c5e42=_0x5172c5[_0x1afedd(0x40d)],_0x37775f=_0x5172c5[_0x1afedd(0xaea)],_0x3eb4dc=_0x5172c5[_0x1afedd(0x7db)],_0x281885=_0x5172c5[_0x1afedd(0x20d)],_0x21cdec=Math[_0x1afedd(0x409)](..._0x5ad702[_0x1afedd(0x73b)](_0x41a4f2=>_0x41a4f2[_0x1afedd(0x68a)]()[_0x1afedd(0x1d4)]-_0x41a4f2['battler']()[_0x1afedd(0x393)]()/0x2)),_0x40a52d=Math['max'](..._0x5ad702['map'](_0x42f526=>_0x42f526[_0x1afedd(0x68a)]()[_0x1afedd(0x1d4)]+_0x42f526[_0x1afedd(0x68a)]()['mainSpriteWidth']()/0x2)),_0x437219=Math[_0x1afedd(0x409)](..._0x5ad702[_0x1afedd(0x73b)](_0x1af2cf=>_0x1af2cf['battler']()['_baseY']-_0x1af2cf[_0x1afedd(0x68a)]()[_0x1afedd(0x889)]())),_0xb950b9=Math[_0x1afedd(0x8ae)](..._0x5ad702['map'](_0x4f5177=>_0x4f5177[_0x1afedd(0x68a)]()['_baseY'])),_0x515d29=_0x5ad702['filter'](_0x5f5119=>_0x5f5119[_0x1afedd(0x261)]())['length'],_0x4a3df4=_0x5ad702[_0x1afedd(0x538)](_0x332c10=>_0x332c10[_0x1afedd(0x795)]())['length'];let _0x355bcd=0x0,_0x67fb1=0x0;if(_0x12f968['match'](/front/i))_0x355bcd=_0x515d29>=_0x4a3df4?_0x21cdec:_0x40a52d;else{if(_0x12f968[_0x1afedd(0x7f1)](/middle/i)){if(_0x1afedd(0x62c)==='jaIQf')_0x355bcd=(_0x21cdec+_0x40a52d)/0x2,_0x32c3ed=-0x1;else{const _0x5b54b8=this[_0x1afedd(0x68a)]();_0x5b54b8&&_0x5b54b8[_0x1afedd(0x9ba)]();}}else _0x12f968[_0x1afedd(0x7f1)](/back/i)&&(_0x355bcd=_0x515d29>=_0x4a3df4?_0x40a52d:_0x21cdec);}if(_0x12f968[_0x1afedd(0x7f1)](/head/i))_0x67fb1=_0x437219;else{if(_0x12f968[_0x1afedd(0x7f1)](/center/i))_0x67fb1=(_0x437219+_0xb950b9)/0x2;else _0x12f968[_0x1afedd(0x7f1)](/base/i)&&(_0x67fb1=_0xb950b9);}if(!_0x480388)return;for(const _0x37f245 of _0x5761e2){if(!_0x37f245)continue;let _0x1dcb3f=_0x355bcd,_0x4c22de=_0x67fb1;if(_0x477d47[_0x1afedd(0x7f1)](/none/i))_0x1dcb3f+=_0x12c680,_0x4c22de+=_0x2286be;else{if(_0x477d47['match'](/horz/i)&&_0x477d47[_0x1afedd(0x7f1)](/vert/i)){if(_0x1afedd(0xac2)===_0x1afedd(0xac2))_0x1dcb3f+=_0x37f245['isActor']()?-_0x12c680:_0x12c680,_0x4c22de+=_0x37f245['isActor']()?-_0x2286be:_0x2286be;else{if(!_0x50fa59['BattleCore'][_0x1afedd(0x4ce)]['HpGauge']['AddHpGaugeOption'])return;const _0xbfda26=_0x352192[_0x1afedd(0x5b5)],_0x33ab1a=_0x1afedd(0x5b5);this[_0x1afedd(0x9f7)](_0xbfda26,_0x33ab1a);}}else{if(_0x477d47[_0x1afedd(0x7f1)](/horz/i))_0x1dcb3f+=_0x37f245['isActor']()?-_0x12c680:_0x12c680,_0x4c22de+=_0x2286be;else{if(_0x477d47[_0x1afedd(0x7f1)](/vert/i)){if(_0x1afedd(0x6ad)===_0x1afedd(0x6ad))_0x1dcb3f+=_0x12c680,_0x4c22de+=_0x37f245[_0x1afedd(0x261)]()?-_0x2286be:_0x2286be;else{if(!this[_0x1afedd(0x414)])return![];if(this[_0x1afedd(0x41b)]>0x0)return!![];return _0x31acae[_0x1afedd(0xa1e)]['Sprite_Battler_isMoving'][_0x1afedd(0xb33)](this);}}}}}_0x37f245['moveBattlerHomeToPoint'](_0x1dcb3f,_0x4c22de,_0x482b6b,_0x2c5e42,_0x37775f,_0x32c3ed),_0x37f245['requestMotion'](_0x3eb4dc);}if(_0x281885)_0x480388[_0x1afedd(0x295)](_0x1afedd(0x272));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x204),_0x6969f4=>{const _0x1619b0=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1619b0(0x969)]())return;VisuMZ[_0x1619b0(0x44a)](_0x6969f4,_0x6969f4);const _0xcf5c4f=VisuMZ['CreateActionSequenceTargets'](_0x6969f4['Targets']);let _0x374f35=_0x6969f4[_0x1619b0(0x3e3)][_0x1619b0(0x7f1)](/back/i);for(const _0x49827e of _0xcf5c4f){if(_0x1619b0(0x305)!==_0x1619b0(0x352)){if(!_0x49827e)continue;if(_0x6969f4['Direction'][_0x1619b0(0x7f1)](/rand/i))_0x374f35=Math[_0x1619b0(0x6d0)](0x2);_0x49827e[_0x1619b0(0x91e)](!!_0x374f35);}else return _0x191f76[_0x1619b0(0x6d2)][_0x1619b0(0x2af)][_0x1619b0(0xb33)](this)&&this[_0x1619b0(0x95b)]();}}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x2cf),_0x328b97=>{const _0x4a6751=_0x1a0039;if(!SceneManager[_0x4a6751(0x984)]())return;if(!$gameSystem[_0x4a6751(0x969)]())return;VisuMZ[_0x4a6751(0x44a)](_0x328b97,_0x328b97);const _0x5c7c53=VisuMZ[_0x4a6751(0x84a)](_0x328b97[_0x4a6751(0x9e9)]);let _0x261dc4=_0x328b97['Point'];const _0x434f1e=_0x328b97[_0x4a6751(0xbd3)];for(const _0x9cb847 of _0x5c7c53){if(!_0x9cb847)continue;let _0x5141a7=_0x9cb847[_0x4a6751(0x68a)]()[_0x4a6751(0x1d4)],_0x1a2df6=_0x9cb847[_0x4a6751(0x68a)]()[_0x4a6751(0x9da)];if(_0x261dc4[_0x4a6751(0x7f1)](/home/i))_0x5141a7=_0x9cb847['battler']()[_0x4a6751(0x59b)],_0x1a2df6=_0x9cb847[_0x4a6751(0x68a)]()['_homeY'];else{if(_0x261dc4[_0x4a6751(0x7f1)](/center/i))'WjBmJ'===_0x4a6751(0x925)?(_0x5141a7=Graphics[_0x4a6751(0x5d3)]/0x2,_0x1a2df6=Graphics[_0x4a6751(0x7b0)]/0x2):this[_0x4a6751(0xb6a)]='';else _0x261dc4[_0x4a6751(0x7f1)](/point (\d+), (\d+)/i)&&(_0x5141a7=Number(RegExp['$1']),_0x1a2df6=Number(RegExp['$2']));}_0x9cb847[_0x4a6751(0x537)](Math[_0x4a6751(0x917)](_0x5141a7),Math[_0x4a6751(0x917)](_0x1a2df6),!!_0x434f1e);}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x32d),_0xbf487a=>{const _0x181fdd=_0x1a0039;if(!SceneManager[_0x181fdd(0x984)]())return;if(!$gameSystem[_0x181fdd(0x969)]())return;VisuMZ['ConvertParams'](_0xbf487a,_0xbf487a);const _0x16ceac=VisuMZ[_0x181fdd(0x84a)](_0xbf487a['Targets1']),_0x2880cb=VisuMZ['CreateActionSequenceTargets'](_0xbf487a[_0x181fdd(0x7e2)]),_0x40e83a=_0x2880cb[_0x181fdd(0x73b)](_0x42143d=>_0x42143d&&_0x42143d[_0x181fdd(0x68a)]()?_0x42143d[_0x181fdd(0x68a)]()[_0x181fdd(0x1d4)]:0x0)/(_0x2880cb[_0x181fdd(0x2c0)]||0x1),_0x3ec16e=_0x2880cb[_0x181fdd(0x73b)](_0x1b512e=>_0x1b512e&&_0x1b512e[_0x181fdd(0x68a)]()?_0x1b512e[_0x181fdd(0x68a)]()[_0x181fdd(0x9da)]:0x0)/(_0x2880cb[_0x181fdd(0x2c0)]||0x1),_0x375191=_0xbf487a[_0x181fdd(0xbd3)];for(const _0x2d0a2e of _0x16ceac){if(!_0x2d0a2e)continue;_0x2d0a2e[_0x181fdd(0x537)](Math['round'](_0x40e83a),Math[_0x181fdd(0x917)](_0x3ec16e),!!_0x375191);}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x19f),_0x29d409=>{const _0x121e27=_0x1a0039;if(!SceneManager[_0x121e27(0x984)]())return;VisuMZ['ConvertParams'](_0x29d409,_0x29d409);const _0x2d3177=$gameTemp[_0x121e27(0x572)](),_0x59b55c=VisuMZ[_0x121e27(0x84a)](_0x29d409['Targets']),_0x13db57=_0x29d409[_0x121e27(0x13b)],_0xdb22ae=_0x29d409[_0x121e27(0xa62)],_0x1f3e7b=_0x29d409['EasingType'],_0x2932fb=_0x29d409[_0x121e27(0xa83)];if(!_0x2d3177)return;for(const _0x4e83da of _0x59b55c){if(_0x121e27(0x705)!==_0x121e27(0x705))_0x54fe90[_0x121e27(0x131)]([_0x2870be]);else{if(!_0x4e83da)continue;_0x4e83da[_0x121e27(0xa37)](_0x13db57,_0xdb22ae,_0x1f3e7b);}}if(_0x2932fb)_0x2d3177[_0x121e27(0x295)]('battleFloat');}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x326),_0x55bf9b=>{const _0x2c5945=_0x1a0039;if(!SceneManager[_0x2c5945(0x984)]())return;VisuMZ[_0x2c5945(0x44a)](_0x55bf9b,_0x55bf9b);const _0x119d6c=$gameTemp[_0x2c5945(0x572)]();if(!_0x119d6c)return;const _0x24f620=VisuMZ['CreateActionSequenceTargets'](_0x55bf9b[_0x2c5945(0x9e9)]);for(const _0x32d826 of _0x24f620){if(!_0x32d826)continue;_0x32d826[_0x2c5945(0x86d)]();}BattleManager[_0x2c5945(0xac9)]&&BattleManager[_0x2c5945(0xac9)]['performActionEnd']();if(_0x55bf9b[_0x2c5945(0x20d)])_0x119d6c[_0x2c5945(0x295)](_0x2c5945(0x272));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0xa22),_0x177b21=>{const _0x2148f5=_0x1a0039;if(!SceneManager[_0x2148f5(0x984)]())return;VisuMZ[_0x2148f5(0x44a)](_0x177b21,_0x177b21);const _0x111e53=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ed430=VisuMZ[_0x2148f5(0x84a)](_0x177b21['Targets']),_0x2974d3=_0x177b21[_0x2148f5(0x13b)],_0x242bff=_0x177b21[_0x2148f5(0xa62)],_0x24e33e=_0x177b21[_0x2148f5(0x64a)];if(!_0x111e53)return;for(const _0x2e3106 of _0x3ed430){if(!_0x2e3106)continue;_0x2e3106[_0x2148f5(0x341)](_0x2974d3,_0x242bff);}if(_0x24e33e)_0x111e53['setWaitMode'](_0x2148f5(0x366));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x662),_0x598612=>{const _0x47c2c3=_0x1a0039;if(!SceneManager[_0x47c2c3(0x984)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x47c2c3(0x44a)](_0x598612,_0x598612);const _0x44533d=$gameTemp[_0x47c2c3(0x572)](),_0xd3032b=VisuMZ['CreateActionSequenceTargets'](_0x598612[_0x47c2c3(0x9e9)]),_0x43e133=_0x598612[_0x47c2c3(0x6fd)],_0x300c21=_0x598612[_0x47c2c3(0x49f)],_0x224de9=_0x598612[_0x47c2c3(0x6b9)],_0x53ea9c=_0x598612[_0x47c2c3(0xa62)],_0x21f7ee=_0x598612[_0x47c2c3(0x40d)],_0x386cb0=_0x598612[_0x47c2c3(0xaea)],_0x18d0d2=_0x598612['MotionType'],_0x99f79=_0x598612[_0x47c2c3(0x20d)];if(!_0x44533d)return;for(const _0x483885 of _0xd3032b){if('AMpxj'!==_0x47c2c3(0x55d)){if(!_0x483885)continue;let _0x856b6b=_0x300c21,_0x3be83d=_0x224de9;if(_0x43e133['match'](/horz/i))_0x856b6b*=_0x483885[_0x47c2c3(0x261)]()?-0x1:0x1;if(_0x43e133[_0x47c2c3(0x7f1)](/vert/i))_0x3be83d*=_0x483885[_0x47c2c3(0x261)]()?-0x1:0x1;_0x483885['moveBattlerDistance'](_0x856b6b,_0x3be83d,_0x53ea9c,_0x21f7ee,_0x386cb0),_0x483885[_0x47c2c3(0x496)](_0x18d0d2);}else _0x89b32[_0x47c2c3(0x3cb)](_0x281bc5);}if(_0x99f79)_0x44533d[_0x47c2c3(0x295)]('battleMove');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Movement_MoveToPoint',_0x4c2c3d=>{const _0x360ab9=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x360ab9(0x969)]())return;VisuMZ[_0x360ab9(0x44a)](_0x4c2c3d,_0x4c2c3d);const _0x4c61cf=$gameTemp[_0x360ab9(0x572)](),_0x3e35c9=VisuMZ['CreateActionSequenceTargets'](_0x4c2c3d[_0x360ab9(0x9e9)]),_0x4dc6db=_0x4c2c3d[_0x360ab9(0x38d)],_0x97d423=_0x4c2c3d[_0x360ab9(0x962)],_0x174a21=_0x4c2c3d[_0x360ab9(0x1b9)],_0x759337=_0x4c2c3d[_0x360ab9(0x5f2)],_0x1c19a5=_0x4c2c3d[_0x360ab9(0xa62)],_0x2bf34c=_0x4c2c3d[_0x360ab9(0x40d)],_0x32792b=_0x4c2c3d['EasingType'],_0x9cd3d8=_0x4c2c3d['MotionType'],_0x35a598=_0x4c2c3d[_0x360ab9(0x20d)];if(!_0x4c61cf)return;for(const _0x4a1ff1 of _0x3e35c9){if(_0x360ab9(0x482)===_0x360ab9(0x482)){if(!_0x4a1ff1)continue;let _0x4a8705=_0x4a1ff1[_0x360ab9(0x68a)]()['_baseX'],_0x2f3367=_0x4a1ff1[_0x360ab9(0x68a)]()['_baseY'];if(_0x4dc6db['match'](/home/i)){if(_0x360ab9(0x99d)!==_0x360ab9(0xa78))_0x4a8705=_0x4a1ff1[_0x360ab9(0x68a)]()[_0x360ab9(0x59b)],_0x2f3367=_0x4a1ff1['battler']()[_0x360ab9(0xab6)];else{const _0x2a7931=_0x504083(_0x1a6cd9['$1']);return[_0x45a7d6[_0x360ab9(0x541)]()[_0x2a7931]];}}else{if(_0x4dc6db[_0x360ab9(0x7f1)](/center/i))_0x360ab9(0x879)!=='iOtRo'?_0x2d5641+=_0x26fc41(_0x2463c0['$1']):(_0x4a8705=Graphics[_0x360ab9(0x5d3)]/0x2,_0x2f3367=Graphics[_0x360ab9(0x7b0)]/0x2);else{if(_0x4dc6db[_0x360ab9(0x7f1)](/point (\d+), (\d+)/i)){if(_0x360ab9(0xada)!==_0x360ab9(0xada)){let _0x52ec44='battleUIOffsetX';if(this[_0x360ab9(0xaa4)](_0x52ec44))return this[_0x360ab9(0xab3)][_0x52ec44];return this['_cache'][_0x52ec44]=this[_0x360ab9(0x51b)](this[_0x360ab9(0xbc6)]()),this['_cache'][_0x52ec44];}else _0x4a8705=Number(RegExp['$1']),_0x2f3367=Number(RegExp['$2']);}}}if(_0x97d423[_0x360ab9(0x7f1)](/none/i))_0x4a8705+=_0x174a21,_0x2f3367+=_0x759337;else{if(_0x97d423[_0x360ab9(0x7f1)](/horz/i)&&_0x97d423[_0x360ab9(0x7f1)](/vert/i)){if(_0x360ab9(0x9cc)!==_0x360ab9(0x1fb))_0x4a8705+=_0x4a1ff1[_0x360ab9(0x261)]()?-_0x174a21:_0x174a21,_0x2f3367+=_0x4a1ff1['isActor']()?-_0x759337:_0x759337;else return _0x11232b[_0x360ab9(0xa1e)][_0x360ab9(0x4ce)]['Enemy'][_0x360ab9(0x9a2)];}else{if(_0x97d423['match'](/horz/i)){if(_0x360ab9(0x9f4)!==_0x360ab9(0x8ac))_0x4a8705+=_0x4a1ff1[_0x360ab9(0x261)]()?-_0x174a21:_0x174a21,_0x2f3367+=_0x759337;else return _0x5254ef[_0x360ab9(0xa1e)]['Settings']['AutoBattle'][_0x360ab9(0x787)][_0x360ab9(0xb33)](this);}else _0x97d423['match'](/vert/i)&&('CBHId'==='klbGW'?(this[_0x360ab9(0xb8a)](),this[_0x360ab9(0x4a4)]=![],_0x242c88[_0x360ab9(0x154)]()):(_0x4a8705+=_0x174a21,_0x2f3367+=_0x4a1ff1[_0x360ab9(0x261)]()?-_0x759337:_0x759337));}}_0x4a1ff1[_0x360ab9(0x347)](_0x4a8705,_0x2f3367,_0x1c19a5,_0x2bf34c,_0x32792b,-0x1),_0x4a1ff1['requestMotion'](_0x9cd3d8);}else return 0x1;}if(_0x35a598)_0x4c61cf[_0x360ab9(0x295)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0xa14),_0x4b3ecf=>{const _0xa23214=_0x1a0039;if(!SceneManager[_0xa23214(0x984)]())return;if(!$gameSystem[_0xa23214(0x969)]())return;VisuMZ[_0xa23214(0x44a)](_0x4b3ecf,_0x4b3ecf);const _0x2a0ed4=$gameTemp[_0xa23214(0x572)](),_0x17cef7=VisuMZ[_0xa23214(0x84a)](_0x4b3ecf[_0xa23214(0x1e2)]),_0x1ea359=VisuMZ[_0xa23214(0x84a)](_0x4b3ecf[_0xa23214(0x7e2)]),_0x18b41a=_0x4b3ecf[_0xa23214(0x34f)];let _0x43dc3f=_0x4b3ecf['MeleeDistance'];const _0x11d61f=_0x4b3ecf[_0xa23214(0x962)],_0x557813=_0x4b3ecf['OffsetX'],_0x4154b0=_0x4b3ecf['OffsetY'],_0x41bae8=_0x4b3ecf[_0xa23214(0xa62)],_0x2d0f3c=_0x4b3ecf[_0xa23214(0x40d)],_0x352441=_0x4b3ecf[_0xa23214(0xaea)],_0xaa0e46=_0x4b3ecf[_0xa23214(0x7db)],_0x6c5eec=_0x4b3ecf[_0xa23214(0x20d)],_0x43e602=Math['min'](..._0x1ea359['map'](_0x552a15=>_0x552a15[_0xa23214(0x68a)]()['_baseX']-_0x552a15[_0xa23214(0x68a)]()['mainSpriteWidth']()/0x2)),_0x5f2536=Math[_0xa23214(0x8ae)](..._0x1ea359['map'](_0x4d084c=>_0x4d084c[_0xa23214(0x68a)]()[_0xa23214(0x1d4)]+_0x4d084c['battler']()[_0xa23214(0x393)]()/0x2)),_0x174db1=Math[_0xa23214(0x409)](..._0x1ea359[_0xa23214(0x73b)](_0x1bd435=>_0x1bd435[_0xa23214(0x68a)]()['_baseY']-_0x1bd435[_0xa23214(0x68a)]()['mainSpriteHeight']())),_0x5bdff3=Math[_0xa23214(0x8ae)](..._0x1ea359[_0xa23214(0x73b)](_0x3bf989=>_0x3bf989[_0xa23214(0x68a)]()['_baseY'])),_0x1e718e=_0x1ea359[_0xa23214(0x538)](_0x225bb0=>_0x225bb0['isActor']())[_0xa23214(0x2c0)],_0x40eb72=_0x1ea359[_0xa23214(0x538)](_0x7a303c=>_0x7a303c[_0xa23214(0x795)]())[_0xa23214(0x2c0)];let _0x42c914=0x0,_0x1d1f66=0x0;if(_0x18b41a[_0xa23214(0x7f1)](/front/i))_0x42c914=_0x1e718e>=_0x40eb72?_0x43e602:_0x5f2536;else{if(_0x18b41a['match'](/middle/i))_0x42c914=(_0x43e602+_0x5f2536)/0x2,_0x43dc3f=-0x1;else _0x18b41a[_0xa23214(0x7f1)](/back/i)&&('JwmKe'!=='JwmKe'?(this[_0xa23214(0xaa8)](),this[_0xa23214(0x673)](_0xa23214(0x4e6))):_0x42c914=_0x1e718e>=_0x40eb72?_0x5f2536:_0x43e602);}if(_0x18b41a[_0xa23214(0x7f1)](/head/i))_0x1d1f66=_0x174db1;else{if(_0x18b41a[_0xa23214(0x7f1)](/center/i))_0x1d1f66=(_0x174db1+_0x5bdff3)/0x2;else _0x18b41a[_0xa23214(0x7f1)](/base/i)&&(_0x1d1f66=_0x5bdff3);}if(!_0x2a0ed4)return;for(const _0x532ede of _0x17cef7){if('ahIxT'===_0xa23214(0xb55)){const _0x41a6be=_0x396cac(_0x528fe3['$1']);_0x4579cd[_0xa23214(0x778)]([this],_0x41a6be,![],![]);}else{if(!_0x532ede)continue;let _0x49ebff=_0x42c914,_0x137ffb=_0x1d1f66;if(_0x11d61f[_0xa23214(0x7f1)](/none/i))'xqpHH'===_0xa23214(0x7f2)?(_0x4ef750=_0x4749aa['boxWidth']/0x2,_0x1376d3=_0x28acd1['boxHeight']/0x2):(_0x49ebff+=_0x557813,_0x137ffb+=_0x4154b0);else{if(_0x11d61f['match'](/horz/i)&&_0x11d61f[_0xa23214(0x7f1)](/vert/i)){if(_0xa23214(0x4aa)===_0xa23214(0x4aa))_0x49ebff+=_0x532ede['isActor']()?-_0x557813:_0x557813,_0x137ffb+=_0x532ede[_0xa23214(0x261)]()?-_0x4154b0:_0x4154b0;else{if(!_0x3f9797[_0xa23214(0x969)]())return;const _0x55aef1=this[_0xa23214(0x68a)]();if(!_0x55aef1)return;_0x498f36=_0x3069bb||0x0;if(_0x381c66>0x0){if(_0x55aef1['_baseX']>_0x2c9c0d)_0x23e2b4+=_0x55aef1['width']/0x2+_0x588f96;if(_0x55aef1[_0xa23214(0x1d4)]<_0x50b221)_0xdd1175-=_0x55aef1[_0xa23214(0x926)]/0x2+_0x134cb7;}if(_0x5ae22)this[_0xa23214(0x537)](_0x1435ca,_0x4c50c7,![]);_0x55aef1['startHomeMove'](_0x1b1b9b,_0x3be6b2,_0x5f25a5,_0x45312e),this[_0xa23214(0x81f)]=_0xc83ea3,this['_forcedHomeY']=_0x46c4f8;}}else{if(_0x11d61f[_0xa23214(0x7f1)](/horz/i))_0xa23214(0x948)!==_0xa23214(0x948)?_0x2bd0cb[_0xa23214(0x9bf)]=![]:(_0x49ebff+=_0x532ede[_0xa23214(0x261)]()?-_0x557813:_0x557813,_0x137ffb+=_0x4154b0);else _0x11d61f['match'](/vert/i)&&(_0x49ebff+=_0x557813,_0x137ffb+=_0x532ede[_0xa23214(0x261)]()?-_0x4154b0:_0x4154b0);}}_0x532ede[_0xa23214(0x347)](_0x49ebff,_0x137ffb,_0x41bae8,_0x2d0f3c,_0x352441,_0x43dc3f),_0x532ede[_0xa23214(0x496)](_0xaa0e46);}}if(_0x6c5eec)_0x2a0ed4[_0xa23214(0x295)](_0xa23214(0x272));}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x628),_0x6bd781=>{const _0x3b88e7=_0x1a0039;if(!SceneManager[_0x3b88e7(0x984)]())return;VisuMZ['ConvertParams'](_0x6bd781,_0x6bd781);const _0x2bc3a3=$gameTemp[_0x3b88e7(0x572)](),_0x2e634f=VisuMZ[_0x3b88e7(0x84a)](_0x6bd781[_0x3b88e7(0x9e9)]),_0x49c717=_0x6bd781[_0x3b88e7(0x334)],_0x3c2c51=_0x6bd781[_0x3b88e7(0xa62)],_0x56139c=_0x6bd781['EasingType'],_0x3dc402=_0x6bd781['WaitForOpacity'];if(!_0x2bc3a3)return;for(const _0x14b767 of _0x2e634f){if(_0x3b88e7(0x81e)===_0x3b88e7(0x8b0))this['_currentActor']=null;else{if(!_0x14b767)continue;_0x14b767[_0x3b88e7(0x5d7)](_0x49c717,_0x3c2c51,_0x56139c);}}if(_0x3dc402)_0x2bc3a3[_0x3b88e7(0x295)](_0x3b88e7(0x513));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x4f8),_0x4d0e78=>{const _0x1509a5=_0x1a0039;if(!SceneManager[_0x1509a5(0x984)]())return;VisuMZ[_0x1509a5(0x44a)](_0x4d0e78,_0x4d0e78);const _0x35cf58=$gameTemp['getLastPluginCommandInterpreter'](),_0x1276b6=VisuMZ[_0x1509a5(0x84a)](_0x4d0e78[_0x1509a5(0x9e9)]),_0x45ecdb=_0x4d0e78['ScaleX'],_0x212ce8=_0x4d0e78[_0x1509a5(0xaa9)],_0x5163ca=_0x4d0e78[_0x1509a5(0xa62)],_0x3ed2fa=_0x4d0e78[_0x1509a5(0xaea)],_0x32fc12=_0x4d0e78[_0x1509a5(0xbc1)];if(!_0x35cf58)return;for(const _0x334466 of _0x1276b6){if(_0x1509a5(0x2d9)!=='XWfdc')this['drawGauge']();else{if(!_0x334466)continue;_0x334466[_0x1509a5(0x2d7)](_0x45ecdb,_0x212ce8,_0x5163ca,_0x3ed2fa);}}if(_0x32fc12)_0x35cf58[_0x1509a5(0x295)]('battleGrow');}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x379),_0x2ad05f=>{const _0x1c6cf4=_0x1a0039;if(!SceneManager[_0x1c6cf4(0x984)]())return;VisuMZ[_0x1c6cf4(0x44a)](_0x2ad05f,_0x2ad05f);const _0x15c6c2=$gameTemp['getLastPluginCommandInterpreter'](),_0x371b45=VisuMZ[_0x1c6cf4(0x84a)](_0x2ad05f[_0x1c6cf4(0x9e9)]),_0x4e3548=_0x2ad05f['SkewX'],_0x5d3bfb=_0x2ad05f[_0x1c6cf4(0x5f7)],_0x472446=_0x2ad05f[_0x1c6cf4(0xa62)],_0xf12215=_0x2ad05f['EasingType'],_0x4cfc6e=_0x2ad05f['WaitForSkew'];if(!_0x15c6c2)return;for(const _0x50c22a of _0x371b45){if('XQEJd'==='XQEJd'){if(!_0x50c22a)continue;_0x50c22a['skewBattler'](_0x4e3548,_0x5d3bfb,_0x472446,_0xf12215);}else _0x252884--,_0x3702a9++;}if(_0x4cfc6e)_0x15c6c2['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x1fc),_0x496b8d=>{const _0x238487=_0x1a0039;if(!SceneManager[_0x238487(0x984)]())return;VisuMZ['ConvertParams'](_0x496b8d,_0x496b8d);const _0x3c10e3=$gameTemp[_0x238487(0x572)](),_0x5b8de=VisuMZ['CreateActionSequenceTargets'](_0x496b8d[_0x238487(0x9e9)]),_0x5d980d=_0x496b8d[_0x238487(0x4c6)],_0x35f53e=_0x496b8d[_0x238487(0xa62)],_0x4abacf=_0x496b8d[_0x238487(0xaea)],_0x13cbb7=_0x496b8d['RevertAngle'],_0x447337=_0x496b8d[_0x238487(0x37c)];if(!_0x3c10e3)return;for(const _0x342b81 of _0x5b8de){if(!_0x342b81)continue;_0x342b81[_0x238487(0x7f7)](_0x5d980d,_0x35f53e,_0x4abacf,_0x13cbb7);}if(_0x447337)_0x3c10e3[_0x238487(0x295)](_0x238487(0xa40));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x92b),_0x49b58d=>{const _0x40cd3c=_0x1a0039;if(!SceneManager[_0x40cd3c(0x984)]())return;const _0x3cde21=$gameTemp[_0x40cd3c(0x572)]();if(!_0x3cde21)return;_0x3cde21[_0x40cd3c(0x295)]('battleFloat');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Movement_WaitForJump',_0x2ab4f6=>{const _0x5eb393=_0x1a0039;if(!SceneManager['isSceneBattle']())return;const _0x29ca15=$gameTemp[_0x5eb393(0x572)]();if(!_0x29ca15)return;_0x29ca15['setWaitMode'](_0x5eb393(0x366));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x8c9),_0xe392c9=>{const _0xe29ca8=_0x1a0039;if(!SceneManager['isSceneBattle']())return;const _0xbc7f67=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xbc7f67)return;_0xbc7f67['setWaitMode'](_0xe29ca8(0x272));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Movement_WaitForOpacity',_0x3d0702=>{const _0x374055=_0x1a0039;if(!SceneManager[_0x374055(0x984)]())return;const _0x3d3074=$gameTemp[_0x374055(0x572)]();if(!_0x3d3074)return;_0x3d3074[_0x374055(0x295)]('battleOpacity');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x3d7),_0x4db14c=>{const _0x43cc81=_0x1a0039;if(!SceneManager[_0x43cc81(0x984)]())return;const _0x55d6a2=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x55d6a2)return;_0x55d6a2[_0x43cc81(0x295)](_0x43cc81(0x1eb));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x417),_0x2c543d=>{const _0x37e624=_0x1a0039;if(!SceneManager[_0x37e624(0x984)]())return;const _0x38b83e=$gameTemp[_0x37e624(0x572)]();if(!_0x38b83e)return;_0x38b83e[_0x37e624(0x295)](_0x37e624(0x740));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0xb09),_0xf6d21f=>{const _0x5d316c=_0x1a0039;if(!SceneManager[_0x5d316c(0x984)]())return;const _0x31162f=$gameTemp[_0x5d316c(0x572)]();if(!_0x31162f)return;_0x31162f[_0x5d316c(0x295)](_0x5d316c(0xa40));}),PluginManager[_0x1a0039(0x832)](pluginData['name'],_0x1a0039(0x349),_0x30912a=>{const _0x5eea74=_0x1a0039;if(!SceneManager[_0x5eea74(0x984)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ['ConvertParams'](_0x30912a,_0x30912a);const _0x42804f=$gameTemp[_0x5eea74(0x572)](),_0x41b6db=_0x30912a[_0x5eea74(0x14e)];if(!_0x42804f)return;const _0x23ae6a=BattleManager['_spriteset'];if(!_0x23ae6a)return;_0x23ae6a[_0x5eea74(0x45b)](_0x30912a);if(_0x41b6db)_0x42804f[_0x5eea74(0x295)](_0x5eea74(0x658));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Projectile_Icon',_0x3c5c7c=>{const _0xb78a63=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0xb78a63(0x44a)](_0x3c5c7c,_0x3c5c7c);const _0x5c187d=$gameTemp[_0xb78a63(0x572)](),_0x37c6f1=_0x3c5c7c[_0xb78a63(0x14e)];if(!_0x5c187d)return;const _0x110214=BattleManager[_0xb78a63(0x942)];if(!_0x110214)return;_0x110214[_0xb78a63(0x45b)](_0x3c5c7c);if(_0x37c6f1)_0x5c187d[_0xb78a63(0x295)](_0xb78a63(0x658));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x465),_0x3930e9=>{const _0x19332d=_0x1a0039;if(!SceneManager[_0x19332d(0x984)]())return;if(!Imported[_0x19332d(0x868)])return;VisuMZ['ConvertParams'](_0x3930e9,_0x3930e9);const _0x129d49=$gameTemp[_0x19332d(0x572)](),_0x3dcc85=_0x3930e9[_0x19332d(0x14e)];if(!_0x129d49)return;const _0x264135=BattleManager[_0x19332d(0x942)];if(!_0x264135)return;_0x264135['createActionSequenceProjectile'](_0x3930e9);if(_0x3dcc85)_0x129d49['setWaitMode'](_0x19332d(0x658));}),PluginManager['registerCommand'](pluginData['name'],_0x1a0039(0x4d8),_0x57353e=>{const _0x2e3372=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2e3372(0x624)])return;VisuMZ[_0x2e3372(0x44a)](_0x57353e,_0x57353e);const _0x497c47=$gameTemp[_0x2e3372(0x572)](),_0x2bb12d=_0x57353e[_0x2e3372(0x207)];if(!_0x497c47)return;$gameScreen['setBattleSkew'](_0x57353e[_0x2e3372(0xb77)],_0x57353e[_0x2e3372(0x5f7)],_0x57353e['Duration'],_0x57353e[_0x2e3372(0xaea)]);if(_0x2bb12d)_0x497c47[_0x2e3372(0x295)]('battleSkew');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x323),_0x3bb88f=>{const _0x58d773=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x58d773(0x624)])return;VisuMZ[_0x58d773(0x44a)](_0x3bb88f,_0x3bb88f);const _0x306b49=$gameTemp[_0x58d773(0x572)](),_0xf0e0f6=_0x3bb88f[_0x58d773(0x207)];if(!_0x306b49)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x3bb88f[_0x58d773(0xa62)],_0x3bb88f['EasingType']);if(_0xf0e0f6)_0x306b49['setWaitMode'](_0x58d773(0x614));}),PluginManager[_0x1a0039(0x832)](pluginData['name'],'ActSeq_Skew_WaitForSkew',_0x3f02c8=>{const _0x5f255f=_0x1a0039;if(!SceneManager[_0x5f255f(0x984)]())return;if(!Imported[_0x5f255f(0x624)])return;const _0x414be4=$gameTemp[_0x5f255f(0x572)]();if(!_0x414be4)return;_0x414be4[_0x5f255f(0x295)](_0x5f255f(0x614));}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x2a5),_0x53ae32=>{const _0x42189a=_0x1a0039;if(!SceneManager[_0x42189a(0x984)]())return;VisuMZ['ConvertParams'](_0x53ae32,_0x53ae32);const _0x57d57c=$gameTemp[_0x42189a(0x572)](),_0x50a015=_0x53ae32['Index'],_0x564af3=_0x53ae32[_0x42189a(0x5a9)];if(!_0x57d57c)return;BattleManager['_targetIndex']=_0x50a015,BattleManager['_target']=BattleManager[_0x42189a(0x1a8)]?BattleManager['_allTargets'][BattleManager[_0x42189a(0x33a)]]||null:null,BattleManager[_0x42189a(0xa7e)]&&_0x564af3[_0x42189a(0x8b6)]()[_0x42189a(0x850)]()!=='UNTITLED'&&_0x57d57c[_0x42189a(0x131)]([_0x564af3]);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Target_NextTarget',_0x49f595=>{const _0x480335=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x480335(0x44a)](_0x49f595,_0x49f595);const _0x23a8a5=$gameTemp[_0x480335(0x572)](),_0x3c9fdb=_0x49f595[_0x480335(0x5a9)];if(!_0x23a8a5)return;BattleManager['_targetIndex']++,BattleManager['_target']=BattleManager[_0x480335(0x1a8)][BattleManager[_0x480335(0x33a)]]||null;if(BattleManager[_0x480335(0xa7e)]&&_0x3c9fdb[_0x480335(0x8b6)]()['trim']()!==_0x480335(0x21e)){if('xfiFs'!==_0x480335(0x3e6))_0x23a8a5[_0x480335(0x131)]([_0x3c9fdb]);else{const _0x23d89c=this[_0x480335(0x757)][_0x480335(0x3bc)];this[_0x480335(0x757)]['setFrame'](0x0,0x0,_0x23d89c[_0x480335(0x926)],_0x23d89c[_0x480335(0x84d)]);}}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x6b1),_0x280c66=>{const _0x589d81=_0x1a0039;if(!SceneManager[_0x589d81(0x984)]())return;VisuMZ[_0x589d81(0x44a)](_0x280c66,_0x280c66);const _0x43c19d=$gameTemp[_0x589d81(0x572)](),_0x25e20a=_0x280c66[_0x589d81(0x5a9)];if(!_0x43c19d)return;BattleManager[_0x589d81(0x33a)]--,BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0x589d81(0x33a)]]||null;if(BattleManager[_0x589d81(0xa7e)]&&_0x25e20a['toUpperCase']()[_0x589d81(0x850)]()!==_0x589d81(0x21e)){if('QGWMO'!==_0x589d81(0xb38)){const _0x5155d9=_0xa1348(_0x40d98b['$1']),_0x46a718=_0x2028e4['BattleCore'][_0x589d81(0x322)](_0x2acac9,_0x589d81(0x9e9));_0x4b44c1[_0x589d81(0xa1e)]['createTargetsJS'](_0x5155d9,_0x46a718);}else _0x43c19d[_0x589d81(0x131)]([_0x25e20a]);}}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0xb92),_0xb6dd04=>{const _0x5b22ed=_0x1a0039;if(!SceneManager[_0x5b22ed(0x984)]())return;VisuMZ[_0x5b22ed(0x44a)](_0xb6dd04,_0xb6dd04);const _0x274a23=$gameTemp[_0x5b22ed(0x572)](),_0x22294f=_0xb6dd04[_0x5b22ed(0x484)],_0x2164b4=_0xb6dd04[_0x5b22ed(0x5a9)];if(!_0x274a23)return;const _0x5bce75=BattleManager[_0x5b22ed(0x33a)];for(;;){if(_0x5b22ed(0x839)!==_0x5b22ed(0x839))this['addChild'](this[_0x5b22ed(0x5e9)]);else{BattleManager[_0x5b22ed(0x33a)]=Math[_0x5b22ed(0x6d0)](BattleManager['_allTargets'][_0x5b22ed(0x2c0)]);if(!_0x22294f)break;if(BattleManager[_0x5b22ed(0x33a)]!==_0x5bce75)break;if(BattleManager[_0x5b22ed(0x1a8)][_0x5b22ed(0x2c0)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}}BattleManager[_0x5b22ed(0xa7e)]=BattleManager['_allTargets'][BattleManager[_0x5b22ed(0x33a)]]||null,BattleManager[_0x5b22ed(0xa7e)]&&_0x2164b4[_0x5b22ed(0x8b6)]()[_0x5b22ed(0x850)]()!==_0x5b22ed(0x21e)&&_0x274a23[_0x5b22ed(0x131)]([_0x2164b4]);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x18d),_0xa988ec=>{const _0x5d8eaf=_0x1a0039;if(!SceneManager[_0x5d8eaf(0x984)]())return;VisuMZ['ConvertParams'](_0xa988ec,_0xa988ec);const _0x34b330=VisuMZ[_0x5d8eaf(0x84a)](_0xa988ec[_0x5d8eaf(0x9e9)]);for(const _0x507f71 of _0x34b330){if('WkYXJ'===_0x5d8eaf(0x622)){if(!_0x507f71)continue;if(!_0x507f71['isActor']())continue;_0x507f71['clearActiveWeaponSlot']();}else return _0x4808d3(_0x58a34a['$1'])||0x0;}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x36a),_0x2ca02b=>{const _0x3b820e=_0x1a0039;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b820e(0x44a)](_0x2ca02b,_0x2ca02b);const _0x5c9254=$gameTemp[_0x3b820e(0x572)]();let _0x4099b8=![];const _0x31c42d=_0x2ca02b['JumpToLabel'],_0x55dcbd=VisuMZ[_0x3b820e(0x84a)](_0x2ca02b[_0x3b820e(0x9e9)]);for(const _0x20c64f of _0x55dcbd){if(!_0x20c64f)continue;if(!_0x20c64f['isActor']())continue;_0x20c64f['nextActiveWeaponSlot'](),_0x20c64f['weapons']()['length']>0x0?_0x3b820e(0x4f9)!==_0x3b820e(0x3d1)?_0x4099b8=!![]:(_0x29ab23+=_0x5b0626['isActor']()?-_0x3f0e58:_0x3d7c30,_0x11411c+=_0x413d73):_0x20c64f[_0x3b820e(0x8ee)]();}_0x4099b8&&_0x31c42d[_0x3b820e(0x8b6)]()[_0x3b820e(0x850)]()!==_0x3b820e(0x21e)&&_0x5c9254[_0x3b820e(0x131)]([_0x31c42d]);}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],_0x1a0039(0x748),_0x880ed7=>{const _0x6fe83c=_0x1a0039;if(!SceneManager[_0x6fe83c(0x984)]())return;VisuMZ['ConvertParams'](_0x880ed7,_0x880ed7);let _0x334eb3=_0x880ed7['SlotID'];_0x334eb3--,_0x334eb3=Math[_0x6fe83c(0x8ae)](_0x334eb3,0x0);const _0x41ccae=VisuMZ['CreateActionSequenceTargets'](_0x880ed7['Targets']);for(const _0xe62052 of _0x41ccae){if('qALNj'===_0x6fe83c(0x46c))this[_0x6fe83c(0xbcf)]();else{if(!_0xe62052)continue;if(!_0xe62052[_0x6fe83c(0x261)]())continue;_0xe62052['setActiveWeaponSlot'](_0x334eb3);}}}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Zoom_Scale',_0x405db8=>{const _0xb4ce07=_0x1a0039;if(!SceneManager[_0xb4ce07(0x984)]())return;if(!Imported[_0xb4ce07(0x624)])return;VisuMZ['ConvertParams'](_0x405db8,_0x405db8);const _0x1d54f5=$gameTemp[_0xb4ce07(0x572)](),_0x337496=_0x405db8[_0xb4ce07(0x2b9)];if(!_0x1d54f5)return;$gameScreen[_0xb4ce07(0x268)](_0x405db8[_0xb4ce07(0xaec)],_0x405db8['Duration'],_0x405db8['EasingType']);if(_0x337496)_0x1d54f5[_0xb4ce07(0x295)]('battleZoom');}),PluginManager[_0x1a0039(0x832)](pluginData[_0x1a0039(0x192)],'ActSeq_Zoom_Reset',_0x4fa482=>{const _0x3f4661=_0x1a0039;if(!SceneManager[_0x3f4661(0x984)]())return;if(!Imported[_0x3f4661(0x624)])return;VisuMZ[_0x3f4661(0x44a)](_0x4fa482,_0x4fa482);const _0x4ec8f4=$gameTemp[_0x3f4661(0x572)](),_0x50f521=_0x4fa482['WaitForZoom'];if(!_0x4ec8f4)return;$gameScreen['setBattleZoom'](0x1,_0x4fa482[_0x3f4661(0xa62)],_0x4fa482[_0x3f4661(0xaea)]);if(_0x50f521)_0x4ec8f4[_0x3f4661(0x295)](_0x3f4661(0x580));}),PluginManager['registerCommand'](pluginData[_0x1a0039(0x192)],_0x1a0039(0x97b),_0x374ecf=>{const _0x315b65=_0x1a0039;if(!SceneManager[_0x315b65(0x984)]())return;if(!Imported[_0x315b65(0x624)])return;const _0x52a102=$gameTemp[_0x315b65(0x572)]();if(!_0x52a102)return;_0x52a102[_0x315b65(0x295)](_0x315b65(0x580));}),VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x638)]=Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x149)],Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x149)]=function(){const _0x29b4c7=_0x1a0039;this[_0x29b4c7(0x16f)](),this[_0x29b4c7(0x790)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x29b4c7(0x244)](),VisuMZ[_0x29b4c7(0xa1e)][_0x29b4c7(0x638)][_0x29b4c7(0xb33)](this),this[_0x29b4c7(0x558)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x29b4c7(0x7e4)](),this[_0x29b4c7(0xbbd)]();},Scene_Boot['prototype'][_0x1a0039(0x558)]=function(){const _0x342593=_0x1a0039;if(VisuMZ[_0x342593(0xa28)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x342593(0x6f1)](),this[_0x342593(0x40a)]();},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x16f)]=function(){const _0x3b18d2=_0x1a0039,_0xaa1a0c=$dataSystem['weaponTypes'][_0x3b18d2(0x2c0)];for(let _0x4d280b=0x0;_0x4d280b<_0xaa1a0c;_0x4d280b++){if('sgqxp'===_0x3b18d2(0x5a6))_0x101d8b['BattleCore'][_0x3b18d2(0xb53)][_0x3b18d2(0xb33)](this),this[_0x3b18d2(0x684)](),this[_0x3b18d2(0x15a)]();else{const _0x5c8f10=$dataSystem[_0x3b18d2(0x354)][_0x4d280b];if(_0x5c8f10)continue;$dataSystem[_0x3b18d2(0x354)][_0x4d280b]=JsonEx[_0x3b18d2(0x5ee)]($dataSystem['attackMotions'][0x0]);}}},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x790)]=function(){const _0x2fdc73=_0x1a0039,_0x3eb195=VisuMZ[_0x2fdc73(0xa1e)][_0x2fdc73(0x4ce)];if(_0x3eb195[_0x2fdc73(0xa92)]['PopupPosition']===undefined){if('nQRhh'===_0x2fdc73(0xa39))_0x3eb195['Damage'][_0x2fdc73(0xb56)]='base';else{if(!_0x2fe6a4[_0x2fdc73(0x984)]())return;if(!_0x3acbce[_0x2fdc73(0x624)])return;_0xa831e1['ConvertParams'](_0x212624,_0x3b2f5b);const _0x4fe744=_0x48f1a5['getLastPluginCommandInterpreter'](),_0x13e885=_0x1db401[_0x2fdc73(0x2ba)];_0x29775a[_0x2fdc73(0x1cc)](_0x52dd5b['OffsetX'],_0x548db2[_0x2fdc73(0x5f2)],_0x880fd8[_0x2fdc73(0xa62)],_0x38d491[_0x2fdc73(0xaea)]);if(_0x13e885)_0x4fe744[_0x2fdc73(0x295)]('battleCamera');}}if(_0x3eb195[_0x2fdc73(0x429)][_0x2fdc73(0x3aa)]===undefined){if(_0x2fdc73(0x23a)!==_0x2fdc73(0x23a))return![];else _0x3eb195[_0x2fdc73(0x429)][_0x2fdc73(0x3aa)]=![];}_0x3eb195[_0x2fdc73(0x814)]['SmoothImage']===undefined&&('UWVDX'!==_0x2fdc73(0x873)?(_0x3f5dbc['prototype'][_0x2fdc73(0x3e0)][_0x2fdc73(0xb33)](this),this[_0x2fdc73(0x46a)]()):_0x3eb195[_0x2fdc73(0x814)]['SmoothImage']=!![]),_0x3eb195[_0x2fdc73(0x429)][_0x2fdc73(0xb83)]===undefined&&(_0x3eb195[_0x2fdc73(0x429)][_0x2fdc73(0xb83)]=![]),_0x3eb195['Actor'][_0x2fdc73(0x4c5)]===undefined&&(_0x3eb195[_0x2fdc73(0x429)][_0x2fdc73(0x4c5)]=!![]);},VisuMZ[_0x1a0039(0x995)]={},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x6d1)]=function(){const _0x395da4=_0x1a0039;for(const _0x26f8c8 of VisuMZ[_0x395da4(0xa1e)][_0x395da4(0x4ce)]['Damage']['DamageStyleList']){if(_0x395da4(0x575)===_0x395da4(0x575)){if(!_0x26f8c8)continue;const _0x2d3480=_0x26f8c8[_0x395da4(0x530)][_0x395da4(0x8b6)]()['trim']();VisuMZ['DamageStyles'][_0x2d3480]=_0x26f8c8;}else{if(!_0x99eeca['isSceneBattle']())return![];if(!_0x5cf094)return![];if(!_0x3f0aeb[_0x395da4(0x19a)]())return![];if(_0x112180[_0x395da4(0x19a)]()[_0x395da4(0x83c)][_0x395da4(0x7f1)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x3c501d[_0x395da4(0x585)](_0x4ee14b['item']()))return!![];return![];}}},VisuMZ[_0x1a0039(0xa1e)]['RegExp']={},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x244)]=function(){const _0x1c8a96=_0x1a0039,_0x33b804=VisuMZ[_0x1c8a96(0xa1e)][_0x1c8a96(0x706)],_0xb992a3=_0x1c8a96(0x620),_0x49d376=[[_0x1c8a96(0x80b),_0x1c8a96(0x766)],[_0x1c8a96(0x2e5),'POST-']],_0x30ce08=[['%1Apply%2JS',_0x1c8a96(0x3b2)],[_0x1c8a96(0x12f),_0x1c8a96(0x391)]],_0x96eab5=[['',''],[_0x1c8a96(0x6c2),_0x1c8a96(0x597)],['AsTarget','AS\x20TARGET']];for(const _0x558cee of _0x30ce08){if(_0x1c8a96(0x76c)===_0x1c8a96(0x76c))for(const _0x4b0940 of _0x96eab5){for(const _0x48b98a of _0x49d376){if(_0x1c8a96(0xb28)!=='sISQT'){const _0x1353ba=_0x558cee[0x0][_0x1c8a96(0x4a8)](_0x48b98a[0x0],_0x4b0940[0x0]),_0x1527cc=_0x558cee[0x1]['format'](_0x48b98a[0x1],_0x4b0940[0x1])[_0x1c8a96(0x850)](),_0x1dcd51=new RegExp(_0xb992a3[_0x1c8a96(0x4a8)](_0x1527cc),'i');_0x33b804[_0x1353ba]=_0x1dcd51;}else this[_0x1c8a96(0xbee)](_0x2f1a9a,_0x4a44e1['x'],_0xadd81c['y'],_0xc69555);}}else{const _0x313d60=this['battleLayoutStyle']();(_0x313d60===_0x1c8a96(0x459)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow'][_0x1c8a96(0xb30)](),this[_0x1c8a96(0x1b3)][_0x1c8a96(0x6f0)]&&this[_0x1c8a96(0x1b3)][_0x1c8a96(0x65e)](),this['_itemWindow'][_0x1c8a96(0xb30)](),this[_0x1c8a96(0x12b)][_0x1c8a96(0x6f0)]&&this[_0x1c8a96(0x12b)][_0x1c8a96(0x65e)]());}}const _0x52f8be=[[_0x1c8a96(0x33e),_0x1c8a96(0x51c)],['%1EndActionJS','JS\x20%1END\x20ACTION']];for(const _0x3643c2 of _0x52f8be){if(_0x1c8a96(0x413)!=='Pxtrc')for(const _0x3ccbcd of _0x49d376){const _0x5eabd2=_0x3643c2[0x0][_0x1c8a96(0x4a8)](_0x3ccbcd[0x0]),_0x412f9f=_0x3643c2[0x1][_0x1c8a96(0x4a8)](_0x3ccbcd[0x1]),_0x111528=new RegExp(_0xb992a3['format'](_0x412f9f),'i');_0x33b804[_0x5eabd2]=_0x111528;}else return this['battlerSprites']()[_0x1c8a96(0x42d)](_0x4f2c98=>_0x4f2c98[_0x1c8a96(0x1c6)]());}const _0x125175=[['%1StartBattleJS',_0x1c8a96(0x90a)],[_0x1c8a96(0x7a5),_0x1c8a96(0x735)],[_0x1c8a96(0x2e7),_0x1c8a96(0x1d3)],[_0x1c8a96(0x348),_0x1c8a96(0x94e)],['EscapeSuccessJS',_0x1c8a96(0x48b)],[_0x1c8a96(0x3d5),_0x1c8a96(0x2eb)],[_0x1c8a96(0x808),_0x1c8a96(0x1f5)],[_0x1c8a96(0x4db),_0x1c8a96(0x895)],[_0x1c8a96(0x174),_0x1c8a96(0x8db)]];for(const _0x7000bc of _0x125175){if(_0x1c8a96(0x96e)!==_0x1c8a96(0x222))for(const _0x2898cc of _0x49d376){const _0x20ee11=_0x7000bc[0x0][_0x1c8a96(0x4a8)](_0x2898cc[0x0]),_0x35e122=_0x7000bc[0x1][_0x1c8a96(0x4a8)](_0x2898cc[0x1]),_0xe06bc5=new RegExp(_0xb992a3['format'](_0x35e122),'i');_0x33b804[_0x20ee11]=_0xe06bc5;}else this['_targetHomeX']=_0xcadeb0,this[_0x1c8a96(0x494)]=_0x274abd,this[_0x1c8a96(0x41b)]=_0x4cb80a,this[_0x1c8a96(0x810)]=_0x330c1f,this[_0x1c8a96(0x73d)]=_0x3e90d5,_0x50669d<=0x0&&this[_0x1c8a96(0x515)]();}},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x35f)]=function(){const _0x11d220=_0x1a0039,_0x537957=$dataSkills[_0x11d220(0xa48)]($dataItems);for(const _0x31baa1 of _0x537957){if(_0x11d220(0x3ad)!=='mHREu'){if(!_0x31baa1)continue;VisuMZ[_0x11d220(0xa1e)][_0x11d220(0x9f5)](_0x31baa1);}else return _0x50cb41[_0x11d220(0xa1e)][_0x11d220(0x4ce)][_0x11d220(0xa92)]['VarianceFormulaJS'][_0x11d220(0xb33)](this,_0x2f2f75,_0x848308);}},Scene_Boot['prototype'][_0x1a0039(0x6f1)]=function(){const _0x54420e=_0x1a0039,_0x4cb2bc=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x41cff1 of _0x4cb2bc){if(!_0x41cff1)continue;VisuMZ[_0x54420e(0xa1e)][_0x54420e(0x550)](_0x41cff1);}},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0xab5)]=function(){const _0x2d8efb=_0x1a0039,_0x17711e=VisuMZ[_0x2d8efb(0xa1e)][_0x2d8efb(0x4ce)]['Mechanics']['BaseTroopIDs'],_0x361ce5=[];for(const _0x589734 of _0x17711e){if(_0x2d8efb(0x9c2)!==_0x2d8efb(0x85c)){const _0x23df0c=$dataTroops[_0x589734];if(_0x23df0c)_0x361ce5[_0x2d8efb(0xb15)](JsonEx[_0x2d8efb(0x5ee)](_0x23df0c));}else{if(!_0x41dbf5[_0x2d8efb(0x984)]())return;if(!_0x2d333d[_0x2d8efb(0x624)])return;_0x13af2e[_0x2d8efb(0x44a)](_0x4c7a56,_0x49375b);const _0x4a58db=_0x59b3a7[_0x2d8efb(0x572)](),_0x27b894=_0x24fccc[_0x2d8efb(0x207)];if(!_0x4a58db)return;_0x2afd77[_0x2d8efb(0x3b0)](_0x3ca9a1[_0x2d8efb(0xb77)],_0x3aefdd[_0x2d8efb(0x5f7)],_0x4bd951['Duration'],_0x370b4d[_0x2d8efb(0xaea)]);if(_0x27b894)_0x4a58db[_0x2d8efb(0x295)](_0x2d8efb(0x614));}}for(const _0x3172b8 of $dataTroops){if(!_0x3172b8)continue;for(const _0x46e66a of _0x361ce5){if(_0x2d8efb(0xb2b)===_0x2d8efb(0x431)){for(const _0x3ab9a7 of _0x35cc1d){_0x3ab9a7['match'](_0x56ec60);const _0x14539d=_0x3a4950(_0x6c2a20['$1'])[_0x2d8efb(0xaf3)](',')['map'](_0x1564a1=>_0x267811(_0x1564a1)['toUpperCase']()['trim']());_0x4d9826=_0x37a184[_0x2d8efb(0xa48)](_0x14539d);}!_0x23b43e[_0x2d8efb(0x83c)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x45663b[_0x2d8efb(0x83c)]+=_0x2d8efb(0x22a));;}else{if(_0x46e66a['id']===_0x3172b8['id'])continue;_0x3172b8['pages']=_0x3172b8[_0x2d8efb(0x9f8)][_0x2d8efb(0xa48)](_0x46e66a[_0x2d8efb(0x9f8)]);}}}},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x7e4)]=function(){const _0xc385e2=_0x1a0039,_0x10d58c=VisuMZ['BattleCore'][_0xc385e2(0x4ce)][_0xc385e2(0xab1)];if(_0x10d58c[_0xc385e2(0x6ec)]>0x0&&$dataCommonEvents[_0x10d58c[_0xc385e2(0x6ec)]]){const _0x23028a=$dataCommonEvents[_0x10d58c[_0xc385e2(0x6ec)]],_0x4c79ce=_0x23028a['list'][_0xc385e2(0x2c0)]-0x2,_0x119377=_0x23028a[_0xc385e2(0x71c)][_0x4c79ce];if(_0x119377&&_0x119377[_0xc385e2(0x13f)]!==0xe6){const _0x3ed06d={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x1385b0=_0x23028a['list'][_0xc385e2(0x9df)]();_0x23028a['list'][_0xc385e2(0x709)](_0x3ed06d),_0x23028a[_0xc385e2(0x71c)][_0xc385e2(0x709)](_0x1385b0);}}},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0xbbd)]=function(){const _0x1a1c18=_0x1a0039;VisuMZ[_0x1a1c18(0xa1e)][_0x1a1c18(0x12e)](),VisuMZ[_0x1a1c18(0xa1e)][_0x1a1c18(0x934)]($dataSkills),VisuMZ[_0x1a1c18(0xa1e)][_0x1a1c18(0x934)]($dataItems);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x12e)]=function(){const _0x4b95b5=_0x1a0039;VisuMZ[_0x4b95b5(0xa1e)]['_commonEventKey']={};for(const _0x21f9c5 of $dataCommonEvents){if(!_0x21f9c5)continue;if(_0x21f9c5[_0x4b95b5(0x192)][_0x4b95b5(0x7f1)](/\[(.*)\]/i)){if('SBxiA'!==_0x4b95b5(0x27e)){let _0x16e722=String(RegExp['$1'])[_0x4b95b5(0x8ef)](/,/g,'')[_0x4b95b5(0x8b6)]()[_0x4b95b5(0x850)]();VisuMZ[_0x4b95b5(0xa1e)][_0x4b95b5(0x199)][_0x16e722]=_0x21f9c5['id'];}else{this[_0x4b95b5(0x547)]=this[_0x4b95b5(0x91b)]()['name']();const _0x1dae00=this['textSizeEx'](this[_0x4b95b5(0x547)])[_0x4b95b5(0x926)],_0x13d875=_0x351032['round']((this['innerWidth']-_0x1dae00)/0x2);this[_0x4b95b5(0xbee)](this[_0x4b95b5(0x547)],_0x13d875,0x0,_0x1dae00+0x8);}}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x934)]=function(_0x3ef7e6){const _0x1b8944=_0x1a0039;for(const _0xd75b3f of _0x3ef7e6){if(!_0xd75b3f)continue;VisuMZ['BattleCore'][_0x1b8944(0xb97)](_0xd75b3f);}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xb97)]=function(_0x483fb4){const _0x54ab7f=_0x1a0039;if(!_0x483fb4)return;if(!_0x483fb4[_0x54ab7f(0xae7)])return;VisuMZ[_0x54ab7f(0xa1e)][_0x54ab7f(0x199)]=VisuMZ[_0x54ab7f(0xa1e)][_0x54ab7f(0x199)]||{};const _0x217158=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x2e3f5d=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0xb5a957=[];const _0x242a76=_0x483fb4['note'][_0x54ab7f(0x7f1)](_0x217158);if(_0x242a76){for(const _0x1a4d24 of _0x242a76){if(_0x54ab7f(0x400)===_0x54ab7f(0x400)){_0x1a4d24[_0x54ab7f(0x7f1)](_0x217158);const _0x58497c=String(RegExp['$1'])[_0x54ab7f(0xaf3)](',')[_0x54ab7f(0x73b)](_0x51c251=>String(_0x51c251)[_0x54ab7f(0x8b6)]()[_0x54ab7f(0x850)]());_0xb5a957=_0xb5a957['concat'](_0x58497c);}else return this[_0x54ab7f(0x31a)]()&&!this[_0x54ab7f(0x57e)]()?this[_0x54ab7f(0x8ea)]():_0x304021['BattleCore'][_0x54ab7f(0x41a)]['call'](this);}!_0x483fb4[_0x54ab7f(0x83c)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x483fb4[_0x54ab7f(0x83c)]+=_0x54ab7f(0x22a));;}if(_0x483fb4[_0x54ab7f(0x83c)][_0x54ab7f(0x7f1)](_0x2e3f5d)){const _0x417ac6=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x54ab7f(0x73b)](_0x3c8693=>String(_0x3c8693)[_0x54ab7f(0x8b6)]()['trim']());_0xb5a957=_0xb5a957[_0x54ab7f(0xa48)](_0x417ac6);!_0x483fb4[_0x54ab7f(0x83c)][_0x54ab7f(0x7f1)](/<CUSTOM ACTION SEQUENCE>/i)&&('ewWOU'===_0x54ab7f(0x5c0)?_0x119f4c=_0x1ecbd8['CastCertain']:_0x483fb4[_0x54ab7f(0x83c)]+=_0x54ab7f(0x22a));;}for(const _0x42cd92 of _0xb5a957){if(VisuMZ[_0x54ab7f(0xa1e)][_0x54ab7f(0x199)][_0x42cd92]){if(_0x54ab7f(0x37a)==='FJWhM'){const _0x132283=VisuMZ[_0x54ab7f(0xa1e)][_0x54ab7f(0x199)][_0x42cd92],_0x13bd77={'code':0x2c,'dataId':_0x132283,'value1':0x1,'value2':0x0};_0x483fb4[_0x54ab7f(0xae7)][_0x54ab7f(0xb15)](_0x13bd77);}else{this[_0x54ab7f(0x822)]=_0x74ce22;const _0x1cc166=this['name'](),_0x4ee8d7=this[_0x54ab7f(0x63a)](),_0x1c910f=_0x337fb9[_0x54ab7f(0x6d2)][_0x54ab7f(0x576)]();this['setupFont'](),this['bitmap'][_0x54ab7f(0xaf1)](),this[_0x54ab7f(0x3bc)][_0x54ab7f(0x743)](_0x1cc166,0x0,0x0,_0x4ee8d7,_0x1c910f,_0x54ab7f(0x36f));}}}},Scene_Boot[_0x1a0039(0x6d2)][_0x1a0039(0x40a)]=function(){const _0x3c292e=_0x1a0039,_0x18332b=$dataSkills[_0x3c292e(0xa48)]($dataItems);for(const _0x2f3b3a of _0x18332b){if('fgwts'===_0x3c292e(0x5c5))return![];else{if(!_0x2f3b3a)continue;VisuMZ[_0x3c292e(0xa1e)]['Parse_Notetags_Targets'](_0x2f3b3a);}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xaf8)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x1a0039(0xaf8)]=function(_0x540af4){const _0x1af6c9=_0x1a0039;VisuMZ[_0x1af6c9(0xa1e)][_0x1af6c9(0xaf8)]&&VisuMZ[_0x1af6c9(0xa1e)]['ParseActorNotetags']['call'](this,_0x540af4),VisuMZ['BattleCore'][_0x1af6c9(0x550)](_0x540af4);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x450)]=VisuMZ[_0x1a0039(0x450)],VisuMZ[_0x1a0039(0x450)]=function(_0x3b649d){const _0x153f89=_0x1a0039;VisuMZ['BattleCore']['ParseClassNotetags']&&VisuMZ[_0x153f89(0xa1e)][_0x153f89(0x450)][_0x153f89(0xb33)](this,_0x3b649d),VisuMZ[_0x153f89(0xa1e)][_0x153f89(0x550)](_0x3b649d);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x34a)]=VisuMZ[_0x1a0039(0x34a)],VisuMZ[_0x1a0039(0x34a)]=function(_0x9cd9bd){const _0x4d30d4=_0x1a0039;VisuMZ[_0x4d30d4(0xa1e)][_0x4d30d4(0x34a)]&&VisuMZ[_0x4d30d4(0xa1e)][_0x4d30d4(0x34a)][_0x4d30d4(0xb33)](this,_0x9cd9bd),VisuMZ['BattleCore'][_0x4d30d4(0x9f5)](_0x9cd9bd),VisuMZ[_0x4d30d4(0xa1e)]['Parse_Notetags_Targets'](_0x9cd9bd);},VisuMZ[_0x1a0039(0xa1e)]['ParseItemNotetags']=VisuMZ['ParseItemNotetags'],VisuMZ['ParseItemNotetags']=function(_0x2cba61){const _0x412de5=_0x1a0039;VisuMZ['BattleCore'][_0x412de5(0x5d4)]&&VisuMZ[_0x412de5(0xa1e)][_0x412de5(0x5d4)][_0x412de5(0xb33)](this,_0x2cba61),VisuMZ[_0x412de5(0xa1e)][_0x412de5(0x9f5)](_0x2cba61),VisuMZ['BattleCore'][_0x412de5(0x4e7)](_0x2cba61);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x213)]=VisuMZ[_0x1a0039(0x213)],VisuMZ[_0x1a0039(0x213)]=function(_0x3a50d4){const _0x3b197e=_0x1a0039;VisuMZ['BattleCore'][_0x3b197e(0x213)]&&(_0x3b197e(0x48e)!==_0x3b197e(0x7ad)?VisuMZ[_0x3b197e(0xa1e)]['ParseWeaponNotetags'][_0x3b197e(0xb33)](this,_0x3a50d4):(_0x1ece76[_0x3b197e(0x6d2)][_0x3b197e(0x566)][_0x3b197e(0xb33)](this,_0x230191),this['performActionMotions'](_0x4387c1))),VisuMZ[_0x3b197e(0xa1e)]['Parse_Notetags_TraitObjects'](_0x3a50d4);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x527)]=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x1a0039(0x527)]=function(_0x3b8a1f){const _0x40ef19=_0x1a0039;VisuMZ[_0x40ef19(0xa1e)]['ParseArmorNotetags']&&VisuMZ[_0x40ef19(0xa1e)][_0x40ef19(0x527)][_0x40ef19(0xb33)](this,_0x3b8a1f),VisuMZ[_0x40ef19(0xa1e)]['Parse_Notetags_TraitObjects'](_0x3b8a1f);},VisuMZ[_0x1a0039(0xa1e)]['ParseEnemyNotetags']=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x1a0039(0x333)]=function(_0x4815dc){const _0x136d55=_0x1a0039;if(VisuMZ[_0x136d55(0xa1e)][_0x136d55(0x333)]){if(_0x136d55(0xacc)===_0x136d55(0xa73)){this['_partyCommandWindow'][_0x136d55(0x55a)](),this[_0x136d55(0xbd2)]['close']();if(!_0x485a5b[_0x136d55(0xa1e)]['TpbActiveChangeEnabled'])return;if(_0x48ef8c[_0x136d55(0x81c)]&&_0x181458['isCTB']())return;if(_0x46c9ab[_0x136d55(0x87f)]){_0x40501c['_currentActor']['setActionState'](_0x136d55(0xb98));const _0x1b049f=_0x21976b['_currentActor']['battler']();if(_0x1b049f)_0x1b049f[_0x136d55(0x6cb)]();}_0xed709c['_currentActor']=null;}else VisuMZ[_0x136d55(0xa1e)][_0x136d55(0x333)]['call'](this,_0x4815dc);}VisuMZ[_0x136d55(0xa1e)][_0x136d55(0x550)](_0x4815dc);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x60c)]=VisuMZ[_0x1a0039(0x60c)],VisuMZ['ParseStateNotetags']=function(_0x195811){const _0x267f29=_0x1a0039;VisuMZ[_0x267f29(0xa1e)]['ParseStateNotetags']&&VisuMZ[_0x267f29(0xa1e)][_0x267f29(0x60c)][_0x267f29(0xb33)](this,_0x195811),VisuMZ[_0x267f29(0xa1e)][_0x267f29(0x550)](_0x195811);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x9f5)]=function(_0x4f7d60){const _0x2b2b3a=_0x1a0039,_0x175125=['PreApplyJS',_0x2b2b3a(0xaa1),_0x2b2b3a(0x436),'PostDamageJS',_0x2b2b3a(0x783),'PostStartActionJS',_0x2b2b3a(0x3c6),_0x2b2b3a(0xbe0)];for(const _0x102038 of _0x175125){_0x2b2b3a(0x69b)!=='GeHaq'?VisuMZ['BattleCore'][_0x2b2b3a(0x97e)](_0x4f7d60,_0x102038):(_0x10ac90[_0x2b2b3a(0xa1e)]['Game_Battler_clearMotion'][_0x2b2b3a(0xb33)](this),this['clearFreezeMotion']());}const _0x562b85=_0x4f7d60[_0x2b2b3a(0x83c)];_0x562b85[_0x2b2b3a(0x7f1)](/<ALWAYS CRITICAL/i)&&(_0x2b2b3a(0x96c)!=='yCfFY'?_0x4f7d60[_0x2b2b3a(0x4e5)][_0x2b2b3a(0x79e)]=!![]:this['_forcedBattleLayout']=_0x2b2b3a(0x9dc));if(_0x562b85[_0x2b2b3a(0x7f1)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if(_0x2b2b3a(0x681)==='OmlSQ'){if(!_0x49097b[_0x2b2b3a(0x5b5)])return;if(this[_0x2b2b3a(0x9a0)]===_0x1613ce)return;const _0x37792b=_0x28032f[_0x2b2b3a(0xa1e)]['Settings']['HpGauge'],_0x580d96=new _0x3d1cc5();_0x580d96[_0x2b2b3a(0x29d)]['x']=_0x37792b[_0x2b2b3a(0x369)],_0x580d96[_0x2b2b3a(0x29d)]['y']=_0x37792b[_0x2b2b3a(0x194)],_0x580d96[_0x2b2b3a(0x511)]['x']=_0x580d96[_0x2b2b3a(0x511)]['y']=_0x37792b[_0x2b2b3a(0xaec)],this[_0x2b2b3a(0xa60)]=_0x580d96,this['addChild'](this['_hpGaugeSprite']),_0x415c75[_0x2b2b3a(0x6a7)]&&_0x10d81e['addChildToUiContainer'](this[_0x2b2b3a(0xa60)]);}else _0x4f7d60[_0x2b2b3a(0x1c5)]=Math['max'](0x1,Number(RegExp['$1']));}_0x562b85['match'](/<TARGET:[ ](.*)>/i)&&(_0x4f7d60[_0x2b2b3a(0x503)]=String(RegExp['$1'])[_0x2b2b3a(0x8b6)]()[_0x2b2b3a(0x850)]());},VisuMZ['BattleCore'][_0x1a0039(0x550)]=function(_0x430390){const _0x2c603=_0x1a0039,_0x1d68b8=[_0x2c603(0x849),_0x2c603(0xbd1),_0x2c603(0xafb),_0x2c603(0x6f3),'PreApplyAsTargetJS',_0x2c603(0x14b),'PreDamageAsTargetJS',_0x2c603(0x15d),_0x2c603(0x783),_0x2c603(0x4c3),_0x2c603(0x3c6),'PostEndActionJS',_0x2c603(0x869),_0x2c603(0x891),_0x2c603(0x86c),_0x2c603(0x9e7),_0x2c603(0x2e7),_0x2c603(0x348),'EscapeSuccessJS','EscapeFailureJS',_0x2c603(0x529),_0x2c603(0x6fe),_0x2c603(0xadb),_0x2c603(0x2d8),_0x2c603(0x3f9),_0x2c603(0x4e6)];for(const _0x1e3c51 of _0x1d68b8){VisuMZ[_0x2c603(0xa1e)]['createJS'](_0x430390,_0x1e3c51);}},VisuMZ[_0x1a0039(0xa1e)]['Parse_Notetags_Targets']=function(_0x4f0c72){const _0x20605d=_0x1a0039,_0x3187c1=_0x4f0c72[_0x20605d(0x83c)];if(_0x3187c1[_0x20605d(0x7f1)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x368d81=String(RegExp['$1']),_0x1ab0a6=VisuMZ[_0x20605d(0xa1e)]['createKeyJS'](_0x4f0c72,_0x20605d(0x9e9));VisuMZ[_0x20605d(0xa1e)][_0x20605d(0xa0a)](_0x368d81,_0x1ab0a6);}if(_0x3187c1['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x20605d(0x279)!==_0x20605d(0x279))this[_0x20605d(0xa1c)]&&this['_mainSprite'][_0x20605d(0xbb6)](_0x524794);else{const _0x4ac1fd=String(RegExp['$1']),_0x4bb7c9=VisuMZ['BattleCore'][_0x20605d(0x322)](_0x4f0c72,_0x20605d(0x3d8));VisuMZ[_0x20605d(0xa1e)][_0x20605d(0x519)](_0x4ac1fd,_0x4bb7c9);}}},VisuMZ[_0x1a0039(0xa1e)]['JS']={},VisuMZ['BattleCore']['createJS']=function(_0x15eaa1,_0x10720f){const _0x361fc1=_0x1a0039,_0x3ace5c=_0x15eaa1[_0x361fc1(0x83c)];if(_0x3ace5c[_0x361fc1(0x7f1)](VisuMZ['BattleCore'][_0x361fc1(0x706)][_0x10720f])){const _0x1de7cb=RegExp['$1'],_0x41fb9d=_0x361fc1(0x777)[_0x361fc1(0x4a8)](_0x1de7cb),_0x25bcb5=VisuMZ[_0x361fc1(0xa1e)][_0x361fc1(0x322)](_0x15eaa1,_0x10720f);VisuMZ[_0x361fc1(0xa1e)]['JS'][_0x25bcb5]=new Function(_0x41fb9d);}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x322)]=function(_0x389bb7,_0x329a7e){const _0x2e7ef6=_0x1a0039;let _0x123d8d='';if($dataActors['includes'](_0x389bb7))_0x123d8d=_0x2e7ef6(0x219)[_0x2e7ef6(0x4a8)](_0x389bb7['id'],_0x329a7e);if($dataClasses['includes'](_0x389bb7))_0x123d8d=_0x2e7ef6(0x4c0)[_0x2e7ef6(0x4a8)](_0x389bb7['id'],_0x329a7e);if($dataSkills[_0x2e7ef6(0x604)](_0x389bb7))_0x123d8d=_0x2e7ef6(0xa5f)['format'](_0x389bb7['id'],_0x329a7e);if($dataItems[_0x2e7ef6(0x604)](_0x389bb7))_0x123d8d='Item-%1-%2'[_0x2e7ef6(0x4a8)](_0x389bb7['id'],_0x329a7e);if($dataWeapons[_0x2e7ef6(0x604)](_0x389bb7))_0x123d8d=_0x2e7ef6(0x8c3)[_0x2e7ef6(0x4a8)](_0x389bb7['id'],_0x329a7e);if($dataArmors[_0x2e7ef6(0x604)](_0x389bb7))_0x123d8d=_0x2e7ef6(0x73f)[_0x2e7ef6(0x4a8)](_0x389bb7['id'],_0x329a7e);if($dataEnemies[_0x2e7ef6(0x604)](_0x389bb7))_0x123d8d=_0x2e7ef6(0x4e9)[_0x2e7ef6(0x4a8)](_0x389bb7['id'],_0x329a7e);if($dataStates[_0x2e7ef6(0x604)](_0x389bb7))_0x123d8d='State-%1-%2'[_0x2e7ef6(0x4a8)](_0x389bb7['id'],_0x329a7e);return _0x123d8d;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa0a)]=function(_0x1ec4b6,_0x537418){const _0x1b21dd=_0x1a0039,_0x36062a=_0x1b21dd(0x556)[_0x1b21dd(0x4a8)](_0x1ec4b6);VisuMZ[_0x1b21dd(0xa1e)]['JS'][_0x537418]=new Function(_0x36062a);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x519)]=function(_0x2eb037,_0x31c8b9){const _0x5a9ada=_0x1a0039,_0x424427=_0x5a9ada(0x9c7)[_0x5a9ada(0x4a8)](_0x2eb037);VisuMZ[_0x5a9ada(0xa1e)]['JS'][_0x31c8b9]=new Function(_0x424427);},TextManager['autoBattle']=VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x4ce)][_0x1a0039(0xa47)]['CmdTextAutoBattle'],TextManager[_0x1a0039(0x857)]=VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x4ce)][_0x1a0039(0x4e3)][_0x1a0039(0x82a)],TextManager['autoBattleStyle']=VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x4ce)]['AutoBattle'][_0x1a0039(0xa58)],TextManager[_0x1a0039(0x5b5)]=VisuMZ[_0x1a0039(0xa1e)]['Settings'][_0x1a0039(0x6eb)]['Name'],ColorManager[_0x1a0039(0x350)]=function(_0x51f0c3){const _0x4ce559=_0x1a0039;return _0x51f0c3=String(_0x51f0c3),_0x51f0c3[_0x4ce559(0x7f1)](/#(.*)/i)?'#%1'['format'](String(RegExp['$1'])):this['textColor'](Number(_0x51f0c3));},DataManager[_0x1a0039(0x296)]=function(_0x30d360){const _0x49b65c=_0x1a0039;if(_0x30d360['note'][_0x49b65c(0x7f1)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x49b65c(0xa0e)==='KSvUq'){const _0x3efb37=String(RegExp['$1'])['toUpperCase']()[_0x49b65c(0x850)]();if(_0x3efb37==='MANUAL')return _0x49b65c(0xbc8);if(VisuMZ[_0x49b65c(0x995)][_0x3efb37])return _0x3efb37;}else return!![];}const _0x51c298=VisuMZ[_0x49b65c(0xa1e)][_0x49b65c(0x4ce)]['Damage']['DefaultDamageStyle']['toUpperCase']()[_0x49b65c(0x850)]();if(VisuMZ['DamageStyles'][_0x51c298])return _0x51c298;return _0x49b65c(0xbc8);},DataManager['getStypeIdWithName']=function(_0x812735){const _0x3523fb=_0x1a0039;_0x812735=_0x812735['toUpperCase']()[_0x3523fb(0x850)](),this[_0x3523fb(0x67c)]=this[_0x3523fb(0x67c)]||{};if(this['_stypeIDs'][_0x812735])return this[_0x3523fb(0x67c)][_0x812735];for(let _0x42813f=0x1;_0x42813f<0x64;_0x42813f++){if(_0x3523fb(0x3a8)!==_0x3523fb(0x5a3)){if(!$dataSystem['skillTypes'][_0x42813f])continue;let _0x1a1fce=$dataSystem[_0x3523fb(0xb16)][_0x42813f][_0x3523fb(0x8b6)]()['trim']();_0x1a1fce=_0x1a1fce[_0x3523fb(0x8ef)](/\x1I\[(\d+)\]/gi,''),_0x1a1fce=_0x1a1fce['replace'](/\\I\[(\d+)\]/gi,''),this[_0x3523fb(0x67c)][_0x1a1fce]=_0x42813f;}else this[_0x3523fb(0x5d5)]=0x0,this[_0x3523fb(0x853)]=0x0;}return this['_stypeIDs'][_0x812735]||0x0;},DataManager[_0x1a0039(0x22b)]=function(_0x141117){const _0x137609=_0x1a0039;_0x141117=_0x141117['toUpperCase']()[_0x137609(0x850)](),this['_skillIDs']=this[_0x137609(0xa3b)]||{};if(this[_0x137609(0xa3b)][_0x141117])return this[_0x137609(0xa3b)][_0x141117];for(const _0x37e970 of $dataSkills){if(!_0x37e970)continue;this['_skillIDs'][_0x37e970[_0x137609(0x192)][_0x137609(0x8b6)]()[_0x137609(0x850)]()]=_0x37e970['id'];}return this[_0x137609(0xa3b)][_0x141117]||0x0;},DataManager['getEnemyIdWithName']=function(_0x4986a6){const _0x230ad8=_0x1a0039;_0x4986a6=_0x4986a6[_0x230ad8(0x8b6)]()[_0x230ad8(0x850)](),this['_enemyIDs']=this['_enemyIDs']||{};if(this[_0x230ad8(0x509)][_0x4986a6])return this[_0x230ad8(0x509)][_0x4986a6];for(const _0x4f4632 of $dataEnemies){if(_0x230ad8(0x1ca)!==_0x230ad8(0x2be)){if(!_0x4f4632)continue;this[_0x230ad8(0x509)][_0x4f4632[_0x230ad8(0x192)][_0x230ad8(0x8b6)]()[_0x230ad8(0x850)]()]=_0x4f4632['id'];}else{if(!_0x354baa[_0x230ad8(0x984)]())return;_0x2998e7[_0x230ad8(0x44a)](_0x1b5078,_0x2e80ed);const _0x5bac5a=_0x414ff2['_logWindow'],_0x3abf7c=_0x29956b[_0x230ad8(0x793)]&&_0x5ba37e[_0x230ad8(0x259)];_0x5bac5a[_0x230ad8(0x827)](_0x15940b[_0x230ad8(0x72b)]),_0x3abf7c&&_0x556f3c['VisuMZ_4_CombatLog']&&_0x19bd4d[_0x230ad8(0x497)](_0x22f33f[_0x230ad8(0x72b)]||'',_0x1bfe72[_0x230ad8(0x2fb)]||0x0);}}return this[_0x230ad8(0x509)][_0x4986a6]||0x0;},DataManager[_0x1a0039(0x32b)]=function(_0x33bd2e){const _0x178f54=_0x1a0039;_0x33bd2e=_0x33bd2e[_0x178f54(0x8b6)]()['trim'](),this[_0x178f54(0xb7b)]=this[_0x178f54(0xb7b)]||{};if(this[_0x178f54(0xb7b)][_0x33bd2e])return this['_wtypeIDs'][_0x33bd2e];for(let _0x1f489d=0x1;_0x1f489d<0x64;_0x1f489d++){if(!$dataSystem['weaponTypes'][_0x1f489d])continue;let _0x5e8c04=$dataSystem[_0x178f54(0x9d9)][_0x1f489d][_0x178f54(0x8b6)]()[_0x178f54(0x850)]();_0x5e8c04=_0x5e8c04[_0x178f54(0x8ef)](/\x1I\[(\d+)\]/gi,''),_0x5e8c04=_0x5e8c04[_0x178f54(0x8ef)](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x5e8c04]=_0x1f489d;}return this[_0x178f54(0xb7b)]['BARE\x20HANDS']=0x0,this['_wtypeIDs'][_0x33bd2e]||0x0;},DataManager[_0x1a0039(0x957)]=function(_0x389354){const _0x175b13=_0x1a0039,_0x42cf31='\x5cI[%1]%2';let _0x48098b=_0x389354[_0x175b13(0x78c)],_0x5c441a=_0x389354[_0x175b13(0x192)];const _0x32a343=_0x389354['note'];return _0x32a343['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x48098b=Number(RegExp['$1'])),_0x32a343['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x5c441a=String(RegExp['$1'])),_0x42cf31[_0x175b13(0x4a8)](_0x48098b,_0x5c441a);},DataManager[_0x1a0039(0x8d0)]=function(_0x265130){const _0x377123=_0x1a0039;if(_0x265130['note'][_0x377123(0x7f1)](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if(_0x377123(0x359)!==_0x377123(0x359)){let _0x515324=_0x9ec1aa[_0x377123(0xa71)](_0x446388['VariableHeal']);_0x3d5191[_0x377123(0x225)]<0x0&&(_0x515324+=_0x2d2dae[_0x377123(0xbe1)](_0x5ee9fa['hpDamage'])),_0x3f673a['setValue'](_0x28b9de[_0x377123(0xa8f)],_0x515324);}else return _0x265130['name'];}},DataManager[_0x1a0039(0x981)]=function(_0x511196){const _0x429a49=_0x1a0039;return _0x511196[_0x429a49(0x83c)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x429a49(0x281)!==_0x429a49(0xb37)?_0x511196[_0x429a49(0x78c)]:![];},DataManager[_0x1a0039(0xb5f)]=function(_0x39d772){const _0x2332ee=_0x1a0039,_0x3267ee=$dataEnemies[_0x39d772];if(_0x3267ee){if(_0x2332ee(0xa29)==='EbAgg'){if(_0x3267ee[_0x2332ee(0x83c)][_0x2332ee(0x7f1)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if('odNyg'!==_0x2332ee(0x4a3)){const _0x350540=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x2332ee(0x5a5)](''),_0x52e7f0=this['processRandomizedData'](_0x350540);_0x39d772=this[_0x2332ee(0x374)](_0x52e7f0)||_0x39d772,_0x39d772=DataManager[_0x2332ee(0xb5f)](_0x39d772);}else{const _0x552ff9=_0x6b9e2e[_0x2332ee(0xadc)](_0x35ba88[_0x2332ee(0x8b6)]()[_0x2332ee(0x850)]());_0x552ff9>=0x0&&_0x552ff9<=0x7&&_0x1cf259['addBuff'](_0x552ff9,_0x407452);}}}else return _0x3f54a1[_0x2332ee(0xa1e)]['Window_Options_statusText'][_0x2332ee(0xb33)](this,_0x1f8b1b);}return _0x39d772;},DataManager[_0x1a0039(0x5d8)]=function(_0x1b43b3){const _0xfa1d5f=_0x1a0039;let _0x162927=0x0;const _0x21e6b0={};for(const _0x3c1919 of _0x1b43b3){if('evPxt'===_0xfa1d5f(0x8e5)){if(_0x3c1919[_0xfa1d5f(0x7f1)](/(.*):[ ](\d+)/i)){const _0x3689fb=String(RegExp['$1'])[_0xfa1d5f(0x850)](),_0x33c53a=Number(RegExp['$2']);_0x21e6b0[_0x3689fb]=_0x33c53a,_0x162927+=_0x33c53a;}else{if(_0x3c1919[_0xfa1d5f(0x7f1)](/(.*):[ ](\d+\.?\d+)/i)){const _0x228a2=String(RegExp['$1'])[_0xfa1d5f(0x850)](),_0x271440=Number(RegExp['$2']);_0x21e6b0[_0x228a2]=_0x271440,_0x162927+=_0x271440;}else _0x3c1919!==''&&(_0xfa1d5f(0x504)===_0xfa1d5f(0x504)?(_0x21e6b0[_0x3c1919]=0x1,_0x162927++):_0x5da44b['bitmap']=_0x5195d0[_0xfa1d5f(0x523)]);}}else _0x53ee42=_0x41c347[_0xfa1d5f(0x68a)]()[_0xfa1d5f(0x59b)],_0x129d41=_0x43ce1d[_0xfa1d5f(0x68a)]()[_0xfa1d5f(0xab6)];}if(_0x162927<=0x0)return'';let _0x1447f9=Math[_0xfa1d5f(0x16a)]()*_0x162927;for(const _0x12f05a in _0x21e6b0){_0x1447f9-=_0x21e6b0[_0x12f05a];if(_0x1447f9<=0x0)return _0x12f05a;}return'';},DataManager[_0x1a0039(0x585)]=function(_0x302396){const _0x282058=_0x1a0039;if(!_0x302396)return![];if(!VisuMZ[_0x282058(0xa1e)][_0x282058(0x4ce)][_0x282058(0x36e)][_0x282058(0x901)])return![];if(_0x302396[_0x282058(0x83c)][_0x282058(0x7f1)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x302396['note'][_0x282058(0x7f1)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x35f18c of _0x302396['effects']){if(!_0x35f18c)continue;if(_0x35f18c[_0x282058(0x13f)]===Game_Action[_0x282058(0x46d)])return!![];}return![];},DataManager[_0x1a0039(0x613)]=function(_0x2c1565){const _0x374224=_0x1a0039,_0x558116=$dataTroops[_0x2c1565];if(!_0x558116)return'';let _0x37ec1f='';_0x37ec1f+=_0x558116[_0x374224(0x192)];for(const _0x24e996 of _0x558116['pages']){for(const _0x172e3b of _0x24e996['list']){if(_0x374224(0x755)==='DuCee'){if(this['_cache'][_0x374224(0x486)]!==_0x8f00af)return this[_0x374224(0xab3)][_0x374224(0x486)];return this[_0x374224(0xbc6)]()['note'][_0x374224(0x7f1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x374224(0xab3)]['svAnchorX']=_0x372b69(_0x6a3878['$1']),this[_0x374224(0xab3)][_0x374224(0x486)]=_0x530869(_0x498b52['$2'])):this[_0x374224(0xab3)][_0x374224(0x486)]=_0x8bcbbd[_0x374224(0x6d2)][_0x374224(0x5ca)]['call'](this),this['_cache'][_0x374224(0x486)];}else[0x6c,0x198][_0x374224(0x604)](_0x172e3b['code'])&&(_0x374224(0x4b3)==='wOlVT'?(_0x37ec1f+='\x0a',_0x37ec1f+=_0x172e3b[_0x374224(0x7c3)][0x0]):(_0x16c4af[_0x374224(0x6d2)]['initMembers']['call'](this),this[_0x374224(0x1f4)]=0x0,this[_0x374224(0x723)]=null,this['anchor']['x']=0.5,this[_0x374224(0x29d)]['y']=0x0));}}return _0x37ec1f;},ConfigManager[_0x1a0039(0x8cc)]=ConfigManager[_0x1a0039(0x8cc)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x1a0039(0x44c)]??![],ConfigManager[_0x1a0039(0x5b5)]=ConfigManager[_0x1a0039(0x5b5)]??!![],VisuMZ[_0x1a0039(0xa1e)]['ConfigManager_makeData']=ConfigManager[_0x1a0039(0x9f3)],ConfigManager['makeData']=function(){const _0x3678fe=_0x1a0039,_0x478055=VisuMZ[_0x3678fe(0xa1e)][_0x3678fe(0x171)][_0x3678fe(0xb33)](this);return _0x478055[_0x3678fe(0x8cc)]=this[_0x3678fe(0x8cc)],_0x478055[_0x3678fe(0x44c)]=this[_0x3678fe(0x44c)],_0x478055[_0x3678fe(0x5b5)]=this[_0x3678fe(0x5b5)],_0x478055;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x17d)]=ConfigManager['applyData'],ConfigManager[_0x1a0039(0x251)]=function(_0x387104){const _0x49ac97=_0x1a0039;VisuMZ[_0x49ac97(0xa1e)]['ConfigManager_applyData'][_0x49ac97(0xb33)](this,_0x387104);if(_0x49ac97(0x8cc)in _0x387104)this[_0x49ac97(0x8cc)]=_0x387104[_0x49ac97(0x8cc)];else{if('wNRPI'==='wNRPI')this[_0x49ac97(0x8cc)]=![];else{if(!_0xa2f4b4['isSceneBattle']())return;if(!this[_0x49ac97(0x2ae)])this[_0x49ac97(0xb6c)]();this[_0x49ac97(0x5df)]();const _0x1acd38=this[_0x49ac97(0x68a)]();if(_0x1acd38)_0x1acd38[_0x49ac97(0x852)]();}}_0x49ac97(0x44c)in _0x387104?_0x49ac97(0x3c4)==='GqZZh'?this['hasStaticSvBattler']()?this['updateStaticSvBattlerFrames']():(this[_0x49ac97(0x419)](),_0x26bbac[_0x49ac97(0xa1e)][_0x49ac97(0x997)][_0x49ac97(0xb33)](this)):this[_0x49ac97(0x44c)]=_0x387104[_0x49ac97(0x44c)]:this[_0x49ac97(0x44c)]=![],'visualHpGauge'in _0x387104?this[_0x49ac97(0x5b5)]=_0x387104['visualHpGauge']:this[_0x49ac97(0x5b5)]=!![];},VisuMZ[_0x1a0039(0xa1e)]['BattleManager_initMembers']=BattleManager[_0x1a0039(0x68c)],BattleManager[_0x1a0039(0x68c)]=function(){const _0x2968a2=_0x1a0039;VisuMZ[_0x2968a2(0xa1e)]['BattleManager_initMembers']['call'](this),this[_0x2968a2(0x137)]=[];},BattleManager['refreshStatusWindow']=function(){const _0x91795d=_0x1a0039;if(!SceneManager[_0x91795d(0x984)]())return;const _0x1cd2de=SceneManager[_0x91795d(0x784)]['_statusWindow'];if(_0x1cd2de)_0x1cd2de[_0x91795d(0xa51)]();},BattleManager[_0x1a0039(0x668)]=function(){const _0x53e097=_0x1a0039;if(BattleManager[_0x53e097(0xb4c)]())return'TPB';return _0x53e097(0xa8e);},BattleManager[_0x1a0039(0x5f1)]=function(_0x5916ca){const _0x4ebe52=_0x1a0039;return _0x5916ca=_0x5916ca[_0x4ebe52(0x8b6)]()[_0x4ebe52(0x850)](),this[_0x4ebe52(0x668)]()===_0x5916ca;},BattleManager[_0x1a0039(0x4f4)]=function(){const _0x402c24=_0x1a0039;return this[_0x402c24(0x5f1)]('DTB');},BattleManager['isTurnBased']=function(){const _0x58d598=_0x1a0039;return this[_0x58d598(0x4f4)]();},BattleManager[_0x1a0039(0x6c6)]=function(){const _0x236927=_0x1a0039;return!this[_0x236927(0x64f)]();},BattleManager[_0x1a0039(0x163)]=function(){const _0x5ce74b=_0x1a0039;return!this[_0x5ce74b(0x64f)]()&&!this[_0x5ce74b(0x6c6)]();},BattleManager[_0x1a0039(0x673)]=function(_0x4fe852){const _0x578386=_0x1a0039;$gameParty[_0x578386(0x673)](_0x4fe852),$gameTroop[_0x578386(0x673)](_0x4fe852);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x6d7)]=BattleManager[_0x1a0039(0x42c)],BattleManager[_0x1a0039(0x42c)]=function(){const _0x47759f=_0x1a0039;this[_0x47759f(0x9fb)]=![],this[_0x47759f(0xb01)]=ConfigManager[_0x47759f(0x8cc)],this['processBattleCoreJS'](_0x47759f(0x869)),VisuMZ[_0x47759f(0xa1e)][_0x47759f(0x6d7)]['call'](this),this[_0x47759f(0x673)]('PostStartBattleJS');},BattleManager[_0x1a0039(0x7d8)]=function(_0x2b7bd9){const _0x107da3=_0x1a0039,_0x785dcc=VisuMZ[_0x107da3(0xa1e)][_0x107da3(0x4ce)][_0x107da3(0xab1)];_0x785dcc[_0x107da3(0x72e)]&&VisuMZ[_0x107da3(0xa1e)][_0x107da3(0xbb3)](_0x785dcc[_0x107da3(0x72e)])&&$gameTemp[_0x107da3(0x49b)](_0x785dcc[_0x107da3(0x72e)]);const _0x31fb96='%1Event'[_0x107da3(0x4a8)](_0x2b7bd9);_0x785dcc[_0x31fb96]&&VisuMZ[_0x107da3(0xa1e)][_0x107da3(0xbb3)](_0x785dcc[_0x31fb96])&&$gameTemp[_0x107da3(0x49b)](_0x785dcc[_0x31fb96]);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x2c3)]=BattleManager[_0x1a0039(0x19c)],BattleManager[_0x1a0039(0x19c)]=function(){const _0x437cbd=_0x1a0039;if(this[_0x437cbd(0xa9d)]==='turn'){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x437cbd(0xa1e)]['BattleManager_checkBattleEnd'][_0x437cbd(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x42e)]=BattleManager[_0x1a0039(0x20f)],BattleManager[_0x1a0039(0x20f)]=function(){const _0x250539=_0x1a0039;this[_0x250539(0x673)]('BattleVictoryJS'),VisuMZ[_0x250539(0xa1e)][_0x250539(0x42e)]['call'](this),this[_0x250539(0x7d8)](_0x250539(0x72f));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x2d2)]=BattleManager[_0x1a0039(0x2d3)],BattleManager[_0x1a0039(0x2d3)]=function(){const _0x335ad6=_0x1a0039;this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ['BattleCore'][_0x335ad6(0x2d2)][_0x335ad6(0xb33)](this),this[_0x335ad6(0x7d8)](_0x335ad6(0x4e2));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x50e)]=BattleManager[_0x1a0039(0x8e2)],BattleManager['endBattle']=function(_0x2257c8){const _0x41601d=_0x1a0039;this[_0x41601d(0x9fb)]=!![],this['_autoBattle']=![],this[_0x41601d(0x673)](_0x41601d(0x86c)),VisuMZ[_0x41601d(0xa1e)][_0x41601d(0x50e)][_0x41601d(0xb33)](this,_0x2257c8),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x69e)]=BattleManager[_0x1a0039(0x933)],BattleManager[_0x1a0039(0x933)]=function(){const _0x3747db=_0x1a0039;if(this['isTurnBased']())this['processBattleCoreJS'](_0x3747db(0x529));VisuMZ[_0x3747db(0xa1e)][_0x3747db(0x69e)]['call'](this);if(this['isTurnBased']())this['processBattleCoreJS'](_0x3747db(0x6fe));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa08)]=BattleManager['startAction'],BattleManager[_0x1a0039(0x253)]=function(){const _0x4e8b6c=_0x1a0039,_0x5bd429=this[_0x4e8b6c(0xac9)]['currentAction'](),_0x358677=this[_0x4e8b6c(0xac9)];_0x5bd429&&_0x5bd429[_0x4e8b6c(0x52f)]()===_0x358677&&_0x5bd429[_0x4e8b6c(0x3fc)](_0x4e8b6c(0x783)),VisuMZ['BattleCore'][_0x4e8b6c(0xa08)][_0x4e8b6c(0xb33)](this),_0x5bd429&&_0x5bd429[_0x4e8b6c(0x52f)]()===_0x358677&&_0x5bd429['actionBattleCoreJS'](_0x4e8b6c(0x4c3));},VisuMZ[_0x1a0039(0xa1e)]['BattleManager_endAction']=BattleManager[_0x1a0039(0x3b4)],BattleManager[_0x1a0039(0x3b4)]=function(){const _0x270561=_0x1a0039,_0x4338bc=this['_action'],_0x3f6eb4=this['_subject'];_0x4338bc&&_0x4338bc!==this[_0x270561(0x9a5)]&&_0x4338bc['subject']()===_0x3f6eb4&&(_0x270561(0xa0f)===_0x270561(0x598)?_0x418dca=_0x95ca5c>=_0x43bfb1?_0x1acca8:_0x1745b6:_0x4338bc['actionBattleCoreJS'](_0x270561(0x3c6))),VisuMZ[_0x270561(0xa1e)][_0x270561(0xa1a)][_0x270561(0xb33)](this),_0x4338bc&&_0x4338bc!==this[_0x270561(0x9a5)]&&_0x4338bc[_0x270561(0x52f)]()===_0x3f6eb4&&_0x4338bc[_0x270561(0x3fc)](_0x270561(0xbe0)),this[_0x270561(0xb08)](this[_0x270561(0x142)]()),this[_0x270561(0x9a5)]=this[_0x270561(0x548)];},BattleManager['refreshBattlerMotions']=function(_0x2d32af){const _0x17528d=_0x1a0039;for(const _0x5c919a of _0x2d32af){if(_0x17528d(0x9a6)===_0x17528d(0x9a6)){if(!_0x5c919a)continue;if(!_0x5c919a[_0x17528d(0x68a)]())continue;_0x5c919a['battler']()['refreshMotion']();}else this[_0x17528d(0x181)](_0x4fe38a,_0x46645d);}},BattleManager[_0x1a0039(0x9d6)]=function(){const _0x528fb7=_0x1a0039;!this[_0x528fb7(0xa33)][_0x528fb7(0x382)]()&&this[_0x528fb7(0x3b4)]();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x55b)]=function(){const _0x220fff=_0x1a0039;this[_0x220fff(0x475)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x7f208e=VisuMZ[_0x220fff(0x75e)]['Settings']['States'];_0x7f208e&&_0x7f208e[_0x220fff(0xbdc)]===![]&&this[_0x220fff(0x33d)](0x1);}else this[_0x220fff(0x33d)](0x1);this[_0x220fff(0x4bf)]();},BattleManager[_0x1a0039(0x612)]=function(){const _0x31b412=_0x1a0039;this[_0x31b412(0x38e)]=VisuMZ[_0x31b412(0xa1e)]['Settings'][_0x31b412(0xab1)][_0x31b412(0x336)][_0x31b412(0xb33)](this);},VisuMZ['BattleCore'][_0x1a0039(0x298)]=BattleManager[_0x1a0039(0x1e7)],BattleManager[_0x1a0039(0x1e7)]=function(){const _0x2c3bf1=_0x1a0039;this['processBattleCoreJS'](_0x2c3bf1(0x859)),BattleManager['_spriteset'][_0x2c3bf1(0x27d)](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess'][_0x2c3bf1(0xb33)](this),this[_0x2c3bf1(0x7d8)](_0x2c3bf1(0x900));},VisuMZ['BattleCore'][_0x1a0039(0x19e)]=BattleManager['onEscapeFailure'],BattleManager[_0x1a0039(0x274)]=function(){const _0x12a1c3=_0x1a0039;this['processBattleCoreJS']('EscapeFailureJS');const _0x33a740=this[_0x12a1c3(0x38e)];VisuMZ[_0x12a1c3(0xa1e)]['BattleManager_onEscapeFailure'][_0x12a1c3(0xb33)](this),this[_0x12a1c3(0x38e)]=_0x33a740+VisuMZ[_0x12a1c3(0xa1e)]['Settings'][_0x12a1c3(0xab1)][_0x12a1c3(0x7c1)]['call'](this),this[_0x12a1c3(0x7d8)]('EscapeFail');},BattleManager[_0x1a0039(0x8ec)]=function(){const _0x36bddc=_0x1a0039;let _0x49e086=![];if(this[_0x36bddc(0x490)]())for(const _0x464cbe of $gameTroop[_0x36bddc(0xbaa)]()){this[_0x36bddc(0xa33)][_0x36bddc(0xb15)]('addText',TextManager[_0x36bddc(0x99a)][_0x36bddc(0x4a8)](_0x464cbe)),this[_0x36bddc(0xa33)][_0x36bddc(0xb15)](_0x36bddc(0x730)),_0x49e086=!![];}if(this[_0x36bddc(0x76b)])this[_0x36bddc(0xa33)][_0x36bddc(0xb15)](_0x36bddc(0x827),TextManager[_0x36bddc(0x21b)][_0x36bddc(0x4a8)]($gameParty[_0x36bddc(0x192)]())),this[_0x36bddc(0xa33)][_0x36bddc(0xb15)]('wait');else this[_0x36bddc(0x6c5)]&&('LdFuY'==='VxlCh'?_0x14c072=_0x313795:(this['_logWindow'][_0x36bddc(0xb15)](_0x36bddc(0x827),TextManager[_0x36bddc(0x60d)][_0x36bddc(0x4a8)]($gameParty[_0x36bddc(0x192)]())),this['_logWindow'][_0x36bddc(0xb15)](_0x36bddc(0x730))));_0x49e086&&(_0x36bddc(0x698)===_0x36bddc(0x5cc)?(_0x47399c=_0x346600['filter']((_0x301d3e,_0x57e88e,_0x15daf9)=>_0x15daf9[_0x36bddc(0xadc)](_0x301d3e)===_0x57e88e),_0xab393c['isSceneBattle']()&&_0x1c3402[_0x36bddc(0x50a)]()&&(_0x272350=!_0x17f3f6),_0xf185e2[_0x36bddc(0xa1e)][_0x36bddc(0x87a)][_0x36bddc(0xb33)](this,_0x186e9f,_0x37d4a4,_0x60c94),_0x286121[_0x36bddc(0x984)]()&&_0x25e411['_spriteset'][_0x36bddc(0x642)]()):(this[_0x36bddc(0xa33)][_0x36bddc(0xb15)]('wait'),this['_logWindow'][_0x36bddc(0xb15)](_0x36bddc(0xaf1)))),this[_0x36bddc(0xb4c)]()&&this[_0x36bddc(0x26d)]()&&(this[_0x36bddc(0x672)]=![]);},BattleManager[_0x1a0039(0x490)]=function(){const _0x2da4e2=_0x1a0039;if(BattleManager[_0x2da4e2(0xb01)])return![];return VisuMZ[_0x2da4e2(0xa1e)][_0x2da4e2(0x4ce)][_0x2da4e2(0x814)]['EmergeText'];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xaf9)]=BattleManager[_0x1a0039(0x4ac)],BattleManager[_0x1a0039(0x4ac)]=function(){const _0x6cee01=_0x1a0039;VisuMZ['BattleCore']['BattleManager_startInput'][_0x6cee01(0xb33)](this),this[_0x6cee01(0x4f4)]()&&this[_0x6cee01(0x26d)]()&&!this[_0x6cee01(0x6c5)]&&$gameParty[_0x6cee01(0x64c)]()&&this['selectNextCommand']();},BattleManager[_0x1a0039(0x26d)]=function(){const _0x599061=_0x1a0039;return VisuMZ['BattleCore'][_0x599061(0x4ce)][_0x599061(0xa47)][_0x599061(0x228)];},BattleManager['checkTpbInputOpen']=function(){const _0x5edadc=_0x1a0039;this[_0x5edadc(0x655)]()&&this[_0x5edadc(0x72d)]();},VisuMZ[_0x1a0039(0xa1e)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x8d6)],Scene_Battle['prototype'][_0x1a0039(0x8d6)]=function(){const _0x7aa1e0=_0x1a0039;VisuMZ[_0x7aa1e0(0xa1e)]['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager['isTpb']()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x7aa1e0(0x672)]=![],this[_0x7aa1e0(0x480)]());},BattleManager[_0x1a0039(0x153)]=function(_0x5b51b8,_0x4d50de){const _0x341b7f=_0x1a0039;this['_action']['_reflectionTarget']=_0x4d50de,this[_0x341b7f(0xa33)][_0x341b7f(0x59d)](_0x4d50de),this[_0x341b7f(0xa33)][_0x341b7f(0xbb7)](_0x5b51b8,this[_0x341b7f(0x548)]),this['_action'][_0x341b7f(0xbaf)](_0x5b51b8),this['_logWindow'][_0x341b7f(0x703)](_0x5b51b8,_0x5b51b8);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa90)]=BattleManager['makeActionOrders'],BattleManager[_0x1a0039(0x7ca)]=function(){const _0x4a59c8=_0x1a0039;VisuMZ['BattleCore'][_0x4a59c8(0xa90)][_0x4a59c8(0xb33)](this),this['_actionBattlers']=this[_0x4a59c8(0x12c)][_0x4a59c8(0x538)](_0x18d47d=>_0x18d47d&&_0x18d47d[_0x4a59c8(0x567)]());},VisuMZ['BattleCore'][_0x1a0039(0x75b)]=BattleManager[_0x1a0039(0x2e9)],BattleManager[_0x1a0039(0x2e9)]=function(_0x357a4b){const _0x19518b=_0x1a0039;if(this[_0x19518b(0xa9d)]===_0x19518b(0x573))this[_0x19518b(0xb65)]();else{if(this[_0x19518b(0xa9d)]==='forceAction'){if(_0x19518b(0x86f)===_0x19518b(0x546)){if(!_0x1c2be8[_0x19518b(0x969)]()&&this[_0x19518b(0x9a0)]===_0x484d5a){const _0x10b200=_0x407d60[_0x19518b(0x6d2)][_0x19518b(0xa84)]();[_0x19518b(0x9dc),_0x19518b(0x71c),_0x19518b(0x3a9),_0x19518b(0x459)][_0x19518b(0x604)](_0x10b200)&&(this[_0x19518b(0x1f4)]=0x0);}}else this[_0x19518b(0x8e9)]();}else VisuMZ[_0x19518b(0xa1e)][_0x19518b(0x75b)]['call'](this,_0x357a4b);}},BattleManager['prepareCustomActionSequence']=function(){const _0x2e2ba3=_0x1a0039;this['_allTargets']=this[_0x2e2ba3(0x919)]['slice'](0x0),this[_0x2e2ba3(0x33a)]=0x0,this[_0x2e2ba3(0xa7e)]=this[_0x2e2ba3(0x1a8)][0x0]||null,this[_0x2e2ba3(0xa9d)]=_0x2e2ba3(0x573);},BattleManager[_0x1a0039(0xb65)]=function(){const _0x5493be=_0x1a0039;!this[_0x5493be(0x729)]()&&!this[_0x5493be(0xa33)][_0x5493be(0x382)]()&&('pNVCU'===_0x5493be(0x634)?this[_0x5493be(0xa9d)]=_0x5493be(0x1c3):(_0x23b960['BattleCore'][_0x5493be(0x12e)](),_0x1d6ca0[_0x5493be(0xa1e)][_0x5493be(0x934)](_0x51be5f),_0x4db019['BattleCore'][_0x5493be(0x934)](_0x2f4861)));},BattleManager[_0x1a0039(0xa7d)]=function(_0x5254bd){const _0x1272e1=_0x1a0039;this[_0x1272e1(0x12c)][_0x1272e1(0x5a5)](_0x5254bd);if(_0x5254bd===this[_0x1272e1(0xac9)])return;const _0x3f8825=JsonEx[_0x1272e1(0x5ee)](_0x5254bd[_0x1272e1(0xa70)]());this[_0x1272e1(0x137)][_0x1272e1(0xb15)]([_0x5254bd,_0x3f8825]);},BattleManager[_0x1a0039(0xb75)]=function(){},BattleManager[_0x1a0039(0x47f)]=function(){const _0x49968d=_0x1a0039;if(this[_0x49968d(0xb4c)]())this[_0x49968d(0xa9d)]='turn';else this[_0x49968d(0x137)]['length']>0x0?this[_0x49968d(0xa9d)]=_0x49968d(0x75a):_0x49968d(0xa3f)===_0x49968d(0x9c5)?_0x144f75[_0x49968d(0xb15)](_0x201e1e['trueRandomTarget']()):this['startInput']();},BattleManager[_0x1a0039(0x9ec)]=function(){const _0x40259f=_0x1a0039,_0x4506cb=this[_0x40259f(0xac9)];if(_0x4506cb&&this[_0x40259f(0xb4c)]()){if(_0x40259f(0x4d7)===_0x40259f(0x4d7))_0x4506cb['setActionState'](_0x40259f(0xb98));else{const _0x52d3da=_0x4f0357[_0x40259f(0x296)](this['item']()),_0x3c952f=_0x26eb39['DamageStyles'][_0x52d3da];try{return _0x3c952f[_0x40259f(0x22e)]['call'](this,_0x5abe6f);}catch(_0x468844){if(_0x57902e['isPlaytest']())_0x36ef66[_0x40259f(0x3e2)](_0x468844);return _0x3e1c14[_0x40259f(0xa1e)][_0x40259f(0x5d2)][_0x40259f(0xb33)](this);}}}for(;;){const _0x46c816=this[_0x40259f(0x3b8)]();if(!_0x46c816){if(_0x40259f(0xb7d)===_0x40259f(0xb7d))return null;else _0x2733a7['message4']&&(this[_0x40259f(0xb15)](_0x40259f(0x214)),this['push'](_0x40259f(0x5ef)),this[_0x40259f(0xb15)](_0x40259f(0x7c7)),this[_0x40259f(0xb15)]('addText',_0x9e1766[_0x40259f(0x226)][_0x40259f(0x4a8)](_0x408ec2[_0x40259f(0x192)]())),this[_0x40259f(0xb15)]('wait'));}if(_0x46c816[_0x40259f(0x8a7)]()&&_0x46c816[_0x40259f(0x140)]()){if(_0x40259f(0x15c)!=='sBMzA')_0x1b5056-=this[_0x40259f(0x4a5)],_0x22ea76-=this['_jumpHeight'];else return _0x46c816;}}},BattleManager['getNextSubjectFromPool']=function(){const _0x24dbbe=_0x1a0039;if(this[_0x24dbbe(0x137)]['length']>0x0){const _0x5aafde=this[_0x24dbbe(0x137)][_0x24dbbe(0xbb9)](),_0x1d42b3=_0x5aafde[0x0];return _0x1d42b3[_0x24dbbe(0x5fa)]=_0x1d42b3[_0x24dbbe(0x5fa)]||[],_0x1d42b3[_0x24dbbe(0x5fa)][0x0]=_0x5aafde[0x1],_0x1d42b3;}else return this[_0x24dbbe(0x12c)]['shift']();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x353)]=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa7d)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa7d)]=function(_0x254349,_0x5a00d0){const _0x1d75f4=_0x1a0039;VisuMZ[_0x1d75f4(0xa1e)][_0x1d75f4(0x353)][_0x1d75f4(0xb33)](this,_0x254349,_0x5a00d0),this[_0x1d75f4(0x5fa)][this[_0x1d75f4(0x5fa)][_0x1d75f4(0x2c0)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x1a0039(0x6d2)]['command339']=function(_0x2517a8){return this['iterateBattler'](_0x2517a8[0x0],_0x2517a8[0x1],_0x33061d=>{const _0x2db390=_0x5893;if(_0x2db390(0xb8d)==='mmWPC')!_0x33061d[_0x2db390(0x8e7)]()&&(_0x33061d[_0x2db390(0xa7d)](_0x2517a8[0x2],_0x2517a8[0x3]),BattleManager[_0x2db390(0xa7d)](_0x33061d));else return _0x797bc7['status']&&_0x1488ac['description']['includes']('['+_0x3d348e+']');}),!![];},VisuMZ[_0x1a0039(0xa1e)]['Game_Battler_makeSpeed']=Game_Battler[_0x1a0039(0x6d2)]['makeSpeed'],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x6d3)]=function(){const _0x267a31=_0x1a0039;VisuMZ['BattleCore'][_0x267a31(0x679)]['call'](this);if(this[_0x267a31(0x5fa)][_0x267a31(0x2c0)]<=0x0){if(_0x267a31(0xb70)===_0x267a31(0xb70))this[_0x267a31(0x387)]=Number[_0x267a31(0x607)];else return!![];}},VisuMZ['BattleCore'][_0x1a0039(0x734)]=BattleManager['selectNextCommand'],BattleManager[_0x1a0039(0x72d)]=function(){const _0x5d5d26=_0x1a0039;if(this[_0x5d5d26(0xb4c)]()){if(_0x5d5d26(0xa30)===_0x5d5d26(0xbab))return this['needsSelectionBattleCore']();else this['selectNextCommandTpb']();}else{if(_0x5d5d26(0x96b)!=='DMiZM')VisuMZ[_0x5d5d26(0xa1e)][_0x5d5d26(0x734)]['call'](this);else{const _0xf20cd4=_0x589797['item']();this[_0x5d5d26(0x98a)](_0x4103c8,_0xf20cd4),this['push'](_0x5d5d26(0x7b7),_0x1d1394,_0x46ad9c,!![]),this['push']('performActionStart',_0x4d45b5,_0x48b3b2),this[_0x5d5d26(0xb15)](_0x5d5d26(0x449)),this['push'](_0x5d5d26(0x495),_0x6a4cfc,_0x107841),this['push'](_0x5d5d26(0x286));}}},BattleManager[_0x1a0039(0x7c9)]=function(){const _0x4cc3b6=_0x1a0039;if(this[_0x4cc3b6(0x87f)]){if(_0x4cc3b6(0xaaf)===_0x4cc3b6(0xaaf)){if(this['_currentActor'][_0x4cc3b6(0x72d)]()){if(_0x4cc3b6(0x62e)!=='LxMgJ')return;else _0x343a67=_0x4a54c7>=_0x48ae77?_0x4811e9:_0x35f539;}this[_0x4cc3b6(0xa21)](),this[_0x4cc3b6(0xa17)](),!this['_subject']&&!this[_0x4cc3b6(0x87f)]&&SceneManager[_0x4cc3b6(0x784)][_0x4cc3b6(0x8d2)]();}else{if(_0x5a4b27['battleCameraData']()['zoomDuration']>0x0)return!![];this[_0x4cc3b6(0xb6a)]='';}}else!this[_0x4cc3b6(0xac9)]&&this['selectNextActor']();},BattleManager[_0x1a0039(0xa17)]=function(){const _0x27d1bb=_0x1a0039;if(!this[_0x27d1bb(0x655)]()||this[_0x27d1bb(0x699)]()){if(this[_0x27d1bb(0x61c)]){if(!$gameParty[_0x27d1bb(0x355)]()[_0x27d1bb(0x604)](this[_0x27d1bb(0x61c)])){if('cmqCz'!=='cmqCz')return _0x1c7dd5[_0x27d1bb(0x377)]()['deadMembers']();else this[_0x27d1bb(0x61c)]=null;}}!this[_0x27d1bb(0x61c)]?_0x27d1bb(0x8ad)==='tkCyM'?(this['cancelActorInput'](),this[_0x27d1bb(0x87f)]=null,this[_0x27d1bb(0x47a)]=![]):_0x359f68=this[_0x27d1bb(0x195)]()[_0x27d1bb(0x40e)]||0x0:this[_0x27d1bb(0x412)]();}},BattleManager[_0x1a0039(0x412)]=function(){const _0x5ea341=_0x1a0039;!$gameParty[_0x5ea341(0x355)]()[_0x5ea341(0x604)](this['_tpbSceneChangeCacheActor'])&&(_0x5ea341(0x4b4)!=='Knwra'?this['_mainSprite']['setHue'](_0x1aa629):this[_0x5ea341(0x61c)]=null),this['_tpbSceneChangeCacheActor']?(this['_currentActor']=this['_tpbSceneChangeCacheActor'],this[_0x5ea341(0x87f)][_0x5ea341(0x9fe)]=_0x5ea341(0x987),this[_0x5ea341(0x47a)]=!![],this['_tpbSceneChangeCacheActor']=null):_0x5ea341(0xac0)===_0x5ea341(0x265)?(_0x12f3e1[_0x5ea341(0xa1e)]['Scene_Battle_startActorSelection'][_0x5ea341(0xb33)](this),this['makeTargetSelectionMoreVisible']()):(this[_0x5ea341(0x8ab)](),this[_0x5ea341(0x87f)]=null,this[_0x5ea341(0x47a)]=![]);},VisuMZ['BattleCore']['BattleManager_isTpbMainPhase']=BattleManager[_0x1a0039(0x6ca)],BattleManager[_0x1a0039(0x6ca)]=function(){const _0x2d8fc1=_0x1a0039;if(this[_0x2d8fc1(0xa9d)]==='custom')return this[_0x2d8fc1(0x665)]();else{if(_0x2d8fc1(0xb79)===_0x2d8fc1(0x59c))_0x339e6c[_0x2d8fc1(0xa1e)]['Scene_Battle_initialize'][_0x2d8fc1(0xb33)](this),this[_0x2d8fc1(0x9ed)]();else return VisuMZ['BattleCore'][_0x2d8fc1(0xb82)][_0x2d8fc1(0xb33)](this);}},BattleManager[_0x1a0039(0x665)]=function(){const _0x4e7030=_0x1a0039;return this[_0x4e7030(0x847)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x3eb)]=BattleManager['cancelActorInput'],BattleManager[_0x1a0039(0x8ab)]=function(){const _0x24c19a=_0x1a0039;this[_0x24c19a(0xb4c)]()&&this['_phase']===_0x24c19a(0x380)&&(this[_0x24c19a(0x87f)]=null),VisuMZ[_0x24c19a(0xa1e)][_0x24c19a(0x3eb)]['call'](this);},VisuMZ[_0x1a0039(0xa1e)]['BattleManager_inputtingAction']=BattleManager['inputtingAction'],BattleManager['inputtingAction']=function(){const _0x126c56=_0x1a0039,_0x41b459=this['_currentActor'];if(_0x41b459&&!_0x41b459[_0x126c56(0x5de)]()){const _0x2a1607=_0x41b459['_actionInputIndex'];_0x41b459[_0x126c56(0x5fa)][_0x2a1607]=new Game_Action(_0x41b459);}return VisuMZ[_0x126c56(0xa1e)][_0x126c56(0x394)][_0x126c56(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x471)]=BattleManager[_0x1a0039(0xb5e)],BattleManager[_0x1a0039(0xb5e)]=function(_0x34b339){const _0x33d02a=_0x1a0039;if(this[_0x33d02a(0x548)]['isForFriend']())return![];return VisuMZ[_0x33d02a(0xa1e)][_0x33d02a(0x471)][_0x33d02a(0xb33)](this,_0x34b339);},SceneManager[_0x1a0039(0x984)]=function(){const _0x3fdffb=_0x1a0039;return this[_0x3fdffb(0x784)]&&this[_0x3fdffb(0x784)]['constructor']===Scene_Battle;},SceneManager[_0x1a0039(0x50a)]=function(){const _0x51cf7a=_0x1a0039;return Spriteset_Battle[_0x51cf7a(0x6d2)][_0x51cf7a(0x7b9)]();},SceneManager[_0x1a0039(0x237)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x1c9571=_0x1a0039;if(SceneManager[_0x1c9571(0x813)](Scene_Options))return!![];return![];},SceneManager[_0x1a0039(0x8da)]=function(_0x52b5d8){const _0x3e764b=_0x1a0039;if(!SceneManager['isSceneBattle']())return!![];const _0x5c5f31=[_0x3e764b(0x2f0),_0x3e764b(0x4cc)];return _0x5c5f31[_0x3e764b(0x604)](_0x52b5d8[_0x3e764b(0x192)]);},VisuMZ['BattleCore'][_0x1a0039(0xa6a)]=SceneManager[_0x1a0039(0xb15)],SceneManager[_0x1a0039(0xb15)]=function(_0x761c33){const _0x4b1bf3=_0x1a0039;if(!SceneManager[_0x4b1bf3(0x8da)](_0x761c33))return this[_0x4b1bf3(0x3d4)](_0x761c33);VisuMZ[_0x4b1bf3(0xa1e)][_0x4b1bf3(0xa6a)][_0x4b1bf3(0xb33)](this,_0x761c33);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0xa5913b){const _0x2a7f6b=_0x1a0039;if(!$gameTemp[_0x2a7f6b(0x28e)]())return;if(this[_0x2a7f6b(0x799)])return;this[_0x2a7f6b(0x799)]=!![];let _0xc36691='';_0xc36691+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0xc36691+=_0x2a7f6b(0x321)[_0x2a7f6b(0x4a8)](_0xa5913b[_0x2a7f6b(0x192)]),alert(_0xc36691);},VisuMZ['BattleCore'][_0x1a0039(0x87a)]=Game_Temp[_0x1a0039(0x6d2)][_0x1a0039(0x193)],Game_Temp['prototype'][_0x1a0039(0x193)]=function(_0xc37a4c,_0x1dbdf1,_0x2cff5e){const _0x183873=_0x1a0039;_0xc37a4c=_0xc37a4c['filter']((_0x43c988,_0x4f8ede,_0x1ab6e3)=>_0x1ab6e3[_0x183873(0xadc)](_0x43c988)===_0x4f8ede);if(SceneManager[_0x183873(0x984)]()&&SceneManager[_0x183873(0x50a)]()){if(_0x183873(0x2a6)!==_0x183873(0x2a6)){const _0x398dd9=_0x20ad1e['VisuMZ_1_SkillsStatesCore']?_0x237eea[_0x183873(0x75e)][_0x183873(0x4ce)][_0x183873(0x3d2)]:_0xc28025[_0x183873(0xa1e)][_0x183873(0x4ce)][_0x183873(0xa15)],_0x1f5c94=_0x4c7b07['magicSkills'][_0x183873(0x604)](_0x2e0c1a),_0x3a0a9e=_0x1f5c94?_0x398dd9[_0x183873(0x5d9)]:_0x398dd9['IconStypeNorm'];_0x4621a5=_0x183873(0xa82)[_0x183873(0x4a8)](_0x3a0a9e,_0x593a65);}else _0x2cff5e=!_0x2cff5e;}VisuMZ['BattleCore'][_0x183873(0x87a)][_0x183873(0xb33)](this,_0xc37a4c,_0x1dbdf1,_0x2cff5e),SceneManager[_0x183873(0x984)]()&&BattleManager[_0x183873(0x942)][_0x183873(0x642)]();},Game_Temp[_0x1a0039(0x6d2)][_0x1a0039(0xbb8)]=function(_0x2d4408){this['_lastPluginCommandInterpreter']=_0x2d4408;},Game_Temp[_0x1a0039(0x6d2)][_0x1a0039(0x572)]=function(){const _0x58a4a3=_0x1a0039;return this[_0x58a4a3(0x31c)];},Game_Temp[_0x1a0039(0x6d2)][_0x1a0039(0x53e)]=function(){const _0x587531=_0x1a0039;this[_0x587531(0x209)]=undefined;},Game_Temp['prototype'][_0x1a0039(0x899)]=function(_0x1cce3e){const _0xdd910c=_0x1a0039;$gameMap&&$dataMap&&$dataMap[_0xdd910c(0x83c)]&&this[_0xdd910c(0xbc0)]($dataMap[_0xdd910c(0x83c)]);const _0x5402d0=$dataTroops[_0x1cce3e];if(_0x5402d0){let _0x3c2676=DataManager[_0xdd910c(0x613)](_0x5402d0['id']);this[_0xdd910c(0xbc0)](_0x3c2676);}},Game_Temp[_0x1a0039(0x6d2)][_0x1a0039(0xbc0)]=function(_0x2b6b23){const _0x24cf0e=_0x1a0039;if(!_0x2b6b23)return;if(_0x2b6b23[_0x24cf0e(0x7f1)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x52e8e1=String(RegExp['$1']);if(_0x52e8e1[_0x24cf0e(0x7f1)](/DEFAULT/i))_0x24cf0e(0x99c)===_0x24cf0e(0x841)?this[_0x24cf0e(0x6ed)]():this[_0x24cf0e(0x209)]='default';else{if(_0x52e8e1['match'](/LIST/i))_0x24cf0e(0x760)!==_0x24cf0e(0xa87)?this[_0x24cf0e(0x209)]=_0x24cf0e(0x71c):this[_0x24cf0e(0x50d)]=!![];else{if(_0x52e8e1[_0x24cf0e(0x7f1)](/XP/i)){if(_0x24cf0e(0xbd4)!==_0x24cf0e(0x966))this[_0x24cf0e(0x209)]='xp';else return _0x24cf0e(0x4cd);}else{if(_0x52e8e1[_0x24cf0e(0x7f1)](/PORTRAIT/i))this['_forcedBattleLayout']='portrait';else{if(_0x52e8e1[_0x24cf0e(0x7f1)](/BORDER/i))this[_0x24cf0e(0x209)]='border';else{if(_0x52e8e1['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported['VisuMZ_3_SideviewBattleUI'])this[_0x24cf0e(0x209)]=_0x24cf0e(0x189);else{if('QAXbJ'===_0x24cf0e(0x83b)){this[_0x24cf0e(0xb15)](_0x24cf0e(0x1be),_0x51f8a3);if(!_0x4c9967['BattleCore'][_0x24cf0e(0x4ce)][_0x24cf0e(0x636)][_0x24cf0e(0x89f)])return;this[_0x24cf0e(0xb15)](_0x24cf0e(0x827),_0xac1da1['magicReflection'][_0x24cf0e(0x4a8)](_0x4e0f48[_0x24cf0e(0x192)]()));}else this[_0x24cf0e(0x209)]=_0x24cf0e(0x9dc);}}}}}}}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa95)]=Game_System[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)],Game_System['prototype'][_0x1a0039(0x3e0)]=function(){const _0x4038a5=_0x1a0039;VisuMZ[_0x4038a5(0xa1e)][_0x4038a5(0xa95)][_0x4038a5(0xb33)](this),this[_0x4038a5(0x2cc)]();},Game_System[_0x1a0039(0x6d2)][_0x1a0039(0x2cc)]=function(){const _0x588656=_0x1a0039;this[_0x588656(0xa24)]=this[_0x588656(0xa24)]||[];},Game_System['prototype'][_0x1a0039(0x3a1)]=function(){const _0xc48c19=_0x1a0039;if(this[_0xc48c19(0xa24)]===undefined)this[_0xc48c19(0x2cc)]();return this[_0xc48c19(0xa24)];},Game_System[_0x1a0039(0x6d2)]['registerDefeatedEnemy']=function(_0x5eef65){const _0x5c8584=_0x1a0039;if(this[_0x5c8584(0xa24)]===undefined)this[_0x5c8584(0x2cc)]();if(!_0x5eef65)return;if(this[_0x5c8584(0xa24)][_0x5c8584(0x604)](_0x5eef65))return;this[_0x5c8584(0xa24)][_0x5c8584(0xb15)](_0x5eef65),this[_0x5c8584(0xa24)][_0x5c8584(0x8b1)]((_0x33d41d,_0x127957)=>_0x33d41d-_0x127957);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x6e9)]=Game_BattlerBase[_0x1a0039(0x6d2)]['addNewState'],Game_BattlerBase[_0x1a0039(0x6d2)]['addNewState']=function(_0x5cb9c5){const _0x4012e5=_0x1a0039,_0x51ef71=this[_0x4012e5(0x140)](),_0x838895=this[_0x4012e5(0xa20)]();VisuMZ[_0x4012e5(0xa1e)][_0x4012e5(0x6e9)][_0x4012e5(0xb33)](this,_0x5cb9c5),this[_0x4012e5(0x795)]()&&_0x51ef71&&this['isDead']()&&(this['_visualHpGauge_JustDied']=!this[_0x4012e5(0x14a)](),$gameSystem[_0x4012e5(0xbd6)](this[_0x4012e5(0x454)]())),SceneManager[_0x4012e5(0x984)]()&&_0x838895!==this[_0x4012e5(0xa20)]()&&('uePNK'!==_0x4012e5(0xb66)?this[_0x4012e5(0x4a4)]=!![]:this['battler']()&&this[_0x4012e5(0x68a)]()[_0x4012e5(0x35c)]());},Game_Enemy['prototype'][_0x1a0039(0x14a)]=function(){const _0x161f8a=_0x1a0039;return $gameSystem[_0x161f8a(0x3a1)]()['includes'](this[_0x161f8a(0x4ff)]);},VisuMZ['BattleCore'][_0x1a0039(0x773)]=Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x62a)],Game_BattlerBase['prototype'][_0x1a0039(0x62a)]=function(_0x5206a9){const _0x276736=_0x1a0039;VisuMZ[_0x276736(0xa1e)][_0x276736(0x773)][_0x276736(0xb33)](this,_0x5206a9),this[_0x276736(0x795)]()&&_0x5206a9===this[_0x276736(0xb02)]()&&this[_0x276736(0x140)]()&&(this[_0x276736(0xb27)]=![]),!this[_0x276736(0x469)]&&!this[_0x276736(0x2d1)]&&SceneManager[_0x276736(0x984)]()&&(_0x276736(0x239)===_0x276736(0x43c)?this[_0x276736(0xb15)]('setActiveWeaponSet',_0x3cb155,_0xb8ccac):this[_0x276736(0x294)]());},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x66c)]=Game_Action['prototype'][_0x1a0039(0xaf1)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0xaf1)]=function(){const _0x2c1613=_0x1a0039;VisuMZ['BattleCore']['Game_Action_clear']['call'](this),this[_0x2c1613(0x543)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x2c1613(0x64d)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x2c1613(0x1c9)]=_0x2c1613(0x9dc);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x3e4)]=function(_0x19f105,_0x5085e6){const _0x318dfa=_0x1a0039;return VisuMZ[_0x318dfa(0xa1e)][_0x318dfa(0x4ce)][_0x318dfa(0xa92)][_0x318dfa(0x14f)][_0x318dfa(0xb33)](this,_0x19f105,_0x5085e6);},Game_Action[_0x1a0039(0x6d2)]['applyVariance']=function(_0x5e0568,_0x2012b0){const _0x59ea59=_0x1a0039;return VisuMZ['BattleCore']['Settings'][_0x59ea59(0xa92)]['VarianceFormulaJS']['call'](this,_0x5e0568,_0x2012b0);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x951)]=function(_0x5618fc,_0x1e47db){const _0x5adb42=_0x1a0039;return VisuMZ[_0x5adb42(0xa1e)][_0x5adb42(0x4ce)][_0x5adb42(0xa92)]['GuardFormulaJS'][_0x5adb42(0xb33)](this,_0x5618fc,_0x1e47db);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0xbb0)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0xbb0)]=function(_0x164966){const _0x414da9=_0x1a0039,_0x43ae43=this['item']()['note'];if(_0x43ae43[_0x414da9(0x7f1)](/<ALWAYS HIT>/i)){if(_0x414da9(0x24b)===_0x414da9(0x24b))return 0x1;else{let _0x4b1ef9=_0x23b2c2[_0x414da9(0xb16)][_0x3f390a];if(!_0x4b1ef9)return;let _0x4a22e7=_0x4b1ef9;const _0x2b8700=this[_0x414da9(0x2ac)]();if(_0x2b8700===_0x414da9(0x144))_0x4a22e7=_0x4a22e7[_0x414da9(0x8ef)](/\x1I\[(\d+)\]/gi,''),_0x4a22e7=_0x4a22e7['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x4b1ef9['match'](/\\I\[(\d+)\]/i)){const _0x509bff=_0x4fe977[_0x414da9(0x97a)]?_0xb53b1c[_0x414da9(0x75e)][_0x414da9(0x4ce)][_0x414da9(0x3d2)]:_0x550b7d[_0x414da9(0xa1e)]['Settings'][_0x414da9(0xa15)],_0xb49d9e=_0x5d1eb3[_0x414da9(0x652)][_0x414da9(0x604)](_0x277f5c),_0x1f5f77=_0xb49d9e?_0x509bff[_0x414da9(0x5d9)]:_0x509bff['IconStypeNorm'];_0x4a22e7=_0x414da9(0xa82)['format'](_0x1f5f77,_0x4b1ef9);}}this[_0x414da9(0x9f7)](_0x4a22e7,'skill',!![],_0x20f467);}}else{if(_0x43ae43[_0x414da9(0x7f1)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if(_0x414da9(0x593)===_0x414da9(0x98d))return _0x1ec76e[_0x414da9(0x4d2)]()[_0x414da9(0x130)](0x0);else{let _0x1c4e48=VisuMZ[_0x414da9(0xa1e)][_0x414da9(0x880)][_0x414da9(0xb33)](this,_0x164966);return _0x1c4e48=this[_0x414da9(0x64d)]['hitRate']*_0x1c4e48+this[_0x414da9(0x64d)][_0x414da9(0x255)],_0x1c4e48;}}}},Game_Action['prototype']['itemCri']=function(_0x277ff3){const _0x33686b=_0x1a0039;if(!this['item']()[_0x33686b(0x4e5)][_0x33686b(0x79e)])return 0x0;let _0x21d64e=VisuMZ['BattleCore'][_0x33686b(0x4ce)][_0x33686b(0xa92)]['CriticalHitRateJS'][_0x33686b(0xb33)](this,_0x277ff3);return _0x21d64e=this[_0x33686b(0x64d)]['criticalHitRate']*_0x21d64e+this[_0x33686b(0x64d)]['criticalHitFlat'],_0x21d64e;},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x395)]=function(_0x2ced4b){const _0x306b3f=_0x1a0039;return _0x2ced4b=VisuMZ[_0x306b3f(0xa1e)]['Settings']['Damage'][_0x306b3f(0x7dd)][_0x306b3f(0xb33)](this,_0x2ced4b),_0x2ced4b=this['_multipliers'][_0x306b3f(0xa32)]*_0x2ced4b+this[_0x306b3f(0x64d)][_0x306b3f(0x562)],_0x2ced4b;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x5d2)]=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x75d)],Game_Action['prototype'][_0x1a0039(0x75d)]=function(_0x20d829){const _0x44c4f2=_0x1a0039;if(this[_0x44c4f2(0x1c9)]!=='default'){if(_0x44c4f2(0x3ed)===_0x44c4f2(0x3ed))return this['customDamageFormula'](_0x20d829);else{if(_0x14464b['_animation']['position']===0x3)return![];}}else return DataManager[_0x44c4f2(0x296)](this[_0x44c4f2(0x19a)]())===_0x44c4f2(0xbc8)?VisuMZ[_0x44c4f2(0xa1e)]['Game_Action_evalDamageFormula'][_0x44c4f2(0xb33)](this,_0x20d829):this[_0x44c4f2(0x9b2)](_0x20d829);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x291)]=function(_0x10bc12){const _0x5c717b=_0x1a0039;this[_0x5c717b(0x1c9)]=_0x10bc12;},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x70a)]=function(_0x113927){const _0x57ecc4=_0x1a0039,_0x3c9469=this['item'](),_0x420bb4=_0x3c9469[_0x57ecc4(0x4e5)][_0x57ecc4(0x674)];_0x3c9469[_0x57ecc4(0x4e5)][_0x57ecc4(0x674)]=this['_customDamageFormula'];let _0x55d275=VisuMZ[_0x57ecc4(0xa1e)]['Game_Action_evalDamageFormula'][_0x57ecc4(0xb33)](this,_0x113927);return _0x3c9469[_0x57ecc4(0x4e5)][_0x57ecc4(0x674)]=_0x420bb4,_0x55d275;},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x5ae)]=function(){const _0x5ecbe4=_0x1a0039;if(this[_0x5ecbe4(0x19a)]()['note'][_0x5ecbe4(0x7f1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x45bc76=String(RegExp['$1'])[_0x5ecbe4(0x8b6)]()[_0x5ecbe4(0x850)]();return _0x45bc76;}return _0x5ecbe4(0xbc8);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x9b2)]=function(_0x3fac7a){const _0x146226=_0x1a0039,_0x42f412=DataManager[_0x146226(0x296)](this[_0x146226(0x19a)]()),_0x10d69c=VisuMZ[_0x146226(0x995)][_0x42f412];try{if(_0x146226(0xac7)===_0x146226(0xac7))return _0x10d69c[_0x146226(0x22e)]['call'](this,_0x3fac7a);else this[_0x146226(0x60a)]['addChild'](new _0x246681());}catch(_0x11a443){if($gameTemp[_0x146226(0x28e)]())console['log'](_0x11a443);return VisuMZ[_0x146226(0xa1e)][_0x146226(0x5d2)][_0x146226(0xb33)](this);}},Game_Action['prototype'][_0x1a0039(0x6c3)]=function(_0x2a6ab0,_0x150eea){const _0x470117=_0x1a0039;if(this[_0x470117(0x9c0)]())return _0x150eea;const _0x2e2ede=this[_0x470117(0x52f)](),_0x305c1a=_0x2a6ab0;let _0xcbf2e7=[],_0xd924cc=[];_0xcbf2e7['push'](this[_0x470117(0x543)][_0x470117(0x1db)],this['_armorPenetration'][_0x470117(0x654)]),_0xd924cc['push'](this['_armorPenetration'][_0x470117(0x9aa)],this['_armorPenetration']['arRedRate']);const _0x38cb29=this[_0x470117(0x313)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x20b5b6=this[_0x470117(0x313)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3f2a11=this[_0x470117(0x313)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x773264=this[_0x470117(0x313)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0xcbf2e7=_0xcbf2e7[_0x470117(0xa48)](_0x305c1a[_0x470117(0x58b)]()[_0x470117(0x73b)](_0x2ae065=>_0x2ae065&&_0x2ae065[_0x470117(0x83c)][_0x470117(0x7f1)](_0x38cb29)?Number(RegExp['$1']):0x0)),_0xd924cc=_0xd924cc[_0x470117(0xa48)](_0x305c1a['traitObjects']()['map'](_0x3851fb=>_0x3851fb&&_0x3851fb['note'][_0x470117(0x7f1)](_0x20b5b6)?Number(RegExp['$1'])/0x64:0x0)),_0xcbf2e7=_0xcbf2e7['concat'](_0x2e2ede[_0x470117(0x58b)]()['map'](_0x29fb78=>_0x29fb78&&_0x29fb78[_0x470117(0x83c)][_0x470117(0x7f1)](_0x3f2a11)?Number(RegExp['$1']):0x0)),_0xd924cc=_0xd924cc[_0x470117(0xa48)](_0x2e2ede[_0x470117(0x58b)]()[_0x470117(0x73b)](_0x3ea6bb=>_0x3ea6bb&&_0x3ea6bb[_0x470117(0x83c)]['match'](_0x773264)?Number(RegExp['$1'])/0x64:0x0));this[_0x470117(0x19a)]()[_0x470117(0x83c)][_0x470117(0x7f1)](_0x3f2a11)&&_0xcbf2e7['push'](Number(RegExp['$1']));if(this[_0x470117(0x19a)]()['note']['match'](_0x773264)){if(_0x470117(0x8ba)===_0x470117(0x8ba))_0xd924cc[_0x470117(0xb15)](Number(RegExp['$1']));else return this[_0x470117(0xa80)](_0x1d3d89);}_0x150eea=_0xcbf2e7[_0x470117(0x54a)]((_0x42327b,_0x56a42f)=>_0x42327b-_0x56a42f,_0x150eea);if(_0x150eea>0x0){if('AKSbK'!==_0x470117(0x2ec)){_0x3bb65e=_0x2b16c0||0x1,_0x3b40cf--;const _0x21a3e0=this[_0x470117(0x241)](),_0x564dd4=_0x21a3e0[_0x27985d]?_0x21a3e0[_0x5b86ef][_0x470117(0x40e)]:0x0;return _0x3f8e1e[_0x470117(0x354)][_0x564dd4];}else _0x150eea=_0xd924cc[_0x470117(0x54a)]((_0x508fef,_0x3393a4)=>_0x508fef*(0x1-_0x3393a4),_0x150eea);}return _0x150eea;},VisuMZ[_0x1a0039(0xa1e)]['Game_Action_executeDamage']=Game_Action['prototype'][_0x1a0039(0xa6c)],Game_Action['prototype']['executeDamage']=function(_0x5b7caa,_0x92bf0c){const _0x33fe87=_0x1a0039;_0x92bf0c=_0x92bf0c*this[_0x33fe87(0x64d)][_0x33fe87(0x1e8)],_0x92bf0c+=this[_0x33fe87(0x64d)][_0x33fe87(0x4c4)]*(_0x92bf0c>=0x0?0x1:-0x1),_0x92bf0c=this[_0x33fe87(0x5f4)](_0x33fe87(0x979),_0x5b7caa,_0x92bf0c,![]),_0x92bf0c=this[_0x33fe87(0x65f)](_0x92bf0c),_0x92bf0c=Math[_0x33fe87(0x917)](_0x92bf0c),this[_0x33fe87(0xb54)]=_0x92bf0c,this['_totalValue']=this[_0x33fe87(0x8d4)]||0x0,this[_0x33fe87(0x8d4)]+=_0x92bf0c,VisuMZ[_0x33fe87(0xa1e)][_0x33fe87(0xbe7)][_0x33fe87(0xb33)](this,_0x5b7caa,_0x92bf0c),this['applyBattleCoreJS']('PostDamage%1JS',_0x5b7caa,_0x92bf0c,!![]);},Game_Action['prototype'][_0x1a0039(0x65f)]=function(_0x234113){const _0x1e11d4=_0x1a0039;if(this[_0x1e11d4(0x288)]())return _0x234113;return _0x234113=this[_0x1e11d4(0xacb)](_0x234113),_0x234113=this[_0x1e11d4(0x188)](_0x234113),_0x234113;},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x288)]=function(){const _0x349ce8=_0x1a0039,_0x1284bb=/<BYPASS DAMAGE CAP>/i;if(this[_0x349ce8(0x19a)]()[_0x349ce8(0x83c)]['match'](_0x1284bb))return!![];if(this[_0x349ce8(0x52f)]()[_0x349ce8(0x58b)]()[_0x349ce8(0x42d)](_0x2c63eb=>_0x2c63eb&&_0x2c63eb['note'][_0x349ce8(0x7f1)](_0x1284bb)))return!![];return!VisuMZ[_0x349ce8(0xa1e)]['Settings'][_0x349ce8(0xa92)]['EnableDamageCap'];},Game_Action['prototype'][_0x1a0039(0xacb)]=function(_0x59f5cf){const _0x8c9628=_0x1a0039;if(!VisuMZ['BattleCore'][_0x8c9628(0x4ce)][_0x8c9628(0xa92)][_0x8c9628(0x492)])return _0x59f5cf;const _0x26a5e2=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x8c9628(0x19a)]()[_0x8c9628(0x83c)][_0x8c9628(0x7f1)](_0x26a5e2))return!![];if(this[_0x8c9628(0x52f)]()[_0x8c9628(0x58b)]()['some'](_0x2db8b9=>_0x2db8b9&&_0x2db8b9[_0x8c9628(0x83c)]['match'](_0x26a5e2)))return!![];const _0x233966=_0x59f5cf<0x0?-0x1:0x1;_0x59f5cf=Math['abs'](_0x59f5cf);let _0x435a42=this[_0x8c9628(0x52f)]()['softDamageCapRate']();if(this[_0x8c9628(0x19a)]()['note'][_0x8c9628(0x7f1)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)){if('GnhWx'!==_0x8c9628(0x7ea))_0x435a42+=Number(RegExp['$1'])/0x64;else{if(this[_0x8c9628(0x15b)]<=0x0)return;const _0x26792d=this[_0x8c9628(0x15b)],_0x99e900=this[_0x8c9628(0x35e)],_0x56fed3=this['_floatEasing'];_0x3e552d['VisuMZ_0_CoreEngine']?this[_0x8c9628(0x4a5)]=this[_0x8c9628(0x4f3)](this[_0x8c9628(0x4a5)],this[_0x8c9628(0x43d)],_0x26792d,_0x99e900,_0x56fed3):this[_0x8c9628(0x4a5)]=(this[_0x8c9628(0x4a5)]*(_0x26792d-0x1)+this['_targetFloatHeight'])/_0x26792d;this[_0x8c9628(0x15b)]--;if(this['_floatDuration']<=0x0)this[_0x8c9628(0xb42)]();}}_0x435a42=_0x435a42['clamp'](0.01,0x1);const _0x393822=this['getHardDamageCap'](),_0x3b17de=_0x435a42*_0x393822;if(_0x59f5cf>_0x3b17de&&_0x393822>_0x3b17de){if(_0x8c9628(0x4f1)!==_0x8c9628(0x7fd)){_0x59f5cf-=_0x3b17de;const _0x271e0a=VisuMZ['BattleCore']['Settings'][_0x8c9628(0xa92)][_0x8c9628(0xb96)],_0x197f4e=Math[_0x8c9628(0x8ae)](0x1-_0x59f5cf/((_0x393822-_0x3b17de)*_0x271e0a+_0x59f5cf),0.01);_0x59f5cf*=_0x197f4e,_0x59f5cf+=_0x3b17de;}else this[_0x8c9628(0x9e3)](),this['addAutoBattleCommand'](),this[_0x8c9628(0xa25)](),this[_0x8c9628(0x415)](),this[_0x8c9628(0x972)]();}return _0x59f5cf*_0x233966;},Game_Action['prototype'][_0x1a0039(0xba2)]=function(){const _0x387f15=_0x1a0039;if(this['item']()[_0x387f15(0x83c)][_0x387f15(0x7f1)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x387f15(0x4df)==='GOQiF')return Number(RegExp['$1']);else _0x570ec7[_0x387f15(0x1cc)](0x0,0x0,_0x4ef34e[_0x387f15(0xa62)],_0x5f2763[_0x387f15(0xaea)]);}else return this[_0x387f15(0x52f)]()[_0x387f15(0x611)]();},Game_Action[_0x1a0039(0x6d2)]['applyHardDamageCap']=function(_0x1b72bc){const _0x1fa2bf=_0x1a0039;let _0x46e2ce=this[_0x1fa2bf(0xba2)]();return _0x1b72bc['clamp'](-_0x46e2ce,_0x46e2ce);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x293)]=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0xbaf)],Game_Action[_0x1a0039(0x6d2)]['apply']=function(_0x1fe5e1){const _0x4ac90f=_0x1a0039;this['applyBattleCoreJS'](_0x4ac90f(0xbde),_0x1fe5e1,0x0,!![]),VisuMZ[_0x4ac90f(0xa1e)]['Game_Action_apply'][_0x4ac90f(0xb33)](this,_0x1fe5e1),this[_0x4ac90f(0x5f4)]('PostApply%1JS',_0x1fe5e1,this[_0x4ac90f(0xb54)]||0x0,!![]),this['applyResultSwitches'](_0x1fe5e1);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x5f4)]=function(_0x258745,_0x3f9787,_0x572c24,_0x2348e1){const _0x553aa4=_0x1a0039;if(this['_tempBattler']||this['_tempActor'])return;_0x572c24=_0x572c24||0x0;const _0x15d2cf=_0x572c24,_0x5cc50f=VisuMZ[_0x553aa4(0xa1e)][_0x553aa4(0x4ce)][_0x553aa4(0xab1)],_0x35406f=_0x258745[_0x553aa4(0x4a8)]('');if(_0x5cc50f[_0x35406f]){_0x572c24=_0x5cc50f[_0x35406f][_0x553aa4(0xb33)](this,_0x572c24,_0x3f9787);if(_0x2348e1)_0x572c24=_0x15d2cf;}let _0x417691=VisuMZ[_0x553aa4(0xa1e)][_0x553aa4(0x322)](this['item'](),_0x258745[_0x553aa4(0x4a8)](''));if(VisuMZ[_0x553aa4(0xa1e)]['JS'][_0x417691]){_0x572c24=VisuMZ[_0x553aa4(0xa1e)]['JS'][_0x417691][_0x553aa4(0xb33)](this,this[_0x553aa4(0x52f)](),_0x3f9787,this[_0x553aa4(0x19a)](),_0x572c24);if(_0x2348e1)_0x572c24=_0x15d2cf;}for(const _0x418b27 of this[_0x553aa4(0x52f)]()['traitObjects']()){if(_0x553aa4(0x2fc)===_0x553aa4(0x2fc)){if(!_0x418b27)continue;_0x417691=VisuMZ[_0x553aa4(0xa1e)][_0x553aa4(0x322)](_0x418b27,_0x258745[_0x553aa4(0x4a8)](_0x553aa4(0x6c2)));if(VisuMZ['BattleCore']['JS'][_0x417691]){if(_0x553aa4(0xa12)!==_0x553aa4(0xa12))_0x138351=_0x3598c0['SideviewSelect'];else{_0x572c24=VisuMZ[_0x553aa4(0xa1e)]['JS'][_0x417691][_0x553aa4(0xb33)](this,this[_0x553aa4(0x52f)](),_0x3f9787,_0x418b27,_0x572c24);if(_0x2348e1)_0x572c24=_0x15d2cf;}}}else _0x3b55b3['changeCtbChargeTime'](_0x3440c8);}for(const _0x281902 of _0x3f9787[_0x553aa4(0x58b)]()){if(!_0x281902)continue;_0x417691=VisuMZ[_0x553aa4(0xa1e)]['createKeyJS'](_0x281902,_0x258745[_0x553aa4(0x4a8)](_0x553aa4(0x7a9)));if(VisuMZ[_0x553aa4(0xa1e)]['JS'][_0x417691]){_0x572c24=VisuMZ[_0x553aa4(0xa1e)]['JS'][_0x417691][_0x553aa4(0xb33)](this,this[_0x553aa4(0x52f)](),_0x3f9787,_0x281902,_0x572c24);if(_0x2348e1)_0x572c24=_0x15d2cf;}}return _0x572c24;},Game_Action['prototype'][_0x1a0039(0x3fc)]=function(_0x136cc5){const _0x385027=_0x1a0039,_0x4ada01=this[_0x385027(0x8d4)]||0x0,_0x9fcdaa=VisuMZ[_0x385027(0xa1e)][_0x385027(0x4ce)][_0x385027(0xab1)],_0x2f867f=_0x136cc5['format']('');_0x9fcdaa[_0x2f867f]&&('GRrYy'!==_0x385027(0xb5c)?_0x9fcdaa[_0x2f867f]['call'](this,_0x4ada01):this['_effectsContainer']&&this[_0x385027(0xb20)](this[_0x385027(0x928)]));let _0x477e81=VisuMZ[_0x385027(0xa1e)]['createKeyJS'](this['item'](),_0x136cc5);VisuMZ[_0x385027(0xa1e)]['JS'][_0x477e81]&&(_0x385027(0x5ac)===_0x385027(0x5ac)?VisuMZ[_0x385027(0xa1e)]['JS'][_0x477e81][_0x385027(0xb33)](this,this['subject'](),this[_0x385027(0x52f)](),this[_0x385027(0x19a)](),_0x4ada01):this[_0x385027(0x33d)](0x1));for(const _0x22d49e of this['subject']()[_0x385027(0x58b)]()){if(_0x385027(0x657)==='DgiSE'){if(!_0x22d49e)continue;_0x477e81=VisuMZ[_0x385027(0xa1e)][_0x385027(0x322)](_0x22d49e,_0x136cc5),VisuMZ[_0x385027(0xa1e)]['JS'][_0x477e81]&&VisuMZ[_0x385027(0xa1e)]['JS'][_0x477e81][_0x385027(0xb33)](this,this[_0x385027(0x52f)](),this[_0x385027(0x52f)](),_0x22d49e,_0x4ada01);}else _0x2435f0[_0x385027(0x263)](_0x45479d);}},Game_Action['prototype'][_0x1a0039(0xa7b)]=function(){const _0x4e38d8=_0x1a0039;return VisuMZ['BattleCore'][_0x4e38d8(0x4ce)][_0x4e38d8(0xab1)]['CalcActionSpeedJS'][_0x4e38d8(0xb33)](this);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0xb69)]=function(){const _0xe8a3be=_0x1a0039;return VisuMZ[_0xe8a3be(0xa1e)][_0xe8a3be(0x4ce)][_0xe8a3be(0xab1)][_0xe8a3be(0x2e1)];},Game_Action['prototype'][_0x1a0039(0x57e)]=function(){const _0x5db105=_0x1a0039;return this[_0x5db105(0x19a)]()['note'][_0x5db105(0x7f1)](/<JS TARGETS>/i);},Game_Action[_0x1a0039(0x6d2)]['isBattleCoreTargetScope']=function(){const _0x108019=_0x1a0039;if(!this['_forcing']&&this[_0x108019(0x52f)]()['isConfused']())return![];if(this[_0x108019(0x57e)]())return!![];return typeof this[_0x108019(0x19a)]()['scope']===_0x108019(0x26c);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x41a)]=Game_Action[_0x1a0039(0x6d2)]['isForOpponent'],Game_Action['prototype'][_0x1a0039(0x2e3)]=function(){const _0x3a7d3b=_0x1a0039;if(this[_0x3a7d3b(0x31a)]()&&!this[_0x3a7d3b(0x57e)]())return this['isForOpponentBattleCore']();else{if(_0x3a7d3b(0x9ce)!=='JjNgY')_0x28d7eb[_0x3a7d3b(0xa1e)][_0x3a7d3b(0x3a2)][_0x3a7d3b(0xb33)](this),this[_0x3a7d3b(0xad4)]['autoSelect'](),this[_0x3a7d3b(0x7e5)]();else return VisuMZ[_0x3a7d3b(0xa1e)][_0x3a7d3b(0x41a)][_0x3a7d3b(0xb33)](this);}},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x8ea)]=function(){const _0x519480=_0x1a0039,_0x32f621=this[_0x519480(0x19a)]()[_0x519480(0x503)];return _0x32f621[_0x519480(0x7f1)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore']['Game_Action_isForFriend']=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x8a0)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x8a0)]=function(){const _0xb13242=_0x1a0039;return this[_0xb13242(0x31a)]()&&!this[_0xb13242(0x57e)]()?this[_0xb13242(0x254)]():VisuMZ[_0xb13242(0xa1e)][_0xb13242(0x24a)][_0xb13242(0xb33)](this);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x254)]=function(){const _0x135c2e=_0x1a0039,_0x4cd8fb=this[_0x135c2e(0x19a)]()['scope'];return _0x4cd8fb[_0x135c2e(0x7f1)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x506)]=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0xba0)],Game_Action['prototype']['isForRandom']=function(){const _0x1e1dfa=_0x1a0039;if(this[_0x1e1dfa(0x31a)]()&&!this[_0x1e1dfa(0x57e)]()){if(_0x1e1dfa(0x937)===_0x1e1dfa(0x985))this['startMotion'](_0x7c16aa[_0x1e1dfa(0x195)]()['motionIdle']||_0x1e1dfa(0x5f9));else return this[_0x1e1dfa(0x4c2)]();}else return'KqJyt'===_0x1e1dfa(0x964)?VisuMZ[_0x1e1dfa(0xa1e)]['Game_Action_isForRandom'][_0x1e1dfa(0xb33)](this):_0x446fed[_0x1e1dfa(0x212)]?_0x786a14[_0x1e1dfa(0x82e)](_0x1e1dfa(0xb7a)):_0xbc88e7['BattleCore'][_0x1e1dfa(0x4ce)][_0x1e1dfa(0x4e3)][_0x1e1dfa(0xb7e)];},Game_Action['prototype'][_0x1a0039(0x4c2)]=function(){const _0x1a89b7=_0x1a0039,_0x25f033=this[_0x1a89b7(0x19a)]()['scope'];return _0x25f033[_0x1a89b7(0x7f1)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x728)]=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x3dc)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x3dc)]=function(){const _0x496906=_0x1a0039;return this['isBattleCoreTargetScope']()&&!this[_0x496906(0x57e)]()?this[_0x496906(0x797)]():VisuMZ[_0x496906(0xa1e)]['Game_Action_needsSelection']['call'](this);},Game_Action[_0x1a0039(0x6d2)]['needsSelectionBattleCore']=function(){const _0x3138f0=_0x1a0039,_0x15e057=this['item']()[_0x3138f0(0x503)];if(_0x15e057['match'](/RANDOM/i))return![];if(_0x15e057[_0x3138f0(0x7f1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x15e057['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x3138f0(0x728)][_0x3138f0(0xb33)](this);},VisuMZ['BattleCore'][_0x1a0039(0x456)]=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x385)],Game_Action[_0x1a0039(0x6d2)]['makeTargets']=function(){const _0x58d429=_0x1a0039;let _0x51a64e=[];if(this[_0x58d429(0x31a)]())_0x51a64e=this[_0x58d429(0x76f)]();else{if(_0x58d429(0x9b8)===_0x58d429(0x473))return _0x29587e['BattleCore']['Window_ItemList_maxCols'][_0x58d429(0xb33)](this);else _0x51a64e=VisuMZ[_0x58d429(0xa1e)][_0x58d429(0x456)][_0x58d429(0xb33)](this);}return _0x51a64e=this[_0x58d429(0x559)](_0x51a64e),_0x51a64e;},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x76f)]=function(){const _0xa0b08b=_0x1a0039;let _0x211fbc=[];const _0x43599a=String(this[_0xa0b08b(0x19a)]()[_0xa0b08b(0x503)]),_0x56c8c3=VisuMZ[_0xa0b08b(0xa1e)][_0xa0b08b(0x322)](this[_0xa0b08b(0x19a)](),_0xa0b08b(0x9e9));if(VisuMZ[_0xa0b08b(0xa1e)]['JS'][_0x56c8c3]){_0x211fbc=VisuMZ[_0xa0b08b(0xa1e)][_0xa0b08b(0x456)]['call'](this);const _0x35dd24=VisuMZ['BattleCore'][_0xa0b08b(0x322)](this[_0xa0b08b(0x19a)](),_0xa0b08b(0x9e9));return _0x211fbc=VisuMZ[_0xa0b08b(0xa1e)]['JS'][_0x35dd24][_0xa0b08b(0xb33)](this,this['subject'](),_0x211fbc),this[_0xa0b08b(0x963)](_0x211fbc);}if(_0x43599a['match'](/(\d+) RANDOM ANY/i)){let _0x3c229a=Number(RegExp['$1']);while(_0x3c229a--){const _0x1c5e94=Math[_0xa0b08b(0x6d0)](0x2)===0x0?this[_0xa0b08b(0xbdf)]():this[_0xa0b08b(0x377)]();_0x211fbc[_0xa0b08b(0xb15)](_0x1c5e94['trueRandomTarget']());}return this[_0xa0b08b(0x963)](_0x211fbc);}if(_0x43599a[_0xa0b08b(0x7f1)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x53be7d=Number(RegExp['$1']);while(_0x53be7d--){_0x211fbc[_0xa0b08b(0xb15)](this[_0xa0b08b(0xbdf)]()[_0xa0b08b(0x4d9)]());}return this[_0xa0b08b(0x963)](_0x211fbc);}if(_0x43599a[_0xa0b08b(0x7f1)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0xa0b08b(0x41c)!=='rozCo'){let _0x295e84=Number(RegExp['$1']);while(_0x295e84--){if(_0xa0b08b(0x603)!==_0xa0b08b(0x603)){if(this['_cache'][_0xa0b08b(0xbea)]!==_0x16fedf)return this[_0xa0b08b(0xab3)][_0xa0b08b(0xbea)];let _0x3ce047=_0x5e6347[_0xa0b08b(0xa1e)][_0xa0b08b(0x4ce)][_0xa0b08b(0xa92)][_0xa0b08b(0x66e)];const _0x1f97de=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x10197a=this[_0xa0b08b(0x58b)]()[_0xa0b08b(0x73b)](_0x397b39=>_0x397b39&&_0x397b39[_0xa0b08b(0x83c)][_0xa0b08b(0x7f1)](_0x1f97de)?_0x373edf(_0x362a87['$1'])/0x64:0x0);return _0x3ce047=_0x10197a[_0xa0b08b(0x54a)]((_0x3d7de3,_0x22403c)=>_0x3d7de3+_0x22403c,_0x3ce047),this[_0xa0b08b(0xab3)]['softDamageCap']=_0x3ce047,this['_cache']['softDamageCap'][_0xa0b08b(0x4f6)](0.01,0x1);}else _0x211fbc[_0xa0b08b(0xb15)](this['friendsUnit']()[_0xa0b08b(0x4d9)]());}return this[_0xa0b08b(0x963)](_0x211fbc);}else this[_0xa0b08b(0x853)]=this[_0xa0b08b(0x4f3)](this[_0xa0b08b(0x853)],this[_0xa0b08b(0x5d5)],_0x44d1a1,_0xe93a25,_0x3208de);}if(_0x43599a[_0xa0b08b(0x7f1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0xa0b08b(0x882)===_0xa0b08b(0x1a5)){if(!_0x49e8ac[_0xa0b08b(0x2dd)])return;const _0x736441=_0x254021['_scene'][_0xa0b08b(0x942)];if(!_0x736441)return;_0x348f30[_0xa0b08b(0x44a)](_0x18f8a3,_0x532a95);const _0x56b389=_0x4205de['X']||0x0,_0x2aef99=_0x5c404c['Y']||0x0,_0x545638=_0x5aefa5[_0xa0b08b(0x82f)]||0x0,_0x2c605d=_0x2257ec['Radius']||0x0,_0x455686=_0xce6b37[_0xa0b08b(0xa62)]||0x1,_0x92719c=_0x4bccef[_0xa0b08b(0xaea)]||_0xa0b08b(0x3d0);_0x736441[_0xa0b08b(0x220)](_0x545638,_0x56b389,_0x2aef99,_0x2c605d,_0x455686,_0x92719c);}else return _0x211fbc[_0xa0b08b(0xb15)](...this['friendsUnit']()[_0xa0b08b(0x4d2)]()[_0xa0b08b(0x538)](_0x558c38=>_0x558c38!==this[_0xa0b08b(0x52f)]())),this[_0xa0b08b(0x963)](_0x211fbc);}return VisuMZ[_0xa0b08b(0xa1e)][_0xa0b08b(0x456)]['call'](this);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x835)]=function(_0xadac80){const _0x508e06=_0x1a0039,_0x3783ea=[];for(let _0x11693d=0x0;_0x11693d<this['numTargets']();_0x11693d++){_0x3783ea['push'](_0xadac80[_0x508e06(0x4d9)]());}return _0x3783ea;},Game_Action[_0x1a0039(0x6d2)]['applyTargetFilters']=function(_0x399ce9){const _0x1ddcbd=_0x1a0039;if(!this[_0x1ddcbd(0x19a)]())return _0x399ce9;const _0x18b2f4=this['item']()['note'];return _0x18b2f4['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x399ce9[_0x1ddcbd(0x5a5)](this['subject']()),_0x399ce9;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xaed)]=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x4ef)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x4ef)]=function(_0x41210c,_0x28466b){const _0x1b79fb=_0x1a0039;VisuMZ[_0x1b79fb(0xa1e)][_0x1b79fb(0xaed)][_0x1b79fb(0xb33)](this,_0x41210c,_0x28466b);if(!_0x41210c[_0x1b79fb(0x66b)]())return;for(const _0x5ffd27 of this['subject']()['attackStates']()){if(_0x1b79fb(0x893)!==_0x1b79fb(0x893)){if(this[_0x1b79fb(0x564)]<0xff)this[_0x1b79fb(0x564)]+=0x10;}else{if(_0x5ffd27===_0x41210c[_0x1b79fb(0xb02)]()){if('VLRNZ'!==_0x1b79fb(0x7a4)){let _0x2d560c=_0x28466b[_0x1b79fb(0x8be)];_0x2d560c*=_0x41210c[_0x1b79fb(0x230)](_0x5ffd27),_0x2d560c*=this[_0x1b79fb(0x52f)]()[_0x1b79fb(0xb0b)](_0x5ffd27),_0x2d560c*=this[_0x1b79fb(0xa01)](_0x41210c),Math[_0x1b79fb(0x16a)]()<_0x2d560c&&(_0x1b79fb(0x3c9)!==_0x1b79fb(0x422)?(_0x41210c[_0x1b79fb(0x23c)]=!![],this[_0x1b79fb(0x172)](_0x41210c)):this[_0x1b79fb(0x496)]('missile'));}else{this['battler']()[_0x1b79fb(0x35c)](),this[_0x1b79fb(0x70e)]();return;}}}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x183)]=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x910)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x910)]=function(_0x5f2de8,_0x535461){const _0x425b0d=_0x1a0039;VisuMZ[_0x425b0d(0xa1e)][_0x425b0d(0x183)][_0x425b0d(0xb33)](this,_0x5f2de8,_0x535461);if(!_0x5f2de8['isImmortal']())return;if(_0x535461[_0x425b0d(0xad9)]!==_0x5f2de8[_0x425b0d(0xb02)]())return;let _0x459cf9=_0x535461[_0x425b0d(0x8be)];!this[_0x425b0d(0x9c0)]()&&(_0x459cf9*=_0x5f2de8[_0x425b0d(0x230)](_0x535461[_0x425b0d(0xad9)]),_0x459cf9*=this['lukEffectRate'](_0x5f2de8)),Math['random']()<_0x459cf9&&(_0x5f2de8[_0x425b0d(0x23c)]=!![],this[_0x425b0d(0x172)](_0x5f2de8));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x9c9)]=Game_Action['prototype'][_0x1a0039(0x746)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x746)]=function(){const _0x7a1a3a=_0x1a0039;VisuMZ[_0x7a1a3a(0xa1e)][_0x7a1a3a(0x9c9)][_0x7a1a3a(0xb33)](this),this['applyGlobalCommonEventNotetags'](),this[_0x7a1a3a(0xbbc)]();},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x2bb)]=function(){const _0x2326d7=_0x1a0039;if(!SceneManager[_0x2326d7(0x984)]())return;const _0x3452e7=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x479236=this[_0x2326d7(0x19a)]()[_0x2326d7(0x83c)][_0x2326d7(0x7f1)](_0x3452e7);if(_0x479236)for(const _0x2c9e9c of _0x479236){if(_0x2326d7(0xadd)===_0x2326d7(0xadd)){if(!_0x2c9e9c)continue;_0x2c9e9c[_0x2326d7(0x7f1)](_0x3452e7);const _0x63a8b2=String(RegExp['$1'])[_0x2326d7(0xaf3)](',')['map'](_0x12b207=>String(_0x12b207)[_0x2326d7(0x850)]()),_0x21e2c0=_0x63a8b2[_0x2326d7(0x73b)](_0x463f97=>DataManager[_0x2326d7(0x9ae)](_0x463f97));for(const _0x3d28b7 of _0x21e2c0){if('TmDJj'!==_0x2326d7(0x15e)){const _0x5adf3c=$dataCommonEvents[_0x3d28b7];_0x5adf3c&&$gameTemp[_0x2326d7(0x49b)](_0x3d28b7);}else{const _0x2511f9=[_0x2326d7(0x849),_0x2326d7(0xbd1),_0x2326d7(0xafb),'PostDamageAsUserJS',_0x2326d7(0xba7),_0x2326d7(0x14b),_0x2326d7(0x661),_0x2326d7(0x15d),_0x2326d7(0x783),_0x2326d7(0x4c3),_0x2326d7(0x3c6),'PostEndActionJS',_0x2326d7(0x869),_0x2326d7(0x891),_0x2326d7(0x86c),'PostEndBattleJS',_0x2326d7(0x2e7),_0x2326d7(0x348),'EscapeSuccessJS',_0x2326d7(0x3d5),'PreStartTurnJS',_0x2326d7(0x6fe),_0x2326d7(0xadb),_0x2326d7(0x2d8),_0x2326d7(0x3f9),_0x2326d7(0x4e6)];for(const _0x433e0c of _0x2511f9){_0x2dce6e[_0x2326d7(0xa1e)][_0x2326d7(0x97e)](_0xbb94e4,_0x433e0c);}}}}else _0x510818[_0x2326d7(0x192)]=_0x2a8326(_0x34452e['$1']);}},DataManager['getCommonEventIdWithName']=function(_0x397ebd){const _0x2b77ed=_0x1a0039;_0x397ebd=_0x397ebd[_0x2b77ed(0x8b6)]()[_0x2b77ed(0x850)](),this[_0x2b77ed(0xac8)]=this[_0x2b77ed(0xac8)]||{};if(this[_0x2b77ed(0xac8)][_0x397ebd])return this[_0x2b77ed(0xac8)][_0x397ebd];for(const _0xc13739 of $dataCommonEvents){if(!_0xc13739)continue;let _0x177eb7=_0xc13739[_0x2b77ed(0x192)];_0x177eb7=_0x177eb7['replace'](/\x1I\[(\d+)\]/gi,''),_0x177eb7=_0x177eb7[_0x2b77ed(0x8ef)](/\\I\[(\d+)\]/gi,''),this[_0x2b77ed(0xac8)][_0x177eb7[_0x2b77ed(0x8b6)]()[_0x2b77ed(0x850)]()]=_0xc13739['id'];}return this[_0x2b77ed(0xac8)][_0x397ebd]||0x0;},Game_Action[_0x1a0039(0x6d2)]['resetResultSwitches']=function(){const _0x539d48=_0x1a0039;if(!SceneManager[_0x539d48(0x984)]())return;const _0x4bfac1=VisuMZ[_0x539d48(0xa1e)][_0x539d48(0x4ce)][_0x539d48(0xab1)];_0x4bfac1[_0x539d48(0x184)]&&$gameSwitches[_0x539d48(0x4e0)](_0x4bfac1['SwitchCritical'],![]),_0x4bfac1[_0x539d48(0xa0b)]&&$gameSwitches['setValue'](_0x4bfac1[_0x539d48(0xa0b)],![]),_0x4bfac1[_0x539d48(0x67b)]&&$gameVariables[_0x539d48(0x4e0)](_0x4bfac1[_0x539d48(0x67b)],0x0),_0x4bfac1[_0x539d48(0xa8f)]&&$gameVariables[_0x539d48(0x4e0)](_0x4bfac1[_0x539d48(0xa8f)],0x0);},Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x7a6)]=function(_0x40c1e3){const _0x4f8fb1=_0x1a0039;if(!SceneManager[_0x4f8fb1(0x984)]())return;if(!_0x40c1e3)return;const _0x9e97c=_0x40c1e3[_0x4f8fb1(0x246)](),_0x2d79f0=VisuMZ[_0x4f8fb1(0xa1e)][_0x4f8fb1(0x4ce)][_0x4f8fb1(0xab1)];_0x2d79f0['SwitchCritical']&&_0x9e97c[_0x4f8fb1(0x79e)]&&$gameSwitches[_0x4f8fb1(0x4e0)](_0x2d79f0[_0x4f8fb1(0x184)],!![]);_0x2d79f0[_0x4f8fb1(0xa0b)]&&(_0x9e97c['missed']||_0x9e97c[_0x4f8fb1(0x8c5)])&&$gameSwitches[_0x4f8fb1(0x4e0)](_0x2d79f0['SwitchMissEvade'],!![]);if(_0x2d79f0[_0x4f8fb1(0x67b)]){let _0x264a66=$gameVariables[_0x4f8fb1(0xa71)](_0x2d79f0['VariableDmg']);if(_0x9e97c['hpDamage']>0x0){if(_0x4f8fb1(0x32c)!==_0x4f8fb1(0x8f7))_0x264a66+=Math['abs'](_0x9e97c[_0x4f8fb1(0x225)]);else{const _0x316189=this['getChildIndex'](this[_0x4f8fb1(0xa04)]);this[_0x4f8fb1(0x5e4)](this['_shadowSprite'],_0x316189),this[_0x4f8fb1(0x4ec)]();}}$gameVariables['setValue'](_0x2d79f0['VariableDmg'],_0x264a66);}if(_0x2d79f0[_0x4f8fb1(0xa8f)]){let _0x58505a=$gameVariables['value'](_0x2d79f0['VariableHeal']);_0x9e97c[_0x4f8fb1(0x225)]<0x0&&(_0x58505a+=Math[_0x4f8fb1(0xbe1)](_0x9e97c[_0x4f8fb1(0x225)])),$gameVariables[_0x4f8fb1(0x4e0)](_0x2d79f0['VariableHeal'],_0x58505a);}},VisuMZ[_0x1a0039(0xa1e)]['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x68c)],Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x68c)]=function(){const _0x3d91d3=_0x1a0039;VisuMZ[_0x3d91d3(0xa1e)][_0x3d91d3(0x1d5)][_0x3d91d3(0xb33)](this),this['initMembersBattleCore']();},Game_BattlerBase['prototype'][_0x1a0039(0x63e)]=function(){const _0x29db7a=_0x1a0039;this[_0x29db7a(0x8eb)]=![];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x61a)]=Game_BattlerBase['prototype'][_0x1a0039(0x466)],Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x466)]=function(){const _0x4cd706=_0x1a0039;this[_0x4cd706(0xab3)]={},VisuMZ['BattleCore'][_0x4cd706(0x61a)][_0x4cd706(0xb33)](this);},Game_BattlerBase['prototype'][_0x1a0039(0xaa4)]=function(_0x35e074){const _0x1b00c8=_0x1a0039;return this[_0x1b00c8(0xab3)]=this['_cache']||{},this[_0x1b00c8(0xab3)][_0x35e074]!==undefined;},Game_BattlerBase['prototype'][_0x1a0039(0x611)]=function(){const _0x504948=_0x1a0039;if(this[_0x504948(0xab3)][_0x504948(0x611)]!==undefined)return this[_0x504948(0xab3)][_0x504948(0x611)];const _0x5b7f73=/<DAMAGE CAP:[ ](\d+)>/i,_0x27d145=this[_0x504948(0x58b)]()[_0x504948(0x73b)](_0xb35073=>_0xb35073&&_0xb35073[_0x504948(0x83c)]['match'](_0x5b7f73)?Number(RegExp['$1']):0x0);let _0x4e27b4=_0x27d145[_0x504948(0x2c0)]>0x0?Math[_0x504948(0x8ae)](..._0x27d145):0x0;if(_0x4e27b4<=0x0)_0x4e27b4=VisuMZ[_0x504948(0xa1e)][_0x504948(0x4ce)][_0x504948(0xa92)]['DefaultHardCap'];return this[_0x504948(0xab3)][_0x504948(0x611)]=_0x4e27b4,this[_0x504948(0xab3)]['hardDamageCap'];},Game_BattlerBase[_0x1a0039(0x6d2)]['softDamageCapRate']=function(){const _0x131860=_0x1a0039;if(this[_0x131860(0xab3)]['softDamageCap']!==undefined)return this[_0x131860(0xab3)][_0x131860(0xbea)];let _0x44e4a7=VisuMZ[_0x131860(0xa1e)][_0x131860(0x4ce)][_0x131860(0xa92)][_0x131860(0x66e)];const _0x446f6c=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4d1fe9=this['traitObjects']()['map'](_0x124f53=>_0x124f53&&_0x124f53[_0x131860(0x83c)][_0x131860(0x7f1)](_0x446f6c)?Number(RegExp['$1'])/0x64:0x0);return _0x44e4a7=_0x4d1fe9[_0x131860(0x54a)]((_0x501e1f,_0x21700d)=>_0x501e1f+_0x21700d,_0x44e4a7),this['_cache']['softDamageCap']=_0x44e4a7,this['_cache']['softDamageCap'][_0x131860(0x4f6)](0.01,0x1);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x690)]=Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x798)],Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x798)]=function(){const _0x222e18=_0x1a0039;VisuMZ['BattleCore']['Game_BattlerBase_die'][_0x222e18(0xb33)](this);if(SceneManager[_0x222e18(0x984)]()){if(_0x222e18(0x9f6)==='vXsEk')this[_0x222e18(0x496)](_0x222e18(0x45e));else return this['basicGaugesY'](_0x38d4fd)-this[_0x222e18(0x6fa)]();}},Game_BattlerBase['prototype'][_0x1a0039(0x68a)]=function(){const _0x654431=_0x1a0039;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x654431(0x784)]['_spriteset'])return null;return SceneManager[_0x654431(0x784)][_0x654431(0x942)][_0x654431(0x65b)](this);},Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x4a1)]=function(){const _0x145c02=_0x1a0039;return VisuMZ[_0x145c02(0xa1e)][_0x145c02(0x4ce)][_0x145c02(0x429)][_0x145c02(0x369)];},Game_BattlerBase[_0x1a0039(0x6d2)]['svBattlerAnchorY']=function(){const _0x32382e=_0x1a0039;return VisuMZ['BattleCore'][_0x32382e(0x4ce)][_0x32382e(0x429)]['AnchorY'];},Game_BattlerBase['prototype'][_0x1a0039(0x4ad)]=function(){const _0x3bd602=_0x1a0039;if(this[_0x3bd602(0x261)]&&this['isActor']()){if(_0x3bd602(0x148)!==_0x3bd602(0x771))return VisuMZ[_0x3bd602(0xa1e)]['Settings'][_0x3bd602(0x429)][_0x3bd602(0x9a2)];else this[_0x3bd602(0x9fb)]=![],this[_0x3bd602(0xb01)]=_0x2a43b6[_0x3bd602(0x8cc)],this[_0x3bd602(0x673)](_0x3bd602(0x869)),_0x13f10a['BattleCore'][_0x3bd602(0x6d7)][_0x3bd602(0xb33)](this),this[_0x3bd602(0x673)](_0x3bd602(0x891));}else{if(_0x3bd602(0x8bd)!==_0x3bd602(0x8bd))_0x2974f2['skew']['x']=this[_0x3bd602(0x4f3)](_0x2753a1[_0x3bd602(0x1ee)]['x'],this['_targetSkewX'],_0x473cd5,_0x266727,_0x167710),_0x24a71e[_0x3bd602(0x1ee)]['y']=this['applyEasing'](_0x3777c[_0x3bd602(0x1ee)]['y'],this[_0x3bd602(0x7e9)],_0x12ea18,_0x4a6045,_0x2bff9c);else return VisuMZ[_0x3bd602(0xa1e)][_0x3bd602(0x4ce)][_0x3bd602(0x814)][_0x3bd602(0x9a2)];}},Game_BattlerBase['prototype'][_0x1a0039(0x641)]=function(){return!![];},Game_BattlerBase['prototype'][_0x1a0039(0xb94)]=function(){return 0x0;},Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x1bb)]=function(){return 0x0;},Game_BattlerBase[_0x1a0039(0x6d2)]['createBattleUIOffsetX']=function(_0x370193){const _0x2df321=_0x1a0039;if(!_0x370193)return 0x0;let _0x3d2f81=0x0;const _0x1b37d3=_0x370193[_0x2df321(0x83c)];return _0x1b37d3[_0x2df321(0x7f1)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x3d2f81+=Number(RegExp['$1'])),_0x1b37d3[_0x2df321(0x7f1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&('pMGhE'!=='pMGhE'?this[_0x2df321(0x496)](_0x2df321(0xa6e)):_0x3d2f81+=Number(RegExp['$1'])),_0x3d2f81;},Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0xbd0)]=function(_0x1e3935){const _0x191411=_0x1a0039;if(!_0x1e3935)return 0x0;let _0x9e38ab=0x0;const _0x530ead=_0x1e3935[_0x191411(0x83c)];if(_0x530ead[_0x191411(0x7f1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x191411(0x4b9)!==_0x191411(0x4b9)){const _0x50d6f0=_0x2c420a[_0x191411(0x5de)](),_0x45da82=this[_0x191411(0xbc6)](this[_0x191411(0x589)]());if(!_0x50d6f0)return!![];if(!_0x50d6f0[_0x191411(0x19a)]())return!![];const _0x522abc=_0x50d6f0[_0x191411(0x19a)]()[_0x191411(0x83c)];if(_0x522abc[_0x191411(0x7f1)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x45da82===_0x4077b6[_0x191411(0xbc6)]())return![];}return!![];}else _0x9e38ab+=Number(RegExp['$1']);}return _0x530ead[_0x191411(0x7f1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x9e38ab+=Number(RegExp['$2'])),_0x9e38ab;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x18c)]=Game_BattlerBase['prototype']['isStateResist'],Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x831)]=function(_0x437748){const _0x33d8e1=_0x1a0039;if(_0x437748===this[_0x33d8e1(0xb02)]()&&this[_0x33d8e1(0x66b)]())return'OMekK'!==_0x33d8e1(0x590)?_0x2c57df[_0x33d8e1(0xa1e)][_0x33d8e1(0x8e0)]['call'](this,_0x58f260):!![];return VisuMZ[_0x33d8e1(0xa1e)][_0x33d8e1(0x18c)][_0x33d8e1(0xb33)](this,_0x437748);},Game_BattlerBase[_0x1a0039(0x6d2)]['isImmortal']=function(){const _0x1ad4cc=_0x1a0039;return this[_0x1ad4cc(0x8eb)];},Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0xbec)]=function(_0x16cdff){const _0x2ff024=_0x1a0039;_0x16cdff?this[_0x2ff024(0x830)]():this[_0x2ff024(0x2b0)]();},Game_BattlerBase['prototype']['addImmortal']=function(){const _0x58bd30=_0x1a0039;if(this[_0x58bd30(0x93b)]())return;this[_0x58bd30(0x8eb)]=!![],this[_0x58bd30(0x23c)]=![];},Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x2b0)]=function(){const _0x53669d=_0x1a0039,_0xe10197=this[_0x53669d(0x140)]();this[_0x53669d(0x8eb)]=![],_0xe10197&&this[_0x53669d(0x23c)]&&this[_0x53669d(0x798)](),this[_0x53669d(0x23c)]=![],this[_0x53669d(0x466)](),this['isDead']()&&_0xe10197&&(this['performCollapse'](),this[_0x53669d(0x294)]());},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x16d)]=Game_Action['prototype'][_0x1a0039(0x17e)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x17e)]=function(){const _0x2184b6=_0x1a0039;return this['item']()?VisuMZ[_0x2184b6(0xa1e)]['Game_Action_numRepeats'][_0x2184b6(0xb33)](this):0x0;},VisuMZ['BattleCore']['Game_Action_setAttack']=Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x8bf)],Game_Action[_0x1a0039(0x6d2)]['setAttack']=function(){const _0x5c8581=_0x1a0039;this[_0x5c8581(0x52f)]()&&this['subject']()[_0x5c8581(0x249)]()?_0x5c8581(0xb45)===_0x5c8581(0xb45)?VisuMZ[_0x5c8581(0xa1e)][_0x5c8581(0x22f)][_0x5c8581(0xb33)](this):_0x461b4e[_0x5c8581(0x95e)]=[]:this[_0x5c8581(0xaf1)]();},VisuMZ[_0x1a0039(0xa1e)]['Game_BattlerBase_canAttack']=Game_BattlerBase['prototype'][_0x1a0039(0x249)],Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x249)]=function(){const _0x34161c=_0x1a0039;if(!this[_0x34161c(0x32a)]())return![];return VisuMZ[_0x34161c(0xa1e)]['Game_BattlerBase_canAttack']['call'](this);},Game_BattlerBase['prototype'][_0x1a0039(0x32a)]=function(){const _0x3b49dd=_0x1a0039;for(const _0xe09891 of this[_0x3b49dd(0x58b)]()){if(_0x3b49dd(0xb8b)===_0x3b49dd(0xb3e))return this[_0x3b49dd(0x6f6)]||0x0;else{if(!_0xe09891)continue;if(_0xe09891[_0x3b49dd(0x83c)][_0x3b49dd(0x7f1)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ['BattleCore'][_0x1a0039(0x953)]=Game_Action['prototype'][_0x1a0039(0x2c9)],Game_Action[_0x1a0039(0x6d2)][_0x1a0039(0x2c9)]=function(){const _0x72c4b9=_0x1a0039;if(this['subject']()[_0x72c4b9(0xa03)]()){if(_0x72c4b9(0x2c7)!==_0x72c4b9(0x2c7))return this['getBattlePortrait']();else VisuMZ[_0x72c4b9(0xa1e)]['Game_Action_setGuard']['call'](this);}},VisuMZ[_0x1a0039(0xa1e)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0xa03)],Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0xa03)]=function(){const _0x26f989=_0x1a0039;if(!this[_0x26f989(0x96a)]())return![];return VisuMZ[_0x26f989(0xa1e)]['Game_BattlerBase_canGuard'][_0x26f989(0xb33)](this);},Game_BattlerBase[_0x1a0039(0x6d2)]['canGuardBattleCore']=function(){const _0x5a62a4=_0x1a0039;for(const _0x55f184 of this[_0x5a62a4(0x58b)]()){if(!_0x55f184)continue;if(_0x55f184[_0x5a62a4(0x83c)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x988)]=function(){const _0x1a45f5=_0x1a0039;for(const _0x44d1fb of this[_0x1a45f5(0x58b)]()){if(!_0x44d1fb)continue;if(_0x44d1fb[_0x1a45f5(0x83c)][_0x1a45f5(0x7f1)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler['prototype']['allowRandomSpeed']=function(){const _0x351311=_0x1a0039;return VisuMZ[_0x351311(0xa1e)]['Settings']['Mechanics'][_0x351311(0x2e1)];},VisuMZ[_0x1a0039(0xa1e)]['Game_Battler_regenerateAll']=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x1c2)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x1c2)]=function(){const _0x188723=_0x1a0039;if(SceneManager[_0x188723(0x984)]()){if(BattleManager[_0x188723(0xb4c)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop[_0x188723(0x1c1)]()<=0x0){if(_0x188723(0x7d6)!==_0x188723(0x3cd))return;else return _0x415775['aliveMembers']();}}}if(SceneManager[_0x188723(0x984)]()&&BattleManager['isTpb']()&&this[_0x188723(0x4e8)]===Graphics['frameCount'])return;this[_0x188723(0x4e8)]=Graphics[_0x188723(0x63c)],SceneManager['isSceneBattle']()&&(_0x188723(0x978)!==_0x188723(0x9d0)?this[_0x188723(0x673)](_0x188723(0x3f9)):this[_0x188723(0x3bc)][_0x188723(0x7a2)]=_0x1cae5b[_0x188723(0xa1e)]['Settings'][_0x188723(0x429)][_0x188723(0x3aa)]),VisuMZ[_0x188723(0xa1e)]['Game_Battler_regenerateAll']['call'](this),SceneManager[_0x188723(0x984)]()&&(this[_0x188723(0xaa8)](),this[_0x188723(0x673)](_0x188723(0x4e6)));},Game_Battler['prototype'][_0x1a0039(0xaa8)]=function(){const _0x298b61=_0x1a0039;if(SceneManager['isSceneBattle']()){if(_0x298b61(0x264)==='CnsGd')for(const _0x270f3d of this['traitObjects']()){if(!_0x270f3d)continue;this['onRegeneratePlayStateAnimation'](_0x270f3d);}else{if(_0x377ec2[_0x298b61(0xaeb)][_0x298b61(0x7b2)]!==0x0)return![];}}},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xabc)]=function(_0x56df36){const _0x356d48=_0x1a0039;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0x356d48(0x984)]())return;if(this['isDead']())return;if(this[_0x356d48(0x405)]())return;if(_0x56df36[_0x356d48(0x83c)][_0x356d48(0x7f1)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x51e6d4=Number(RegExp['$1']);$gameTemp[_0x356d48(0x778)]([this],_0x51e6d4,![],![]);}},VisuMZ['BattleCore']['Game_Battler_startTpbTurn']=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x9e1)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x9e1)]=function(){const _0x1d872e=_0x1a0039;this[_0x1d872e(0x673)](_0x1d872e(0x529)),VisuMZ[_0x1d872e(0xa1e)][_0x1d872e(0xbad)][_0x1d872e(0xb33)](this),this[_0x1d872e(0x673)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0x1a0039(0xb06)]=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x4f0)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x4f0)]=function(){const _0x144088=_0x1a0039;this[_0x144088(0x673)](_0x144088(0xadb)),VisuMZ[_0x144088(0xa1e)][_0x144088(0xb06)]['call'](this),this[_0x144088(0x673)]('PostEndTurnJS');},Game_Battler['prototype'][_0x1a0039(0x673)]=function(_0x891b0e){const _0x379f1c=_0x1a0039;if(this[_0x379f1c(0x2d1)]||this[_0x379f1c(0x469)])return;const _0x58059d=VisuMZ[_0x379f1c(0xa1e)]['Settings'][_0x379f1c(0xab1)];if(_0x58059d[_0x891b0e])_0x58059d[_0x891b0e][_0x379f1c(0xb33)](this);for(const _0x52073e of this['traitObjects']()){if(!_0x52073e)continue;key=VisuMZ['BattleCore'][_0x379f1c(0x322)](_0x52073e,_0x891b0e),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x379f1c(0xa1e)]['JS'][key][_0x379f1c(0xb33)](this,this,this,_0x52073e,0x0);}},Game_Battler[_0x1a0039(0x6d2)]['chantStyle']=function(){const _0x4961a8=_0x1a0039;return VisuMZ[_0x4961a8(0xa1e)][_0x4961a8(0x4ce)][_0x4961a8(0x429)]['ChantStyle']||![];},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x833)]=function(){const _0x310c44=_0x1a0039;if(this['isWaiting']()){if(this[_0x310c44(0x38b)]()){if(this[_0x310c44(0x5fa)][_0x310c44(0x42d)](_0x527572=>_0x527572[_0x310c44(0x19a)]()&&_0x527572['isMagical']())){if('ZNuri'===_0x310c44(0x828))return!![];else{if(!_0x1a1525[_0x310c44(0x969)]())return;_0x487dfc['BattleCore'][_0x310c44(0x8c8)]['call'](this,_0x362a5e);}}}else{if(this[_0x310c44(0x5fa)]['some'](_0x544fa8=>_0x544fa8[_0x310c44(0x19a)]()&&_0x544fa8['isMagicSkill']())){if(_0x310c44(0x707)===_0x310c44(0x4fb))this['processBattleCoreJS'](_0x310c44(0x348)),_0x12e98c[_0x310c44(0xa1e)]['BattleManager_processDefeat'][_0x310c44(0xb33)](this),this[_0x310c44(0x7d8)](_0x310c44(0x4e2));else return!![];}}}if(BattleManager[_0x310c44(0xb4c)]()&&this[_0x310c44(0x9fe)]===_0x310c44(0x141))return this['chantStyle']()?this[_0x310c44(0xa70)]()&&this['currentAction']()[_0x310c44(0x19a)]()&&this[_0x310c44(0xa70)]()['isMagical']():this[_0x310c44(0xa70)]()&&this[_0x310c44(0xa70)]()[_0x310c44(0x19a)]()&&this['currentAction']()[_0x310c44(0x29b)]();return![];},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x83e)]=function(){const _0x1e6dd4=_0x1a0039;if(BattleManager[_0x1e6dd4(0xb4c)]()&&this[_0x1e6dd4(0x9fe)]===_0x1e6dd4(0x141)){if(_0x1e6dd4(0x3b1)!==_0x1e6dd4(0x3b1)){if(this[_0x1e6dd4(0x5fa)][_0x1e6dd4(0x42d)](_0x5d2727=>_0x5d2727[_0x1e6dd4(0x19a)]()&&_0x5d2727[_0x1e6dd4(0x29b)]()))return!![];}else{if(this[_0x1e6dd4(0x38b)]())return this[_0x1e6dd4(0xa70)]()&&this[_0x1e6dd4(0xa70)]()[_0x1e6dd4(0x19a)]()&&!this[_0x1e6dd4(0xa70)]()[_0x1e6dd4(0x136)]();else{if(_0x1e6dd4(0x863)!=='aTPqV'){if(!_0x4f4dd1[_0x1e6dd4(0x984)]())return;_0x54f07a[_0x1e6dd4(0x44a)](_0x4f4c1f,_0x1db0d8);const _0x3a65ce=_0x4f1db7['getLastPluginCommandInterpreter'](),_0x1ae861=_0x8c9774['JumpToLabel'];if(!_0x3a65ce)return;_0x497f3c[_0x1e6dd4(0x33a)]--,_0x582dde['_target']=_0x914466[_0x1e6dd4(0x1a8)][_0x244cf7[_0x1e6dd4(0x33a)]]||null,_0x9555e9[_0x1e6dd4(0xa7e)]&&_0x1ae861[_0x1e6dd4(0x8b6)]()['trim']()!==_0x1e6dd4(0x21e)&&_0x3a65ce[_0x1e6dd4(0x131)]([_0x1ae861]);}else return this['currentAction']()&&this[_0x1e6dd4(0xa70)]()['item']()&&!this[_0x1e6dd4(0xa70)]()['isMagicSkill']();}}}return![];},VisuMZ['BattleCore']['Game_Battler_clearDamagePopup']=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xb6c)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xb6c)]=function(){const _0x2d1cfd=_0x1a0039;VisuMZ[_0x2d1cfd(0xa1e)]['Game_Battler_clearDamagePopup'][_0x2d1cfd(0xb33)](this),this[_0x2d1cfd(0x2ae)]=[];},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x262)]=function(){const _0x1c8fa6=_0x1a0039;if(!this[_0x1c8fa6(0x2ae)])this[_0x1c8fa6(0xb6c)]();return this[_0x1c8fa6(0x2ae)][_0x1c8fa6(0x2c0)]>0x0;},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x2da)]=function(){const _0x246fd5=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!this[_0x246fd5(0x2ae)])this[_0x246fd5(0xb6c)]();this[_0x246fd5(0x5df)]();const _0x94192b=this[_0x246fd5(0x68a)]();if(_0x94192b)_0x94192b[_0x246fd5(0x852)]();},Game_Battler['prototype'][_0x1a0039(0x5df)]=function(){const _0x65df43=_0x1a0039,_0x31f605=this[_0x65df43(0x246)]();if(_0x31f605[_0x65df43(0x8d5)]||_0x31f605[_0x65df43(0x8c5)]){if(_0x65df43(0x533)!==_0x65df43(0x2c1)){const _0x4c2175=JsonEx['makeDeepCopy'](_0x31f605);_0x4c2175[_0x65df43(0x91f)]=![],_0x4c2175[_0x65df43(0x1dd)]=0x0,this[_0x65df43(0x2ae)][_0x65df43(0xb15)](_0x4c2175);}else _0x53e33b?(this[_0x65df43(0x56b)]['x']=(_0x445a0a['width']-_0x2e214f[_0x65df43(0x5d3)])/0x2,this['_windowLayer']['y']=(_0x48fa66[_0x65df43(0x84d)]-_0x39e608['boxHeight'])/0x2):(this[_0x65df43(0x56b)]['x']=_0xb6659a[_0x65df43(0x926)]*0xa,this[_0x65df43(0x56b)]['y']=_0x4c877f[_0x65df43(0x84d)]*0xa);}if(_0x31f605[_0x65df43(0x91f)]){const _0x11a5e8=JsonEx[_0x65df43(0x5ee)](_0x31f605);_0x11a5e8[_0x65df43(0x8d5)]=![],_0x11a5e8[_0x65df43(0x8c5)]=![],_0x11a5e8[_0x65df43(0x1dd)]=0x0,this[_0x65df43(0x2ae)][_0x65df43(0xb15)](_0x11a5e8);}if(_0x31f605[_0x65df43(0x1dd)]!==0x0){const _0x2ab386=JsonEx['makeDeepCopy'](_0x31f605);_0x2ab386[_0x65df43(0x8d5)]=![],_0x2ab386['evaded']=![],_0x2ab386[_0x65df43(0x91f)]=![],this[_0x65df43(0x2ae)]['push'](_0x2ab386);}},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xad1)]=function(){const _0x3baf74=_0x1a0039;if(!this[_0x3baf74(0x2ae)])this[_0x3baf74(0xb6c)]();return VisuMZ[_0x3baf74(0xa1e)][_0x3baf74(0x4ce)]['Damage'][_0x3baf74(0x70f)]?this[_0x3baf74(0x2ae)]['shift']():this[_0x3baf74(0x2ae)][_0x3baf74(0x9df)]();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x440)]=function(_0x3a1c71,_0x1fedb8){const _0x4f334c=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!this[_0x4f334c(0x68a)]())return;if(_0x3a1c71[_0x4f334c(0x2c0)]<=0x0)return;_0x1fedb8=_0x1fedb8||{},_0x1fedb8[_0x4f334c(0x9b1)]=_0x1fedb8[_0x4f334c(0x9b1)]||'#ffffff',_0x1fedb8[_0x4f334c(0x86b)]=_0x1fedb8['flashColor']||[0x0,0x0,0x0,0x0],_0x1fedb8[_0x4f334c(0xaad)]=_0x1fedb8[_0x4f334c(0xaad)]||0x0,this[_0x4f334c(0x68a)]()['setupTextPopup'](_0x3a1c71,_0x1fedb8);},Game_Battler[_0x1a0039(0x6d2)]['setupIconTextPopup']=function(_0x4312cc,_0x2f8a3c,_0x456e5e){const _0x1b63c7=_0x1a0039;if(!SceneManager['isSceneBattle']())return;if(!this[_0x1b63c7(0x68a)]())return;if(_0x2f8a3c['length']<=0x0)return;_0x456e5e=_0x456e5e||{},_0x456e5e[_0x1b63c7(0x9b1)]=_0x456e5e[_0x1b63c7(0x9b1)]||'#ffffff',_0x456e5e[_0x1b63c7(0x86b)]=_0x456e5e[_0x1b63c7(0x86b)]||[0x0,0x0,0x0,0x0],_0x456e5e['flashDuration']=_0x456e5e[_0x1b63c7(0xaad)]||0x0,this[_0x1b63c7(0x68a)]()[_0x1b63c7(0xbbe)](_0x4312cc,_0x2f8a3c,_0x456e5e);},Game_Battler['prototype'][_0x1a0039(0x8aa)]=function(){const _0x13c0d2=_0x1a0039;if(this[_0x13c0d2(0x405)]())return![];if(this[_0x13c0d2(0x140)]()&&this[_0x13c0d2(0x567)]())return!![];if(this[_0x13c0d2(0x795)]()&&this['hasSvBattler']()){if(this[_0x13c0d2(0x93b)]()&&this['allowCollapse']())return![];}else{if(this[_0x13c0d2(0x93b)]()){if(_0x13c0d2(0x860)!=='iYMNc')return![];else _0x5b539a[_0x13c0d2(0xac9)]['friendsUnit']()[_0x13c0d2(0x811)](_0x27a941);}}return!![];},VisuMZ[_0x1a0039(0xa1e)]['Game_Battler_clearMotion']=Game_Battler[_0x1a0039(0x6d2)]['clearMotion'],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x770)]=function(){const _0x270d34=_0x1a0039;VisuMZ[_0x270d34(0xa1e)][_0x270d34(0x138)]['call'](this),this[_0x270d34(0x70e)]();},Game_Battler[_0x1a0039(0x6d2)]['canBattlerMove']=function(){return!![];},Game_Battler['prototype'][_0x1a0039(0x224)]=function(){return![];},VisuMZ[_0x1a0039(0xa1e)]['Game_Battler_onBattleStart']=Game_Battler[_0x1a0039(0x6d2)]['onBattleStart'],Game_Battler['prototype'][_0x1a0039(0xa13)]=function(_0x463348){const _0x492d27=_0x1a0039;VisuMZ['BattleCore']['Game_Battler_onBattleStart'][_0x492d27(0xb33)](this,_0x463348),this[_0x492d27(0x1b0)](_0x463348);},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x1b0)]=function(_0x5057e4){const _0x198ade=_0x1a0039;this['setBattlerFlip'](![]),this[_0x198ade(0x81f)]=undefined,this[_0x198ade(0x621)]=undefined;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x156)]=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x944)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x944)]=function(){const _0x51157f=_0x1a0039;VisuMZ[_0x51157f(0xa1e)]['Game_Battler_onBattleEnd'][_0x51157f(0xb33)](this),this[_0x51157f(0x271)]();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x271)]=function(){const _0x392434=_0x1a0039;this[_0x392434(0x81f)]=undefined,this[_0x392434(0x621)]=undefined;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x54d)]=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x2fa)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x2fa)]=function(_0x53eab0){const _0x112f91=_0x1a0039;VisuMZ[_0x112f91(0xa1e)]['Game_Battler_performActionStart'][_0x112f91(0xb33)](this,_0x53eab0);if(!_0x53eab0[_0x112f91(0x79f)]()){if(_0x112f91(0x88f)===_0x112f91(0x88f)){const _0x296fea=this['battler']();_0x296fea&&(_0x112f91(0x7b6)!==_0x112f91(0x7b6)?_0x1decfb[_0x112f91(0x784)][_0x112f91(0xa98)][_0x112f91(0xaf5)](_0x7008e7,this[_0x112f91(0x414)]):_0x296fea[_0x112f91(0x9ba)]());}else this[_0x112f91(0x1f4)]+=0x10;}this['setBattlerFlip'](![]);},Game_Battler['prototype']['performActionEndMembers']=function(){const _0x30e26b=_0x1a0039,_0x5f7ab6=this['_flinched'];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this['isInputting']()){const _0x354ab8=this[_0x30e26b(0x68a)]();if(_0x354ab8&&_0x5f7ab6)_0x354ab8[_0x30e26b(0x9ba)]();return;}const _0x2f7355=this[_0x30e26b(0x68a)]();if(_0x2f7355)_0x2f7355[_0x30e26b(0x6cb)]();this['setBattlerFlip'](![]),this[_0x30e26b(0x294)]();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa9c)]=function(_0x137daa){const _0x5e159e=_0x1a0039;if(_0x137daa[_0x5e159e(0x823)]())this[_0x5e159e(0x21c)]();else{if(_0x137daa['isGuard']())this['requestMotion'](_0x5e159e(0xb95));else{if(_0x137daa['isMagical']())this['requestMotion']('spell');else{if(_0x137daa[_0x5e159e(0x147)]()){if(_0x5e159e(0x85a)!==_0x5e159e(0x3a5)){if(_0x137daa['item']()['damage'][_0x5e159e(0x27b)]>0x0)_0x5e159e(0x5eb)===_0x5e159e(0x31b)?this[_0x5e159e(0x59a)]():this[_0x5e159e(0x21c)]();else{if(_0x5e159e(0x191)==='xZQqM'){if(this[_0x5e159e(0x68a)]())this['battler']()[_0x5e159e(0x35c)]();}else this[_0x5e159e(0x496)](_0x5e159e(0xa6e));}}else{const _0x1ce322=new _0x4f90e6(0x0,0x0,_0x205321['width'],_0x567df5[_0x5e159e(0x84d)]);this[_0x5e159e(0xb10)]=new _0x5b3d40(_0x1ce322),this['_commandNameWindow'][_0x5e159e(0x1f4)]=0x0,this['addChild'](this[_0x5e159e(0xb10)]),this[_0x5e159e(0x615)]();}}else _0x137daa[_0x5e159e(0x65c)]()&&('PZKEH'!=='PZKEH'?_0x3e4544[_0x5e159e(0x9b6)](_0x14dbd0):this['requestMotion'](_0x5e159e(0x19a)));}}}},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x164)]=function(){const _0x3e8e76=_0x1a0039;return $dataSystem[_0x3e8e76(0x354)][0x0];},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa69)]=function(){const _0x13d4d0=_0x1a0039,_0x1a5b54=this[_0x13d4d0(0x164)]();return _0x1a5b54?_0x1a5b54[_0x13d4d0(0x6a1)]:0x0;},Game_Battler['prototype']['performSubstitute']=function(_0x58e386){const _0x3bf9ef=_0x1a0039;if(!$gameSystem['isSideView']())return;const _0x4242e4=this['battler'](),_0x48a190=_0x58e386[_0x3bf9ef(0x68a)]();if(!_0x4242e4||!_0x48a190)return;const _0x1bd990=_0x48a190['_baseX'],_0x268851=_0x48a190[_0x3bf9ef(0x9da)];this[_0x3bf9ef(0x347)](_0x1bd990,_0x268851,0x0,![],_0x3bf9ef(0x3d0),-0x1),_0x4242e4[_0x3bf9ef(0x401)]();const _0x1736a9=VisuMZ[_0x3bf9ef(0xa1e)][_0x3bf9ef(0x4ce)][_0x3bf9ef(0x36e)];let _0x3bcf33=(_0x48a190[_0x3bf9ef(0x926)]+_0x4242e4['width'])/0x2;_0x3bcf33*=this['isActor']()?0x1:-0x1;let _0xc2e709=_0x1736a9['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x58e386['moveBattlerDistance'](_0x3bcf33,_0xc2e709,0x0,![],_0x3bf9ef(0x3d0)),_0x48a190[_0x3bf9ef(0x401)]();},Game_Battler[_0x1a0039(0x6d2)]['requestMotion']=function(_0x5b37cd){const _0x49c4cc=_0x1a0039;if(SceneManager[_0x49c4cc(0x984)]()){const _0x5c0570=this[_0x49c4cc(0x68a)]();_0x5c0570&&(_0x5c0570['forceMotion'](_0x5b37cd),[_0x49c4cc(0x736),_0x49c4cc(0x489),_0x49c4cc(0x5b4)][_0x49c4cc(0x604)](_0x5b37cd)&&(_0x49c4cc(0x89b)!=='VzhOg'?this['performWeaponAnimation']():this['startMotion'](_0x49c4cc(0x45e))));}this[_0x49c4cc(0x70e)]();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x8f8)]=function(){},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x53d)]=function(_0x2b36b1){const _0x2c8a77=_0x1a0039;if(SceneManager[_0x2c8a77(0x984)]()){const _0x501325=this[_0x2c8a77(0x68a)]();if(_0x501325)_0x501325['forceWeaponAnimation'](_0x2b36b1);}},Game_Battler['prototype'][_0x1a0039(0x7d0)]=function(){const _0xb8e21e=_0x1a0039;if(SceneManager[_0xb8e21e(0x984)]()){const _0xc9a26=this[_0xb8e21e(0xa69)]();this[_0xb8e21e(0x53d)](_0xc9a26);}},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x495)]=function(_0x5ad312,_0x41ad2c){const _0x260639=_0x1a0039;if(!_0x5ad312)return;if(!_0x5ad312['item']())return;if(_0x5ad312[_0x260639(0x823)]())return;if(_0x5ad312['isGuard']())return;if(_0x5ad312[_0x260639(0x65c)]())return;let _0x33ca27=0x0;const _0x5cde44=VisuMZ['BattleCore'][_0x260639(0x4ce)]['ActionSequence'],_0x32e7c4=_0x5ad312['item']()[_0x260639(0x83c)];if(_0x32e7c4[_0x260639(0x7f1)](/<CAST ANIMATION: (\d+)>/i))_0x33ca27=Number(RegExp['$1']);else{if(_0x32e7c4['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x5ad312['isCertainHit']())_0x33ca27=_0x5cde44[_0x260639(0xa6b)];else{if(_0x5ad312['isPhysical']())_0x33ca27=_0x5cde44[_0x260639(0x648)];else{if(_0x5ad312['isMagical']()){if('lFWTw'!==_0x260639(0x670))_0x33ca27=_0x5cde44[_0x260639(0xbba)];else{const _0x23525b=_0x4044ac['BattleCore'][_0x260639(0x4ce)];if(this[_0x260639(0x9a0)]===_0x5046da)_0x35b645+=_0x23525b[_0x260639(0x429)]['OffsetX']||0x0,_0x124bc3+=_0x23525b[_0x260639(0x429)][_0x260639(0x5f2)]||0x0;else this[_0x260639(0x9a0)]===_0xb6edfd&&(_0x267e8f+=_0x23525b[_0x260639(0x814)][_0x260639(0x1b9)]||0x0,_0x37bc83+=_0x23525b[_0x260639(0x814)]['OffsetY']||0x0);this[_0x260639(0x414)]&&(_0x5c55cc=this[_0x260639(0x414)][_0x260639(0x81f)]??_0x17a316,_0x1ce849=this['_battler'][_0x260639(0x621)]??_0x4ef758),_0x43613b['BattleCore'][_0x260639(0x94b)][_0x260639(0xb33)](this,_0x365563,_0x9aecf8),this[_0x260639(0x980)]=this['_homeX'],this[_0x260639(0x494)]=this[_0x260639(0xab6)],this[_0x260639(0x41b)]=0x0,this[_0x260639(0x810)]=0x0,this[_0x260639(0x73d)]=_0x260639(0x3d0);}}}}}}_0x33ca27>0x0&&$gameTemp[_0x260639(0x193)]([this],_0x33ca27,!!_0x41ad2c);},Game_Battler[_0x1a0039(0x6d2)]['performReflection']=function(){const _0x200819=_0x1a0039;SoundManager[_0x200819(0x929)]();let _0x5481ee=VisuMZ['BattleCore'][_0x200819(0x4ce)][_0x200819(0x36e)][_0x200819(0x75f)];if(_0x5481ee>0x0){if(_0x200819(0x649)===_0x200819(0x649))Imported[_0x200819(0x212)]?$gameTemp[_0x200819(0x778)]([this],_0x5481ee):$gameTemp['requestAnimation']([this],_0x5481ee);else{const _0x2e56b8=this[_0x200819(0x2ac)](),_0x33109e=_0x8334e8[_0x200819(0xa1e)][_0x200819(0x4ce)][_0x200819(0xa47)][_0x200819(0xa1f)],_0x53d121=_0x2e56b8===_0x200819(0x144)?_0x2dae66[_0x200819(0x206)]:_0x200819(0xa82)[_0x200819(0x4a8)](_0x33109e,_0x36fa05[_0x200819(0x206)]),_0x413305=this['isEscapeCommandEnabled']();this['addCommand'](_0x53d121,'escape',_0x413305);}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x8b7)]=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x5a8)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x5a8)]=function(){const _0x3a5603=_0x1a0039;VisuMZ[_0x3a5603(0xa1e)][_0x3a5603(0x8b7)][_0x3a5603(0xb33)](this),this[_0x3a5603(0x74b)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x502)]=Game_Battler['prototype'][_0x1a0039(0xa18)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa18)]=function(){const _0x705957=_0x1a0039;VisuMZ[_0x705957(0xa1e)][_0x705957(0x502)]['call'](this),this[_0x705957(0x74b)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xbe6)]=Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x762)],Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x762)]=function(){const _0x45355e=_0x1a0039;VisuMZ[_0x45355e(0xa1e)][_0x45355e(0xbe6)][_0x45355e(0xb33)](this),this[_0x45355e(0x74b)]();},Game_Battler['prototype']['performFlinch']=function(){const _0x4954a9=_0x1a0039;if(!$gameSystem[_0x4954a9(0x969)]())return;if(this[_0x4954a9(0x1de)])return;this['_flinched']=!![];const _0x468a70=this[_0x4954a9(0x68a)]();if(_0x468a70)_0x468a70[_0x4954a9(0x8f9)]();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x294)]=function(){const _0x4f8170=_0x1a0039;if(this[_0x4f8170(0x93b)]()&&this[_0x4f8170(0x203)]!==_0x4f8170(0x45e)){if(_0x4f8170(0x697)!==_0x4f8170(0xbc9)){this[_0x4f8170(0x496)](_0x4f8170(0x45e));return;}else return _0x48abf4[_0x4f8170(0xa46)];}if(this[_0x4f8170(0x93b)]()&&this[_0x4f8170(0x203)]===_0x4f8170(0x45e))return;if(!!this[_0x4f8170(0x408)])return;if(this[_0x4f8170(0x795)]()){if(_0x4f8170(0x531)!==_0x4f8170(0x531)){if(_0x27831b[_0x4f8170(0x4b8)])this[_0x4f8170(0xb1b)](_0x18b849[_0x4f8170(0x6a6)],_0x3664c2,_0x230358);if(_0x2d9e36[_0x4f8170(0x367)])this[_0x4f8170(0xb1b)](_0x63d834['message2'],_0x15be49,_0x4e1aaa);}else{if(!this[_0x4f8170(0x34c)]()&&this!==BattleManager[_0x4f8170(0xac9)]){if(_0x4f8170(0x76d)===_0x4f8170(0x1a0))return _0xf1fa7c(_0x511fd9['$1']);else{if(this[_0x4f8170(0x68a)]())this['battler']()[_0x4f8170(0x35c)]();}}this[_0x4f8170(0x70e)]();return;}}if(this['_motionType']===_0x4f8170(0x695))return;if(this[_0x4f8170(0x203)]===_0x4f8170(0x206)&&!BattleManager[_0x4f8170(0x165)]())return;if(this[_0x4f8170(0x203)]==='guard'&&!BattleManager['isInputting']())return;this['clearMotion']();if(this[_0x4f8170(0x68a)]()&&BattleManager[_0x4f8170(0x165)]()){if(_0x4f8170(0x6a4)!==_0x4f8170(0x6a4)){const _0xbf7732=this[_0x4f8170(0x4de)](_0x13d087,_0x4be0be);_0xbf7732[_0x4f8170(0x3bc)]['drawText'](_0x4b7b4f[_0x2d8547],0x0,0x0,_0x4ed822,_0x5531c2,_0x4f8170(0x36f)),_0xbf7732['x']=(_0x5cf137-(_0x4e393a[_0x4f8170(0x2c0)]-0x1)/0x2)*_0x5c80fc,_0xbf7732['dy']=-_0x14e1f2;}else{this[_0x4f8170(0x68a)]()[_0x4f8170(0x35c)](),this[_0x4f8170(0x70e)]();return;}}},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x34c)]=function(){const _0x1a5b42=_0x1a0039;if(!this[_0x1a5b42(0x227)]())return![];const _0x38c853=this[_0x1a5b42(0x68a)]();if(!_0x38c853)return![];const _0x4f3f82=_0x38c853[_0x1a5b42(0x851)];if(!_0x4f3f82)return![];const _0x1206ba=_0x4f3f82[_0x1a5b42(0x520)];return _0x1206ba&&!_0x1206ba['loop'];},Game_Battler[_0x1a0039(0x6d2)]['isBattlerFlipped']=function(){const _0x35409f=_0x1a0039;return this[_0x35409f(0x234)];},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x91e)]=function(_0x1b6ac9){const _0x4bf5fd=_0x1a0039;if(!$gameSystem['isSideView']())return;this[_0x4bf5fd(0x234)]=_0x1b6ac9;const _0x32ac8d=this[_0x4bf5fd(0x68a)]();if(_0x32ac8d)_0x32ac8d[_0x4bf5fd(0x8f6)]();},Game_Battler[_0x1a0039(0x6d2)]['setBattlerFacePoint']=function(_0x2cd8f6,_0xc2874c,_0x28eb12){const _0x53e1ec=_0x1a0039;if(!$gameSystem[_0x53e1ec(0x969)]())return;const _0x21be1f=this['battler']();if(!_0x21be1f)return;if(_0x2cd8f6===_0x21be1f['_baseX'])return;let _0x38fa1d=![];if(this['isActor']()){if(_0x2cd8f6>_0x21be1f[_0x53e1ec(0x1d4)])_0x38fa1d=!![];if(_0x2cd8f6<_0x21be1f[_0x53e1ec(0x1d4)])_0x38fa1d=![];}else{if(this[_0x53e1ec(0x795)]()){if('QRVYd'!==_0x53e1ec(0x232)){if(_0x2cd8f6>_0x21be1f[_0x53e1ec(0x1d4)])_0x38fa1d=![];if(_0x2cd8f6<_0x21be1f[_0x53e1ec(0x1d4)])_0x38fa1d=!![];}else this['performWeaponAnimation']();}};this[_0x53e1ec(0x91e)](_0x28eb12?!_0x38fa1d:_0x38fa1d),_0x21be1f[_0x53e1ec(0x8f6)]();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xb8e)]=function(_0x368878,_0x201aaf,_0x42038a,_0x2ae4cd,_0x1f1996){const _0x3ea13a=_0x1a0039;if(!$gameSystem['isSideView']())return;const _0x143135=this[_0x3ea13a(0x68a)]();if(!_0x143135)return;if(_0x2ae4cd)this[_0x3ea13a(0x537)](_0x368878+_0x143135[_0x3ea13a(0x1d4)],_0x201aaf+_0x143135[_0x3ea13a(0x9da)],![]);_0x368878+=_0x143135[_0x3ea13a(0x1d4)]-_0x143135['_homeX'],_0x201aaf+=_0x143135[_0x3ea13a(0x9da)]-_0x143135[_0x3ea13a(0xab6)],_0x143135[_0x3ea13a(0xa2f)](_0x368878,_0x201aaf,_0x42038a);if(Imported[_0x3ea13a(0x212)])_0x143135[_0x3ea13a(0x8a8)](_0x1f1996||'Linear');},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x347)]=function(_0x50a15c,_0x539a73,_0x145fd1,_0x37da37,_0x192625,_0x427c0c){const _0x539f36=_0x1a0039;if(!$gameSystem[_0x539f36(0x969)]())return;const _0x6184de=this[_0x539f36(0x68a)]();if(!_0x6184de)return;if(_0x50a15c===Infinity||_0x539a73===Infinity)return;if(isNaN(_0x50a15c)||isNaN(_0x539a73))return;_0x427c0c=_0x427c0c||0x0;if(_0x427c0c>0x0){if(_0x6184de[_0x539f36(0x1d4)]>_0x50a15c)_0x50a15c+=_0x6184de[_0x539f36(0x926)]/0x2+_0x427c0c;if(_0x6184de['_baseX']<_0x50a15c)_0x50a15c-=_0x6184de[_0x539f36(0x926)]/0x2+_0x427c0c;}if(_0x37da37)this[_0x539f36(0x537)](_0x50a15c,_0x539a73,![]);_0x50a15c-=_0x6184de[_0x539f36(0x59b)],_0x539a73-=_0x6184de[_0x539f36(0xab6)],_0x6184de['startMove'](_0x50a15c,_0x539a73,_0x145fd1);if(Imported[_0x539f36(0x212)])_0x6184de[_0x539f36(0x8a8)](_0x192625||_0x539f36(0x3d0));},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa72)]=function(_0x410915,_0x2ab943,_0x2503f2,_0x187ac4,_0x31b635){const _0x507010=_0x1a0039;if(!$gameSystem[_0x507010(0x969)]())return;const _0x33e52e=this[_0x507010(0x68a)]();if(!_0x33e52e)return;if(_0x187ac4)this['setBattlerFacePoint'](_0x410915+_0x33e52e[_0x507010(0x1d4)],_0x2ab943+_0x33e52e[_0x507010(0x9da)],![]);_0x410915+=_0x33e52e[_0x507010(0x59b)],_0x2ab943+=_0x33e52e['_homeY'],_0x33e52e[_0x507010(0x25b)](_0x410915,_0x2ab943,_0x2503f2,_0x31b635),this[_0x507010(0x81f)]=_0x410915,this['_forcedHomeY']=_0x2ab943;},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x60b)]=function(_0x30c893,_0x412480,_0x57373f,_0x5ddb23,_0x1fa483,_0x3ce011){const _0x2e5288=_0x1a0039;if(!$gameSystem[_0x2e5288(0x969)]())return;const _0x288b75=this[_0x2e5288(0x68a)]();if(!_0x288b75)return;_0x3ce011=_0x3ce011||0x0;if(_0x3ce011>0x0){if(_0x2e5288(0x6af)===_0x2e5288(0x57d))_0x26ca94[_0x2e5288(0x926)]=_0x47ca88(_0x408f61['$1']),_0x401311[_0x2e5288(0x84d)]=_0x1dac1c(_0xf24e9f['$2']);else{if(_0x288b75[_0x2e5288(0x1d4)]>_0x30c893)_0x30c893+=_0x288b75[_0x2e5288(0x926)]/0x2+_0x3ce011;if(_0x288b75['_baseX']<_0x30c893)_0x30c893-=_0x288b75['width']/0x2+_0x3ce011;}}if(_0x5ddb23)this[_0x2e5288(0x537)](_0x30c893,_0x412480,![]);_0x288b75[_0x2e5288(0x25b)](_0x30c893,_0x412480,_0x57373f,_0x1fa483),this[_0x2e5288(0x81f)]=_0x30c893,this[_0x2e5288(0x621)]=_0x412480;},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa37)]=function(_0xeb5bb2,_0x493bbf,_0x45d588){const _0xe790ea=_0x1a0039;if(!$gameSystem[_0xe790ea(0x969)]())return;const _0x18fba7=this[_0xe790ea(0x68a)]();if(!_0x18fba7)return;_0x18fba7[_0xe790ea(0x71e)](_0xeb5bb2,_0x493bbf,_0x45d588);},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x341)]=function(_0x1891c8,_0x2a0b94){const _0x1d042b=_0x1a0039;if(!$gameSystem['isSideView']())return;const _0x1017cd=this[_0x1d042b(0x68a)]();if(!_0x1017cd)return;_0x1017cd[_0x1d042b(0xb68)](_0x1891c8,_0x2a0b94);},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x7f7)]=function(_0x5cbf20,_0x548c92,_0xf39634,_0x364188){const _0x2d7893=_0x1a0039;if(!$gameSystem['isSideView']())return;const _0x455f6d=this[_0x2d7893(0x68a)]();if(!_0x455f6d)return;_0x455f6d[_0x2d7893(0x913)](_0x5cbf20,_0x548c92,_0xf39634,_0x364188);},Game_Battler[_0x1a0039(0x6d2)]['skewBattler']=function(_0x537950,_0x1ad17c,_0x2e59f0,_0x58009a){const _0x9881ba=_0x1a0039;if(!$gameSystem[_0x9881ba(0x969)]())return;const _0xd002d7=this[_0x9881ba(0x68a)]();if(!_0xd002d7)return;this[_0x9881ba(0x261)]()&&(_0x9881ba(0x785)===_0x9881ba(0x785)?(_0x537950*=-0x1,_0x1ad17c*=-0x1):this[_0x9881ba(0x15a)]()),_0xd002d7[_0x9881ba(0x43a)](_0x537950,_0x1ad17c,_0x2e59f0,_0x58009a);},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x2d7)]=function(_0x3c7713,_0x47a64,_0x2b5159,_0xb46b9b){const _0x498ab9=_0x1a0039;if(!$gameSystem[_0x498ab9(0x969)]())return;const _0x4ed086=this['battler']();if(!_0x4ed086)return;_0x4ed086[_0x498ab9(0x437)](_0x3c7713,_0x47a64,_0x2b5159,_0xb46b9b);},Game_Battler[_0x1a0039(0x6d2)]['changeBattlerOpacity']=function(_0x32da5a,_0x1fb2c0,_0x412880){const _0x39eb8f=_0x1a0039;if(!$gameSystem[_0x39eb8f(0x969)]())return;const _0x1c167a=this[_0x39eb8f(0x68a)]();if(!_0x1c167a)return;_0x1c167a['startOpacity'](_0x32da5a,_0x1fb2c0,_0x412880);},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x70e)]=function(){const _0x43f754=_0x1a0039,_0x151a38=!!this[_0x43f754(0x408)];this['_freezeMotionData']=undefined;if(_0x151a38){if('BGgAo'!==_0x43f754(0x307))this[_0x43f754(0x294)](),this['clearFreezeMotionForWeapons']();else{if(!_0x4badce['value'](_0x34c9f2))return!![];}}},Game_Battler['prototype'][_0x1a0039(0x60e)]=function(){const _0x1d2dd2=_0x1a0039;if(!SceneManager[_0x1d2dd2(0x984)]())return;const _0x1ecdbe=this[_0x1d2dd2(0x68a)]();if(!_0x1ecdbe)return;let _0x36bae0=this[_0x1d2dd2(0x261)]()?_0x1ecdbe[_0x1d2dd2(0xba4)]:_0x1ecdbe[_0x1d2dd2(0x851)][_0x1d2dd2(0xba4)];_0x36bae0&&_0x36bae0[_0x1d2dd2(0x55a)](0x0);},Game_Battler[_0x1a0039(0x6d2)]['freezeMotion']=function(_0x387d18,_0x260e0f,_0x37b40e){const _0x434d32=_0x1a0039;if(this[_0x434d32(0x795)]()&&!this[_0x434d32(0x227)]())return;let _0xc75198=0x0,_0x96fe68=0x0;_0x387d18[_0x434d32(0x7f1)](/ATTACK[ ](\d+)/i)&&(_0x96fe68=Number(RegExp['$1']),_0x96fe68--);if(this['isActor']()){if(_0x434d32(0x676)===_0x434d32(0x676)){const _0x26b191=this[_0x434d32(0x241)]();_0xc75198=_0x26b191[_0x96fe68]?_0x26b191[_0x96fe68][_0x434d32(0x40e)]:0x0;}else this[_0x434d32(0xab3)]['svAnchorY']=_0x533e4e[_0x434d32(0x6d2)][_0x434d32(0x5ca)][_0x434d32(0xb33)](this);}else{if(this['isEnemy']()){if(_0x434d32(0x551)!==_0x434d32(0xbc2))_0xc75198=this[_0x434d32(0x195)]()['wtypeId']||0x0;else return this[_0x434d32(0x6cd)]();}}const _0x421911=$dataSystem['attackMotions'][_0xc75198];_0x387d18[_0x434d32(0x7f1)](/attack/i)&&(_0x434d32(0xb11)!==_0x434d32(0xb11)?(this[_0x434d32(0x673)](_0x434d32(0xadb)),_0x107256[_0x434d32(0xa1e)][_0x434d32(0xb06)][_0x434d32(0xb33)](this),this[_0x434d32(0x673)]('PostEndTurnJS')):_0x387d18=['thrust',_0x434d32(0x736),_0x434d32(0x5b4)][_0x421911[_0x434d32(0x27b)]]||_0x434d32(0x736)),this[_0x434d32(0x408)]={'motionType':_0x387d18,'weaponImageId':_0x260e0f?_0x421911[_0x434d32(0x6a1)]:0x0,'pattern':_0x37b40e};},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x81a)]=function(_0x434b00){const _0x2ac0c6=_0x1a0039;if(!_0x434b00)return![];return _0x434b00[_0x2ac0c6(0x377)]()===this['friendsUnit']();},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x208)]=function(_0x1dd42){const _0x4f2a62=_0x1a0039;if(!_0x1dd42)return![];return _0x1dd42[_0x4f2a62(0xbdf)]()===this[_0x4f2a62(0x377)]();},Game_Battler['prototype'][_0x1a0039(0x5da)]=function(){return![];},Game_Actor['prototype'][_0x1a0039(0x5da)]=function(){const _0x6a1173=_0x1a0039;return this['battlerName']()[_0x6a1173(0x7f1)](/\$/i);},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x5da)]=function(){const _0x535f80=_0x1a0039;return this[_0x535f80(0x227)]()&&this[_0x535f80(0x80c)]()[_0x535f80(0x7f1)](/\$/i);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x93e)]=Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x55a)],Game_Actor['prototype'][_0x1a0039(0x55a)]=function(_0x4c9ca6){const _0x6ca91=_0x1a0039;VisuMZ['BattleCore'][_0x6ca91(0x93e)][_0x6ca91(0xb33)](this,_0x4c9ca6),this[_0x6ca91(0x2ef)]();},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x2ef)]=function(){const _0x24cabd=_0x1a0039;this[_0x24cabd(0x701)]='',this['actor']()&&this[_0x24cabd(0xbc6)]()[_0x24cabd(0x83c)][_0x24cabd(0x7f1)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x24cabd(0x701)]=String(RegExp['$1']));},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x57c)]=function(){const _0x16b1ec=_0x1a0039;if(this[_0x16b1ec(0x4e4)]()!==''){if('VKzso'!==_0x16b1ec(0x35d)){if(!_0x10866b)return;if(!this[_0x16b1ec(0xa60)])return;if(_0x347f9b[_0x16b1ec(0x261)]()){}else{if(_0x441763['isEnemy']()){if(this['constructor']===_0x20a1cd&&!_0x3e525f[_0x16b1ec(0x227)]())return;}}this['_hpGaugeSprite'][_0x16b1ec(0x55a)](_0x3e6f87,'hp');}else return this[_0x16b1ec(0x4e4)]();}else{if(Imported[_0x16b1ec(0x6c4)]&&this[_0x16b1ec(0x493)]()!==''){if(_0x16b1ec(0x5e7)===_0x16b1ec(0x5e7))return this[_0x16b1ec(0x493)]();else _0x514139[_0x16b1ec(0x295)](_0x16b1ec(0x344));}}return'';},Game_Actor['prototype'][_0x1a0039(0x4e4)]=function(){const _0x7f1d21=_0x1a0039;if(this['_battlePortrait']===undefined)this[_0x7f1d21(0x2ef)]();return this[_0x7f1d21(0x701)];},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x85e)]=function(_0x27a3ba){const _0x4e6a5a=_0x1a0039;if(this[_0x4e6a5a(0x701)]===undefined)this[_0x4e6a5a(0x2ef)]();this['_battlePortrait']=_0x27a3ba;if(SceneManager['isSceneBattle']()&&$gameParty['battleMembers']()[_0x4e6a5a(0x604)](this)){const _0x4e4547=SceneManager['_scene'][_0x4e6a5a(0xa98)];if(_0x4e4547)_0x4e4547[_0x4e6a5a(0x6e1)](this);}},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x427)]=function(){return!![];},Game_Actor['prototype'][_0x1a0039(0x474)]=function(){const _0x192a09=_0x1a0039;if(!this['isConfused']()&&BattleManager[_0x192a09(0xb01)])return!![];return Game_Battler['prototype'][_0x192a09(0x474)][_0x192a09(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)]['Game_Actor_makeActionList']=Game_Actor['prototype']['makeActionList'],Game_Actor[_0x1a0039(0x6d2)]['makeActionList']=function(){const _0x555f1f=_0x1a0039;if(BattleManager[_0x555f1f(0xb01)]&&!ConfigManager[_0x555f1f(0x44c)]){if('NIUjh'===_0x555f1f(0x883))return this[_0x555f1f(0x737)]();else{this[_0x555f1f(0x424)]()[_0x555f1f(0xb20)](_0x173f0c);if(_0x50868c[_0x555f1f(0x50a)]())_0x54e294['scale']['x']=-0x1;}}else{if('oAihs'!==_0x555f1f(0x5b0)){return VisuMZ['BattleCore']['Game_Actor_makeActionList']['call'](this);;}else return _0x3e7642[_0x555f1f(0x82e)](_0x555f1f(0xb7a));}},Game_Actor[_0x1a0039(0x6d2)]['makeActionListAutoAttack']=function(){const _0x27a3c6=_0x1a0039,_0x3906e8=[],_0x11de6d=new Game_Action(this);return _0x11de6d['setAttack'](),_0x3906e8[_0x27a3c6(0xb15)](_0x11de6d),_0x3906e8;},Game_Actor[_0x1a0039(0x6d2)]['battleCommands']=function(){const _0x17b814=_0x1a0039;return this[_0x17b814(0x375)]()[_0x17b814(0x83c)][_0x17b814(0x7f1)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x17b814(0xa1e)][_0x17b814(0x4ce)][_0x17b814(0xa15)]['BattleCmdList'];},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x4a1)]=function(){const _0x1da982=_0x1a0039;if(this[_0x1da982(0xab3)]['svAnchorX']!==undefined)return this[_0x1da982(0xab3)][_0x1da982(0x66d)];if(this[_0x1da982(0xbc6)]()[_0x1da982(0x83c)][_0x1da982(0x7f1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x1da982(0xab3)]['svAnchorX']=eval(RegExp['$1']),this[_0x1da982(0xab3)][_0x1da982(0x486)]=eval(RegExp['$2']);else{if(_0x1da982(0x864)===_0x1da982(0x864))this['_cache']['svAnchorX']=Game_Battler[_0x1da982(0x6d2)]['svBattlerAnchorX']['call'](this);else{const _0x49d6e3=this[_0x1da982(0x52b)][_0x1da982(0x3bc)],_0x364a2e=this[_0x1da982(0x926)]-0x8,_0x3e6f53=this['height'],_0x41d283=this[_0x1da982(0x23b)],_0x58ab26=_0x29bd6f['dimColor1'](),_0x280c0b=_0x4ecefa[_0x1da982(0x146)]();this['_dimmerSprite']['x']=0x4,_0x49d6e3[_0x1da982(0x9cf)](_0x364a2e,_0x3e6f53),_0x49d6e3['gradientFillRect'](0x0,0x0,_0x364a2e,_0x41d283,_0x280c0b,_0x58ab26,!![]),_0x49d6e3[_0x1da982(0x39b)](0x0,_0x41d283,_0x364a2e,_0x3e6f53-_0x41d283*0x2,_0x58ab26),_0x49d6e3['gradientFillRect'](0x0,_0x3e6f53-_0x41d283,_0x364a2e,_0x41d283,_0x58ab26,_0x280c0b,!![]),this[_0x1da982(0x52b)][_0x1da982(0x5bd)](0x0,0x0,_0x364a2e,_0x3e6f53);}}return this[_0x1da982(0xab3)][_0x1da982(0x66d)];},Game_Actor['prototype'][_0x1a0039(0x5ca)]=function(){const _0xd05a53=_0x1a0039;if(this['_cache'][_0xd05a53(0x486)]!==undefined)return this[_0xd05a53(0xab3)][_0xd05a53(0x486)];return this['actor']()[_0xd05a53(0x83c)][_0xd05a53(0x7f1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0xd05a53(0x66d)]=eval(RegExp['$1']),this[_0xd05a53(0xab3)][_0xd05a53(0x486)]=eval(RegExp['$2'])):this[_0xd05a53(0xab3)][_0xd05a53(0x486)]=Game_Battler[_0xd05a53(0x6d2)]['svBattlerAnchorY']['call'](this),this['_cache']['svAnchorY'];},Game_Actor[_0x1a0039(0x6d2)]['svBattlerShadowVisible']=function(){const _0x466847=_0x1a0039;if(this[_0x466847(0xab3)]['svShadow']!==undefined)return this[_0x466847(0xab3)][_0x466847(0x3a3)];if(this[_0x466847(0xbc6)]()['note'][_0x466847(0x7f1)](/<SIDEVIEW SHOW SHADOW>/i))_0x466847(0x420)!==_0x466847(0x420)?_0x107c9f[_0x466847(0x95e)]=[]:this[_0x466847(0xab3)][_0x466847(0x3a3)]=!![];else this[_0x466847(0xbc6)]()[_0x466847(0x83c)][_0x466847(0x7f1)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x466847(0xab3)][_0x466847(0x3a3)]=![]:'HeGvW'===_0x466847(0x498)?_0x42cb51[_0x2710f8]===0x1&&this['_activeWeaponSlot']!==_0x226bf4&&(_0x2e57be[_0x27bf37]=null):this['_cache'][_0x466847(0x3a3)]=Game_Battler['prototype'][_0x466847(0x4ad)][_0x466847(0xb33)](this);return this[_0x466847(0xab3)][_0x466847(0x3a3)];},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x641)]=function(){const _0x41258c=_0x1a0039;return VisuMZ[_0x41258c(0xa1e)][_0x41258c(0x4ce)][_0x41258c(0x429)][_0x41258c(0x3aa)];},Game_Actor['prototype'][_0x1a0039(0x8f8)]=function(){const _0x56d0c2=_0x1a0039,_0x40545e=this['weapons'](),_0x37330d=_0x40545e[0x0]?_0x40545e[0x0][_0x56d0c2(0x40e)]:0x0,_0x10886f=$dataSystem[_0x56d0c2(0x354)][_0x37330d];_0x10886f&&this[_0x56d0c2(0x53d)](_0x10886f['weaponImageId']);},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x566)]=function(_0x4e2acd){const _0x14d120=_0x1a0039;Game_Battler[_0x14d120(0x6d2)][_0x14d120(0x566)][_0x14d120(0xb33)](this,_0x4e2acd),this[_0x14d120(0xa9c)](_0x4e2acd);},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x164)]=function(){const _0x4ee23f=_0x1a0039,_0x4cb64a=this[_0x4ee23f(0x241)](),_0x67a101=_0x4cb64a[0x0]?_0x4cb64a[0x0][_0x4ee23f(0x40e)]:0x0;return $dataSystem['attackMotions'][_0x67a101];},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0xba5)]=function(_0x3efdeb){const _0x40f0d5=_0x1a0039;_0x3efdeb=_0x3efdeb||0x1,_0x3efdeb--;const _0x229468=this['weapons']();return _0x229468[_0x3efdeb]?_0x229468[_0x3efdeb][_0x40f0d5(0x7f4)]:0x0;},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x667)]=function(_0x3149b6){const _0x110577=_0x1a0039;_0x3149b6=_0x3149b6||0x1,_0x3149b6--;const _0x51cd70=this[_0x110577(0x241)](),_0x111b1b=_0x51cd70[_0x3149b6]?_0x51cd70[_0x3149b6]['wtypeId']:0x0;return $dataSystem[_0x110577(0x354)][_0x111b1b];},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x458)]=function(_0x386ded){const _0x57ce0b=_0x1a0039;_0x386ded=_0x386ded||0x1,_0x386ded--;const _0x595d67=this[_0x57ce0b(0x241)](),_0x843302=_0x595d67[_0x386ded]?_0x595d67[_0x386ded][_0x57ce0b(0x40e)]:0x0,_0x309ddc=$dataSystem[_0x57ce0b(0x354)][_0x843302];if(_0x309ddc){if(_0x309ddc[_0x57ce0b(0x27b)]===0x0)this[_0x57ce0b(0x496)](_0x57ce0b(0x489));else{if(_0x309ddc[_0x57ce0b(0x27b)]===0x1)_0x57ce0b(0x718)!==_0x57ce0b(0x718)?(_0x54d425[_0x57ce0b(0x6d2)][_0x57ce0b(0x310)][_0x57ce0b(0xb33)](this),this[_0x57ce0b(0xb46)]()):this[_0x57ce0b(0x496)]('swing');else _0x309ddc[_0x57ce0b(0x27b)]===0x2&&(_0x57ce0b(0x872)!=='plJuK'?(this[_0x57ce0b(0x526)](_0x429369)?this[_0x57ce0b(0x553)]()['addChild'](_0x2a012a):this[_0x57ce0b(0x5e9)]['addChild'](_0x368e53),this[_0x57ce0b(0x3c8)]['push'](_0x1b03da)):this[_0x57ce0b(0x496)](_0x57ce0b(0x5b4)));}this[_0x57ce0b(0x53d)](_0x309ddc[_0x57ce0b(0x6a1)]);}},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x5e6)]=function(_0x4eafd9){const _0x590394=_0x1a0039;this[_0x590394(0x38f)]=_0x4eafd9||0x0,this[_0x590394(0xab3)]={};},Game_Battler['prototype'][_0x1a0039(0xad7)]=function(){const _0x2bd22d=_0x1a0039;this[_0x2bd22d(0x38f)]=this['_activeWeaponSlot']||0x0,this['_activeWeaponSlot']++,this[_0x2bd22d(0xab3)]={};},Game_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x8ee)]=function(){const _0x4e8093=_0x1a0039;this[_0x4e8093(0x38f)]=undefined,this[_0x4e8093(0xab3)]={};},VisuMZ[_0x1a0039(0xa1e)]['Game_Actor_equips']=Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x76a)],Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x76a)]=function(){const _0x426de6=_0x1a0039;let _0x406ff6=VisuMZ['BattleCore'][_0x426de6(0x95f)][_0x426de6(0xb33)](this);if(this['_tempEquipCheck'])return _0x406ff6;if(this[_0x426de6(0x38f)]!==undefined){if(_0x426de6(0x52c)===_0x426de6(0x52c)){this['_tempEquipCheck']=!![];const _0x44ef46=this[_0x426de6(0xa19)]();for(let _0x4bcb95=0x0;_0x4bcb95<_0x44ef46[_0x426de6(0x2c0)];_0x4bcb95++){_0x44ef46[_0x4bcb95]===0x1&&this[_0x426de6(0x38f)]!==_0x4bcb95&&(_0x426de6(0x848)!==_0x426de6(0x848)?this['_battlePortrait']=_0xd80f76(_0x17bd79['$1']):_0x406ff6[_0x4bcb95]=null);}this[_0x426de6(0x470)]=undefined;}else this[_0x426de6(0xac1)]();}return _0x406ff6;},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x6e6)]=function(_0x160c25){const _0x100d3f=_0x1a0039;return _0x160c25['isActor']()?_0x160c25[_0x100d3f(0x241)]()[_0x100d3f(0x2c0)]||0x1:0x1;},Window_BattleLog[_0x1a0039(0x6d2)]['setActiveWeaponSet']=function(_0x14fe0f,_0x1d7ea4){const _0x2f0f13=_0x1a0039;_0x14fe0f&&_0x14fe0f[_0x2f0f13(0x261)]()&&_0x14fe0f[_0x2f0f13(0x5e6)](_0x1d7ea4),this[_0x2f0f13(0x15a)]();},Window_BattleLog['prototype']['clearActiveWeaponSet']=function(_0x4897d6){const _0x5549de=_0x1a0039;_0x4897d6&&_0x4897d6[_0x5549de(0x261)]()&&_0x4897d6[_0x5549de(0x8ee)](),this[_0x5549de(0x15a)]();},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0xb94)]=function(){const _0x15597d=_0x1a0039;let _0x5f7673=_0x15597d(0xb94);if(this[_0x15597d(0xaa4)](_0x5f7673))return this[_0x15597d(0xab3)][_0x5f7673];return this['_cache'][_0x5f7673]=this[_0x15597d(0x51b)](this[_0x15597d(0xbc6)]()),this[_0x15597d(0xab3)][_0x5f7673];},Game_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x1bb)]=function(){const _0x3b84ef=_0x1a0039;let _0xaf5dcf=_0x3b84ef(0x1bb);if(this[_0x3b84ef(0xaa4)](_0xaf5dcf))return this[_0x3b84ef(0xab3)][_0xaf5dcf];return this['_cache'][_0xaf5dcf]=this[_0x3b84ef(0xbd0)](this['actor']()),this['_cache'][_0xaf5dcf];},VisuMZ[_0x1a0039(0xa1e)]['Game_Enemy_setup']=Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x55a)],Game_Enemy[_0x1a0039(0x6d2)]['setup']=function(_0x1d89a8,_0x38ab3a,_0x31d6f8){const _0x1bd96f=_0x1a0039;_0x1d89a8=DataManager['swapEnemyIDs'](_0x1d89a8),VisuMZ[_0x1bd96f(0xa1e)][_0x1bd96f(0x671)][_0x1bd96f(0xb33)](this,_0x1d89a8,_0x38ab3a,_0x31d6f8),Imported['VisuMZ_1_ElementStatusCore']&&this['initElementStatusCore'](),this[_0x1bd96f(0x7bd)](),this[_0x1bd96f(0x460)](),Imported[_0x1bd96f(0x5f6)]&&this[_0x1bd96f(0x7ae)]();},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x7bd)]=function(){const _0x5cf443=_0x1a0039,_0x55f199=VisuMZ[_0x5cf443(0xa1e)]['Settings'][_0x5cf443(0x814)];this[_0x5cf443(0x6f6)]=_0x55f199[_0x5cf443(0x7c5)],this[_0x5cf443(0x2c4)]={};},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x460)]=function(){const _0x53061e=_0x1a0039,_0x34719f=VisuMZ[_0x53061e(0xa1e)]['Settings'][_0x53061e(0x814)],_0x25aa6a=this[_0x53061e(0x91b)]()[_0x53061e(0x83c)];this[_0x53061e(0x2c4)]={'name':'','wtypeId':_0x34719f['WtypeId'],'collapse':_0x34719f['AllowCollapse'],'motionIdle':_0x34719f['MotionIdle'],'width':_0x34719f[_0x53061e(0x17f)]||0x40,'height':_0x34719f[_0x53061e(0x13b)]||0x40,'anchorX':_0x34719f['AnchorX']||0x0,'anchorY':_0x34719f[_0x53061e(0x194)]||0x0,'shadow':_0x34719f[_0x53061e(0x9a2)]};_0x25aa6a[_0x53061e(0x7f1)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x53061e(0x6f6)]=Number(RegExp['$1']));const _0x1e3c82=this[_0x53061e(0x2c4)];if(_0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x53061e(0x6d6)!==_0x53061e(0x92a))_0x1e3c82['name']=String(RegExp['$1']);else return;}else{if(_0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x55f21b=String(RegExp['$1'])[_0x53061e(0xaf3)](/[\r\n]+/)[_0x53061e(0x5a5)]('');_0x1e3c82[_0x53061e(0x192)]=DataManager[_0x53061e(0x5d8)](_0x55f21b);}}_0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x53061e(0x478)!=='PxiVz'?(_0x1e3c82['anchorX']=eval(RegExp['$1']),_0x1e3c82[_0x53061e(0x2a1)]=eval(RegExp['$2'])):_0x2810c3['BattleCore'][_0x53061e(0x734)]['call'](this));if(_0x25aa6a['match'](/<SIDEVIEW COLLAPSE>/i))_0x1e3c82[_0x53061e(0x689)]=!![];else _0x25aa6a['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x1e3c82[_0x53061e(0x689)]=![]);if(_0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW SHOW SHADOW>/i))_0x53061e(0x54e)===_0x53061e(0x9bd)?(_0x2c9713[_0x53061e(0x602)]=_0x2d6968(_0x59bce7['$1']),_0x462017[_0x53061e(0x2a1)]=_0x50e28d(_0x87c20d['$2'])):_0x1e3c82['shadow']=!![];else _0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1e3c82[_0x53061e(0x9bf)]=![]);if(_0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x1e3c82[_0x53061e(0x727)]=String(RegExp['$1'])['toLowerCase']()[_0x53061e(0x850)]();else{if(_0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x2f6094=String(RegExp['$1'])[_0x53061e(0xaf3)](/[\r\n]+/)[_0x53061e(0x5a5)]('');_0x1e3c82[_0x53061e(0x727)]=DataManager[_0x53061e(0x5d8)](_0x2f6094);}}_0x25aa6a[_0x53061e(0x7f1)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&('yZVIg'===_0x53061e(0x2aa)?(_0x1e3c82['width']=Number(RegExp['$1']),_0x1e3c82[_0x53061e(0x84d)]=Number(RegExp['$2'])):(_0x219673['battleback1Name']||_0x5cd17b[_0x53061e(0x57a)])&&_0x1c7a20['snapForBackground']());if(_0x25aa6a['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x1e3c82[_0x53061e(0x40e)]=DataManager[_0x53061e(0x32b)](RegExp['$1']);else{if(_0x25aa6a['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x53061e(0xb4a)==='srYjs')this['setWaitMode'](_0x53061e(0x1f4));else{const _0x34875b=String(RegExp['$1'])[_0x53061e(0xaf3)](/[\r\n]+/)[_0x53061e(0x5a5)](''),_0x25fdcc=DataManager[_0x53061e(0x5d8)](_0x34875b);_0x1e3c82[_0x53061e(0x40e)]=DataManager[_0x53061e(0x32b)](_0x25fdcc);}}}if(Imported[_0x53061e(0x5f6)]){if(_0x53061e(0x5dd)===_0x53061e(0x5dd)){const _0x34d36b=this[_0x53061e(0x280)]();for(const _0x1afd1c of _0x34d36b){if(_0x53061e(0x8c7)===_0x53061e(0x8c7)){const _0xeb085f=this[_0x53061e(0x6a9)](_0x1afd1c)[_0x53061e(0x530)][_0x53061e(0x8b6)]()[_0x53061e(0x850)](),_0x3c6278=_0x1afd1c[_0x53061e(0x8b6)]()[_0x53061e(0x850)]();if(_0x25aa6a['match'](VisuMZ[_0x53061e(0x80e)]['RegExp']['SvBattlerSolo-%1-%2'[_0x53061e(0x4a8)](_0x3c6278,_0xeb085f)]))_0x1e3c82['name']=String(RegExp['$1']);else{if(_0x25aa6a[_0x53061e(0x7f1)](VisuMZ[_0x53061e(0x80e)][_0x53061e(0x706)]['SvBattlerMass-%1-%2'[_0x53061e(0x4a8)](_0x3c6278,_0xeb085f)])){if(_0x53061e(0x1dc)==='gxIkT')return this['getMenuImage']();else{const _0x5165b5=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x1e3c82[_0x53061e(0x192)]=DataManager[_0x53061e(0x5d8)](_0x5165b5);}}}if(_0x25aa6a['match'](VisuMZ[_0x53061e(0x80e)][_0x53061e(0x706)][_0x53061e(0xb2d)[_0x53061e(0x4a8)](_0x3c6278,_0xeb085f)])){if(_0x53061e(0x1b8)==='ibQQl')_0x1e3c82['wtypeId']=DataManager[_0x53061e(0x32b)](RegExp['$1']);else{_0x27b26c[_0x53061e(0x7f1)](_0x4c7f3d);const _0x2cfedb=_0x4beed7(_0x4e1ed5['$1'])[_0x53061e(0xaf3)](',')[_0x53061e(0x73b)](_0x42f012=>_0x2dcefa(_0x42f012)[_0x53061e(0x8b6)]()['trim']());_0x305221=_0x1351f7['concat'](_0x2cfedb);}}else{if(_0x25aa6a[_0x53061e(0x7f1)](VisuMZ[_0x53061e(0x80e)][_0x53061e(0x706)]['SvWeaponMass-%1-%2'[_0x53061e(0x4a8)](_0x3c6278,_0xeb085f)])){const _0x76decc=String(RegExp['$1'])[_0x53061e(0xaf3)](/[\r\n]+/)[_0x53061e(0x5a5)](''),_0x4361b3=DataManager['processRandomizedData'](_0x76decc);_0x1e3c82[_0x53061e(0x40e)]=DataManager[_0x53061e(0x32b)](_0x4361b3);}}if(_0x25aa6a[_0x53061e(0x7f1)](VisuMZ[_0x53061e(0x80e)][_0x53061e(0x706)][_0x53061e(0x2f1)[_0x53061e(0x4a8)](_0x3c6278,_0xeb085f)]))_0x1e3c82[_0x53061e(0x727)]=String(RegExp['$1'])[_0x53061e(0x6f5)]()['trim']();else{if(_0x25aa6a['match'](VisuMZ['ElementStatusCore'][_0x53061e(0x706)]['SvMotionIdleMass-%1-%2'[_0x53061e(0x4a8)](_0x3c6278,_0xeb085f)])){if('HwXMf'===_0x53061e(0x132))return this[_0x53061e(0x926)]*this[_0x53061e(0x2a9)]();else{const _0x5396aa=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x53061e(0x5a5)]('');_0x1e3c82['motionIdle']=DataManager[_0x53061e(0x5d8)](_0x5396aa);}}}}else return this[_0x53061e(0x375)]()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x2d6e60(_0x4ffcac['$1'])['split'](/[\r\n]+/):_0x57257e['BattleCore'][_0x53061e(0x4ce)][_0x53061e(0xa15)][_0x53061e(0x197)];}}else this[_0x53061e(0x830)]();}},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x7fe)]=function(){const _0x590617=_0x1a0039;return this[_0x590617(0x6f6)]||0x0;},Game_Enemy['prototype'][_0x1a0039(0x55f)]=function(){const _0x26207c=_0x1a0039;return this[_0x26207c(0x7fe)]();},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0xba5)]=function(_0x51723e){return this['attackAnimationId1']();},Game_Enemy[_0x1a0039(0x6d2)]['canBattlerMove']=function(){const _0x366daf=_0x1a0039;if(this[_0x366daf(0x91b)]()[_0x366daf(0x83c)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x366daf(0x6d2)][_0x366daf(0x301)][_0x366daf(0xb33)](this);},Game_Enemy[_0x1a0039(0x6d2)]['isBattlerGrounded']=function(){const _0x2dbb90=_0x1a0039;if(this['enemy']()['note'][_0x2dbb90(0x7f1)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x540)]=function(){const _0x180aaf=_0x1a0039,_0x5899c3=[];for(const _0x4d907b of this[_0x180aaf(0x91b)]()[_0x180aaf(0xa81)]){const _0x503408=$dataSkills[_0x4d907b[_0x180aaf(0x25c)]];if(_0x503408&&!_0x5899c3['includes'](_0x503408))_0x5899c3[_0x180aaf(0xb15)](_0x503408);}return _0x5899c3;},Game_Enemy['prototype'][_0x1a0039(0xb94)]=function(){const _0x18abca=_0x1a0039;let _0x5f14f2=_0x18abca(0xb94);if(this['checkCacheKey'](_0x5f14f2))return this[_0x18abca(0xab3)][_0x5f14f2];return this[_0x18abca(0xab3)][_0x5f14f2]=this[_0x18abca(0x51b)](this[_0x18abca(0x91b)]()),this[_0x18abca(0xab3)][_0x5f14f2];},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x1bb)]=function(){const _0x56d5bf=_0x1a0039;let _0x1dbf39=_0x56d5bf(0x1bb);if(this[_0x56d5bf(0xaa4)](_0x1dbf39))return this[_0x56d5bf(0xab3)][_0x1dbf39];return this[_0x56d5bf(0xab3)][_0x1dbf39]=this[_0x56d5bf(0xbd0)](this[_0x56d5bf(0x91b)]()),this['_cache'][_0x1dbf39];},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x195)]=function(){const _0x25bafa=_0x1a0039;if(this['_svBattlerData']!==undefined)return this[_0x25bafa(0x2c4)];return this[_0x25bafa(0x460)](),this[_0x25bafa(0x2c4)];},Game_Enemy['prototype'][_0x1a0039(0x227)]=function(){const _0x1ea64f=_0x1a0039;return this[_0x1ea64f(0x195)]()[_0x1ea64f(0x192)]!=='';},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x80c)]=function(){return this['svBattlerData']()['name'];},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x641)]=function(){const _0x1cc305=_0x1a0039;if(this[_0x1cc305(0x227)]())return VisuMZ['BattleCore'][_0x1cc305(0x4ce)][_0x1cc305(0x429)][_0x1cc305(0x3aa)];else{if(_0x1cc305(0x608)!==_0x1cc305(0x608))_0xb46ddb+=_0x282793,_0x5d4ba4+=_0x40349f[_0x1cc305(0x261)]()?-_0x512bba:_0x43d7bc;else return VisuMZ[_0x1cc305(0xa1e)]['Settings'][_0x1cc305(0x814)][_0x1cc305(0x3aa)];}},Game_Enemy[_0x1a0039(0x6d2)]['performAction']=function(_0x322825){const _0x740a32=_0x1a0039;Game_Battler[_0x740a32(0x6d2)]['performAction'][_0x740a32(0xb33)](this,_0x322825);if(this[_0x740a32(0x227)]())this[_0x740a32(0xa9c)](_0x322825);},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x21c)]=function(){const _0x34b1c2=_0x1a0039,_0x100d61=this[_0x34b1c2(0x195)]()[_0x34b1c2(0x40e)]||0x0,_0x3f1983=$dataSystem['attackMotions'][_0x100d61];if(_0x3f1983){if(_0x3f1983[_0x34b1c2(0x27b)]===0x0){if(_0x34b1c2(0x447)===_0x34b1c2(0x447))this[_0x34b1c2(0x496)](_0x34b1c2(0x489));else{if(!_0x529ae5[_0x34b1c2(0x984)]())return;const _0x3a4e85=_0x5105a3[_0x34b1c2(0x572)](),_0x49510d=_0xb11147[_0x34b1c2(0x548)],_0x25aded=_0x2534de['_subject'],_0x3d693e=_0x2505e4[_0x34b1c2(0xa33)];if(!_0x3a4e85||!_0x49510d||!_0x25aded)return;if(!_0x49510d[_0x34b1c2(0x19a)]())return;_0x3d693e[_0x34b1c2(0x98a)](_0x25aded,_0x49510d['item']()),_0x3a4e85[_0x34b1c2(0x295)](_0x34b1c2(0x28f));}}else{if(_0x3f1983[_0x34b1c2(0x27b)]===0x1)this['requestMotion'](_0x34b1c2(0x736));else _0x3f1983['type']===0x2&&this[_0x34b1c2(0x496)](_0x34b1c2(0x5b4));}}},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x8f8)]=function(){const _0x51eef4=_0x1a0039,_0x4182ae=this['svBattlerData']()[_0x51eef4(0x40e)]||0x0,_0x170def=$dataSystem['attackMotions'][_0x4182ae];_0x170def&&this[_0x51eef4(0x53d)](_0x170def[_0x51eef4(0x6a1)]);},Game_Enemy[_0x1a0039(0x6d2)]['getAttackMotion']=function(){const _0x18240d=_0x1a0039,_0x52b54c=this['svBattlerData']()[_0x18240d(0x40e)]||0x0;return $dataSystem[_0x18240d(0x354)][_0x52b54c];},Game_Enemy['prototype'][_0x1a0039(0x667)]=function(_0x1c9cb8){const _0x5ef68=_0x1a0039;return this[_0x5ef68(0x164)]();},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x5a8)]=function(){const _0x3f0930=_0x1a0039;Game_Battler['prototype'][_0x3f0930(0x5a8)][_0x3f0930(0xb33)](this);if(this[_0x3f0930(0x427)]()&&this[_0x3f0930(0x227)]()){if(_0x3f0930(0x9be)==='ibaGS')this['requestMotion'](_0x3f0930(0x4e5));else{if(this[_0x3f0930(0x414)]&&this[_0x3f0930(0x414)][_0x3f0930(0x93b)]())return![];if(this[_0x3f0930(0x414)]&&!this['_battler'][_0x3f0930(0x301)]())return![];return _0x3582b9[_0x3f0930(0x969)]();}}SoundManager[_0x3f0930(0x8b3)]();},Game_Enemy['prototype'][_0x1a0039(0x762)]=function(){const _0x49402e=_0x1a0039;Game_Battler[_0x49402e(0x6d2)][_0x49402e(0x762)][_0x49402e(0xb33)](this),this[_0x49402e(0x496)]('evade');},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x739)]=function(){const _0x580a43=_0x1a0039;Game_Battler[_0x580a43(0x6d2)][_0x580a43(0x739)][_0x580a43(0xb33)](this),this['requestMotion'](_0x580a43(0x242));},Game_Enemy['prototype'][_0x1a0039(0x56f)]=function(){const _0x1847ca=_0x1a0039;Game_Battler[_0x1847ca(0x6d2)][_0x1847ca(0x56f)]['call'](this),this[_0x1847ca(0x21c)]();},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x3f4)]=function(){const _0x34c919=_0x1a0039;if(this[_0x34c919(0x227)]()){if(_0x34c919(0x9ef)!==_0x34c919(0x200)){if(this[_0x34c919(0xa2d)]()>=0x1)return!![];return this[_0x34c919(0x195)]()[_0x34c919(0x689)];}else return!![];}else{if(_0x34c919(0xa89)===_0x34c919(0x9c3)){if(!_0x285b6b[_0x34c919(0xa1e)][_0x34c919(0x4ce)]['BattleLog'][_0x34c919(0x9ff)])return;_0x37fee6[_0x34c919(0xa1e)][_0x34c919(0x3e9)]['call'](this,_0x2168f2);}else return!![];}},Game_Enemy['prototype'][_0x1a0039(0x4a1)]=function(){const _0xbfc8fd=_0x1a0039;return this[_0xbfc8fd(0x195)]()[_0xbfc8fd(0x602)];},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x5ca)]=function(){const _0x4b529e=_0x1a0039;return this[_0x4b529e(0x195)]()[_0x4b529e(0x2a1)];},Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x4ad)]=function(){const _0x3a19cc=_0x1a0039;return this['svBattlerData']()[_0x3a19cc(0x9bf)];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x186)]=Game_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x960)],Game_Enemy['prototype'][_0x1a0039(0x960)]=function(_0x392f83){const _0x4be821=_0x1a0039;VisuMZ[_0x4be821(0xa1e)][_0x4be821(0x186)]['call'](this,_0x392f83),this[_0x4be821(0x7bd)](),this[_0x4be821(0x460)]();const _0x59610d=this[_0x4be821(0x68a)]();if(_0x59610d)_0x59610d[_0x4be821(0x39a)](this);},Game_Unit['prototype'][_0x1a0039(0x673)]=function(_0x3e5565){const _0x2ca85f=_0x1a0039;for(const _0x2e2d97 of this[_0x2ca85f(0x541)]()){if(_0x2e2d97)_0x2e2d97['processBattleCoreJS'](_0x3e5565);}},Game_Unit[_0x1a0039(0x6d2)][_0x1a0039(0x4d9)]=function(){const _0x432994=_0x1a0039,_0xf575d=this[_0x432994(0x4d2)]();return _0xf575d[Math[_0x432994(0x6d0)](_0xf575d[_0x432994(0x2c0)])];},VisuMZ['BattleCore'][_0x1a0039(0xb26)]=Game_Party[_0x1a0039(0x6d2)][_0x1a0039(0xa36)],Game_Party[_0x1a0039(0x6d2)][_0x1a0039(0xa36)]=function(_0x273f71){const _0x4c259b=_0x1a0039;VisuMZ[_0x4c259b(0xa1e)][_0x4c259b(0xb26)][_0x4c259b(0xb33)](this,_0x273f71),BattleManager[_0x4c259b(0x386)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x4fd)]=Game_Party[_0x1a0039(0x6d2)]['removeActor'],Game_Party[_0x1a0039(0x6d2)]['removeActor']=function(_0x2330ed){const _0x334f2d=_0x1a0039;VisuMZ[_0x334f2d(0xa1e)][_0x334f2d(0x4fd)][_0x334f2d(0xb33)](this,_0x2330ed),BattleManager[_0x334f2d(0x386)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x846)]=Game_Troop[_0x1a0039(0x6d2)][_0x1a0039(0x55a)],Game_Troop['prototype'][_0x1a0039(0x55a)]=function(_0x4129ff){const _0x4a98de=_0x1a0039;$gameTemp[_0x4a98de(0x53e)](),$gameTemp[_0x4a98de(0x899)](_0x4129ff),VisuMZ[_0x4a98de(0xa1e)][_0x4a98de(0x846)][_0x4a98de(0xb33)](this,_0x4129ff);},VisuMZ[_0x1a0039(0xa1e)]['Game_Troop_expTotal']=Game_Troop[_0x1a0039(0x6d2)][_0x1a0039(0xa5d)],Game_Troop['prototype']['expTotal']=function(){const _0x2ae53e=_0x1a0039;let _0x518662=VisuMZ[_0x2ae53e(0xa1e)]['Game_Troop_expTotal']['call'](this);return this[_0x2ae53e(0x79c)]&&(_0x518662*=this[_0x2ae53e(0x79c)]()),Math[_0x2ae53e(0xb9b)](_0x518662);},Game_Troop[_0x1a0039(0x6d2)][_0x1a0039(0x79c)]=function(){return 0x1;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x5b3)]=Game_Map[_0x1a0039(0x6d2)]['setupBattleback'],Game_Map['prototype'][_0x1a0039(0x5f0)]=function(){const _0x1284e5=_0x1a0039;VisuMZ[_0x1284e5(0xa1e)][_0x1284e5(0x5b3)][_0x1284e5(0xb33)](this),this[_0x1284e5(0x9f2)]();},Game_Map[_0x1a0039(0x6d2)][_0x1a0039(0x9f2)]=function(){const _0x1f5518=_0x1a0039;this[_0x1f5518(0x616)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x32c4e4=$dataMap[_0x1f5518(0x83c)];if(!_0x32c4e4)return;const _0x46a031=_0x32c4e4[_0x1f5518(0x7f1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x46a031)for(const _0x498c8c of _0x46a031){_0x498c8c[_0x1f5518(0x7f1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x42c386=Number(RegExp['$1']),_0x179e0a=Number(RegExp['$2']),_0x38c813=_0x179e0a===0x1?this[_0x1f5518(0x616)]:this[_0x1f5518(0xae2)],_0x14e7fb=String(RegExp['$3']);_0x38c813[_0x42c386]=_0x14e7fb;}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x1b1)]=Game_Map[_0x1a0039(0x6d2)][_0x1a0039(0x2a8)],Game_Map[_0x1a0039(0x6d2)][_0x1a0039(0x2a8)]=function(){const _0x30b4d8=_0x1a0039;if(!BattleManager[_0x30b4d8(0x9fd)]()){const _0x2f545b=$gamePlayer[_0x30b4d8(0x890)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x30b4d8(0x616)]&&this['_regionBattleback1'][_0x2f545b])return _0x30b4d8(0x7ee)!==_0x30b4d8(0x717)?this[_0x30b4d8(0x616)][_0x2f545b]:'icon';}return VisuMZ[_0x30b4d8(0xa1e)]['Game_Map_battleback1Name'][_0x30b4d8(0xb33)](this);},VisuMZ['BattleCore'][_0x1a0039(0x8f4)]=Game_Map[_0x1a0039(0x6d2)][_0x1a0039(0x57a)],Game_Map[_0x1a0039(0x6d2)][_0x1a0039(0x57a)]=function(){const _0x39b699=_0x1a0039;if(!BattleManager[_0x39b699(0x9fd)]()){const _0x231760=$gamePlayer[_0x39b699(0x890)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x39b699(0x616)]&&this['_regionBattleback2'][_0x231760])return this[_0x39b699(0xae2)][_0x231760];}return VisuMZ['BattleCore'][_0x39b699(0x8f4)]['call'](this);},VisuMZ['BattleCore'][_0x1a0039(0x445)]=Game_Map['prototype']['encounterList'],Game_Map[_0x1a0039(0x6d2)]['encounterList']=function(){const _0x28cd10=_0x1a0039;let _0x2cd9b7=JsonEx[_0x28cd10(0x5ee)](VisuMZ[_0x28cd10(0xa1e)]['Game_Map_encounterList'][_0x28cd10(0xb33)](this));return VisuMZ[_0x28cd10(0xa1e)][_0x28cd10(0x42a)](_0x2cd9b7);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x42a)]=function(_0x164144){const _0x14732f=_0x1a0039;var _0x17efe7,_0x5481c6,_0x44c6b1;for(_0x44c6b1=_0x164144[_0x14732f(0x2c0)]-0x1;_0x44c6b1>0x0;_0x44c6b1--){_0x17efe7=Math['floor'](Math[_0x14732f(0x16a)]()*(_0x44c6b1+0x1)),_0x5481c6=_0x164144[_0x44c6b1],_0x164144[_0x44c6b1]=_0x164144[_0x17efe7],_0x164144[_0x17efe7]=_0x5481c6;}return _0x164144;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x756)]=Game_Interpreter[_0x1a0039(0x6d2)][_0x1a0039(0x6ce)],Game_Interpreter[_0x1a0039(0x6d2)][_0x1a0039(0x6ce)]=function(_0x4cc970){const _0x4825c6=_0x1a0039;return $gameTemp[_0x4825c6(0xbb8)](this),VisuMZ[_0x4825c6(0xa1e)][_0x4825c6(0x756)][_0x4825c6(0xb33)](this,_0x4cc970);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xaee)]=Game_Interpreter[_0x1a0039(0x6d2)][_0x1a0039(0x786)],Game_Interpreter[_0x1a0039(0x6d2)]['updateWaitMode']=function(){const _0x2b6fab=_0x1a0039;if(SceneManager[_0x2b6fab(0x984)]()){if(_0x2b6fab(0x61d)==='IlEPe')switch(this[_0x2b6fab(0xb6a)]){case _0x2b6fab(0x8b2):if(Imported[_0x2b6fab(0x624)]){if('mOKks'==='mOKks'){if($gameScreen[_0x2b6fab(0x588)]()[_0x2b6fab(0x404)]>0x0)return!![];this[_0x2b6fab(0xb6a)]='';}else _0x2592e9[_0x2b6fab(0xa1e)][_0x2b6fab(0x528)][_0x2b6fab(0xb33)](this),this['_actor']&&(this['updateStateSprite'](),this['updateStyleOpacity']());}break;case _0x2b6fab(0x344):if(BattleManager[_0x2b6fab(0x942)]['isAnimationPlaying']())return!![];this['_waitMode']='';break;case'battleCamera':if(Imported[_0x2b6fab(0x624)]){if(_0x2b6fab(0x8de)==='sTwlf')this['_defeatedEnemies']=this['_defeatedEnemies']||[];else{if($gameScreen[_0x2b6fab(0x588)]()[_0x2b6fab(0x8e4)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x2b6fab(0xbc5)]>0x0)return!![];this[_0x2b6fab(0xb6a)]='';}}break;case _0x2b6fab(0x44b):if(BattleManager['_spriteset'][_0x2b6fab(0x7d2)]())return!![];this['_waitMode']='';break;case _0x2b6fab(0x989):if(BattleManager[_0x2b6fab(0x942)][_0x2b6fab(0x7b1)]())return!![];this[_0x2b6fab(0xb6a)]='';break;case'battleJump':if(BattleManager['_spriteset']['isAnyoneJumping']())return!![];this[_0x2b6fab(0xb6a)]='';break;case'battlelog':if(BattleManager['_logWindow'][_0x2b6fab(0x382)]())return!![];this[_0x2b6fab(0xb6a)]='';break;case _0x2b6fab(0x272):if(BattleManager[_0x2b6fab(0x942)][_0x2b6fab(0x40c)]())return!![];this[_0x2b6fab(0xb6a)]='';break;case'battleOpacity':if(BattleManager[_0x2b6fab(0x942)]['isAnyoneChangingOpacity']())return!![];this[_0x2b6fab(0xb6a)]='';break;case _0x2b6fab(0x1eb):if(BattleManager[_0x2b6fab(0x942)][_0x2b6fab(0x4b2)]())return!![];this[_0x2b6fab(0xb6a)]='';break;case _0x2b6fab(0x740):if(BattleManager[_0x2b6fab(0x942)][_0x2b6fab(0x712)]())return!![];this[_0x2b6fab(0xb6a)]='';break;case _0x2b6fab(0x658):if(Imported[_0x2b6fab(0x868)]){if(BattleManager[_0x2b6fab(0x942)][_0x2b6fab(0x816)]())return!![];this[_0x2b6fab(0xb6a)]='';}break;case _0x2b6fab(0x614):if(Imported[_0x2b6fab(0x624)]){if('yPsKS'!==_0x2b6fab(0xb81)){if($gameScreen['battleCameraData']()[_0x2b6fab(0x1c4)]>0x0)return!![];this[_0x2b6fab(0xb6a)]='';}else{if(!_0x4eacdd['isSceneBattle']())return;const _0x415561=_0x4daa48['getLastPluginCommandInterpreter']();if(!_0x415561)return;_0x415561['setWaitMode'](_0x2b6fab(0x1eb));}}break;case _0x2b6fab(0xa40):if(BattleManager[_0x2b6fab(0x942)][_0x2b6fab(0x5fc)]())return!![];this[_0x2b6fab(0xb6a)]='';break;case _0x2b6fab(0x580):if(Imported[_0x2b6fab(0x624)]){if($gameScreen[_0x2b6fab(0x588)]()['zoomDuration']>0x0)return!![];this['_waitMode']='';}break;}else{const _0x42c8e3=0xa,_0x2e3d5a=0x12c*_0x42c8e3,_0x2e13ae=0x1e*_0x42c8e3;this[_0x2b6fab(0xa2f)](_0x2e3d5a,0x0,_0x2e13ae);}}return VisuMZ[_0x2b6fab(0xa1e)][_0x2b6fab(0xaee)][_0x2b6fab(0xb33)](this);},VisuMZ['BattleCore'][_0x1a0039(0x8e0)]=Game_Interpreter['prototype']['command301'],Game_Interpreter['prototype'][_0x1a0039(0xac6)]=function(_0x3ce68a){const _0x45e9fd=_0x1a0039;if(!$gameParty[_0x45e9fd(0xa3e)]())return this[_0x45e9fd(0xa80)](_0x3ce68a);else{if(_0x45e9fd(0x8bc)!=='IQrZt')return VisuMZ[_0x45e9fd(0xa1e)]['Game_Interpreter_command301'][_0x45e9fd(0xb33)](this,_0x3ce68a);else this[_0x45e9fd(0xae8)](_0x45e9fd(0x931));}},Game_Interpreter[_0x1a0039(0x6d2)][_0x1a0039(0x74d)]=function(_0x32eca4){const _0x119452=_0x1a0039;return VisuMZ['BattleCore'][_0x119452(0x8e0)]['call'](this,_0x32eca4),BattleManager['setEventCallback'](_0x466411=>{const _0x4c4700=_0x119452;this[_0x4c4700(0x6a8)][this['_indent']]=_0x466411;}),!![];},VisuMZ['BattleCore'][_0x1a0039(0xbb3)]=function(_0x4fdf78){const _0x406b1d=_0x1a0039,_0x4753c3=$dataCommonEvents[_0x4fdf78];if(!_0x4753c3)return![];if(_0x4753c3[_0x406b1d(0x71c)][_0x406b1d(0x2c0)]<=0x1)return![];return!![];},Game_Interpreter[_0x1a0039(0x6d2)][_0x1a0039(0xa80)]=function(_0x242c5b){const _0x1f4e08=_0x1a0039,_0x4d5d2e=VisuMZ[_0x1f4e08(0xa1e)][_0x1f4e08(0x4ce)]['Mechanics'],_0x22ae38=_0x4d5d2e['BattleStartEvent'],_0xc3cc5=$dataCommonEvents[_0x22ae38];if(_0xc3cc5&&VisuMZ['BattleCore'][_0x1f4e08(0xbb3)](_0x22ae38)){if(_0x1f4e08(0x8c4)!=='GWTpX')return this[_0x1f4e08(0x6cd)]();else{const _0x55b099=this[_0x1f4e08(0x999)]()?this[_0x1f4e08(0x231)]:0x0,_0x1c3edd=_0xc3cc5[_0x1f4e08(0x71c)];this[_0x1f4e08(0xb87)](_0x1c3edd,_0x55b099),this[_0x1f4e08(0x68b)]=JsonEx[_0x1f4e08(0x5ee)](this[_0x1f4e08(0x68b)]);const _0x277e1c={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x1f4e08(0x5ee)](_0x242c5b)};return this[_0x1f4e08(0x68b)][_0x1f4e08(0xabf)](this[_0x1f4e08(0xb05)]+0x1,0x0,_0x277e1c),!![];}}else return VisuMZ[_0x1f4e08(0xa1e)][_0x1f4e08(0x8e0)][_0x1f4e08(0xb33)](this,_0x242c5b);},VisuMZ['BattleCore'][_0x1a0039(0x3ea)]=BattleManager[_0x1a0039(0x2a0)],BattleManager['onEncounter']=function(){const _0x597336=_0x1a0039;VisuMZ[_0x597336(0xa1e)][_0x597336(0x3ea)]['call'](this),this[_0x597336(0x3d6)]();},BattleManager[_0x1a0039(0x3d6)]=function(){const _0x54efda=_0x1a0039,_0x2da26c=VisuMZ[_0x54efda(0xa1e)][_0x54efda(0x4ce)]['Mechanics'],_0x240640=_0x2da26c[_0x54efda(0x6ec)];_0x240640&&VisuMZ[_0x54efda(0xa1e)][_0x54efda(0xbb3)](_0x240640)&&(this[_0x54efda(0xa66)]=!![],$gameTemp['reserveCommonEvent'](_0x2da26c[_0x54efda(0x6ec)]),$gameMap[_0x54efda(0x587)](),$gameMap[_0x54efda(0xad5)]['_preBattleCommonEvent']=!![]),_0x2da26c[_0x54efda(0x49d)]>0x0&&(_0x54efda(0x569)!==_0x54efda(0x569)?this[_0x54efda(0xae8)](_0x54efda(0x5f9)):this['_canLose']=!![]);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x908)]=Scene_Map[_0x1a0039(0x6d2)][_0x1a0039(0xb2f)],Scene_Map[_0x1a0039(0x6d2)][_0x1a0039(0xb2f)]=function(){const _0x55b6c0=_0x1a0039;if(BattleManager[_0x55b6c0(0xa66)])return;VisuMZ[_0x55b6c0(0xa1e)][_0x55b6c0(0x908)][_0x55b6c0(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xae6)]=Scene_Map[_0x1a0039(0x6d2)]['launchBattle'],Scene_Map[_0x1a0039(0x6d2)]['launchBattle']=function(){const _0x52639d=_0x1a0039;BattleManager[_0x52639d(0xa66)]?this[_0x52639d(0x6a3)]():VisuMZ['BattleCore'][_0x52639d(0xae6)][_0x52639d(0xb33)](this);},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x1f0dbe=_0x1a0039;this[_0x1f0dbe(0x98e)]=!![];},VisuMZ[_0x1a0039(0xa1e)]['SceneManager_isSceneChanging']=SceneManager[_0x1a0039(0x5e0)],SceneManager['isSceneChanging']=function(){const _0x3dfa49=_0x1a0039;if(BattleManager[_0x3dfa49(0xa66)])return![];return VisuMZ['BattleCore'][_0x3dfa49(0x905)][_0x3dfa49(0xb33)](this);},VisuMZ['BattleCore']['Game_Interpreter_terminate']=Game_Interpreter[_0x1a0039(0x6d2)]['terminate'],Game_Interpreter[_0x1a0039(0x6d2)][_0x1a0039(0x78b)]=function(){const _0x29758e=_0x1a0039;VisuMZ[_0x29758e(0xa1e)]['Game_Interpreter_terminate'][_0x29758e(0xb33)](this);if(this[_0x29758e(0x949)]){if(_0x29758e(0x7c8)===_0x29758e(0x7c8))this[_0x29758e(0x949)]=undefined,SceneManager[_0x29758e(0x784)][_0x29758e(0x6a0)]();else return!![];}},Scene_Map[_0x1a0039(0x6d2)][_0x1a0039(0x6a0)]=function(){const _0x2dfde5=_0x1a0039;BattleManager[_0x2dfde5(0xa66)]=undefined,BattleManager[_0x2dfde5(0xbca)]=!![],this[_0x2dfde5(0x7c4)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x915)]=Scene_Map[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)],Scene_Map['prototype'][_0x1a0039(0x3e0)]=function(){const _0x2c4e24=_0x1a0039;VisuMZ[_0x2c4e24(0xa1e)][_0x2c4e24(0x915)][_0x2c4e24(0xb33)](this),BattleManager['_battleCoreBattleResumeAfter']&&(this[_0x2c4e24(0x98e)]=!![],BattleManager[_0x2c4e24(0xbca)]=undefined);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x5d0)]=Scene_Map[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)],Scene_Map['prototype'][_0x1a0039(0x3e0)]=function(){const _0x401352=_0x1a0039;VisuMZ['BattleCore'][_0x401352(0x5d0)]['call'](this),$gameTemp[_0x401352(0x53e)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x6ba)]=Scene_ItemBase[_0x1a0039(0x6d2)][_0x1a0039(0x9d1)],Scene_ItemBase[_0x1a0039(0x6d2)][_0x1a0039(0x9d1)]=function(){const _0x2c356d=_0x1a0039;VisuMZ[_0x2c356d(0xa1e)]['Scene_ItemBase_applyItem'][_0x2c356d(0xb33)](this);if(this[_0x2c356d(0x19a)]()[_0x2c356d(0x83c)][_0x2c356d(0x7f1)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;if(this[_0x2c356d(0x19a)]()['note'][_0x2c356d(0x7f1)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x2c356d(0x91d)!==_0x2c356d(0x44d))$gameTemp[_0x2c356d(0x95e)]=[];else return _0x30111e[_0x2c356d(0xa1e)][_0x2c356d(0x4ce)][_0x2c356d(0x814)][_0x2c356d(0x2f4)];}DataManager[_0x2c356d(0x585)](this[_0x2c356d(0x19a)]())&&(_0x2c356d(0x77e)==='TTEeL'?(this[_0x2c356d(0x38f)]=this[_0x2c356d(0x38f)]||0x0,this[_0x2c356d(0x38f)]++,this['_cache']={}):$gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x1a0039(0xa1e)]['Scene_Options_maxCommands']=Scene_Options[_0x1a0039(0x6d2)][_0x1a0039(0x710)],Scene_Options[_0x1a0039(0x6d2)][_0x1a0039(0x710)]=function(){const _0x4ffe39=_0x1a0039;let _0x4a49e2=VisuMZ[_0x4ffe39(0xa1e)]['Scene_Options_maxCommands'][_0x4ffe39(0xb33)](this);const _0x490f53=VisuMZ[_0x4ffe39(0xa1e)][_0x4ffe39(0x4ce)];if(_0x490f53['AutoBattle']['AddOption']&&_0x490f53['AutoBattle'][_0x4ffe39(0x145)])_0x4a49e2+=0x2;if(_0x490f53[_0x4ffe39(0x6eb)][_0x4ffe39(0xba1)]&&_0x490f53[_0x4ffe39(0x6eb)][_0x4ffe39(0x145)])_0x4a49e2+=0x1;return _0x4a49e2;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x2e4)]=Scene_Battle['prototype'][_0x1a0039(0x3e0)],Scene_Battle[_0x1a0039(0x6d2)]['initialize']=function(){const _0x1803db=_0x1a0039;VisuMZ[_0x1803db(0xa1e)]['Scene_Battle_initialize'][_0x1803db(0xb33)](this),this['clearOnceParallelInterpreters']();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x396)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x381)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x381)]=function(){const _0x37f614=_0x1a0039;SceneManager[_0x37f614(0x237)]()?(Scene_Message[_0x37f614(0x6d2)]['start'][_0x37f614(0xb33)](this),this[_0x37f614(0x942)]&&(_0x37f614(0x3be)===_0x37f614(0x3be)?this[_0x37f614(0x942)][_0x37f614(0x9fc)]():this['tpbActorSwitchConditionsMet']()?this[_0x37f614(0xbcf)]():this[_0x37f614(0x998)]()),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0x37f614(0x412)]()):(VisuMZ[_0x37f614(0xa1e)][_0x37f614(0x396)]['call'](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa07)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x7c4)],Scene_Battle[_0x1a0039(0x6d2)]['stop']=function(){const _0x550148=_0x1a0039;if(SceneManager[_0x550148(0x549)]())Scene_Message[_0x550148(0x6d2)]['stop'][_0x550148(0xb33)](this);else{if('MjQjx'==='MjQjx')VisuMZ[_0x550148(0xa1e)][_0x550148(0xa07)][_0x550148(0xb33)](this);else{if(!this[_0x550148(0x5c7)]())return;if(!this[_0x550148(0xa04)])return;if(this['_targetSkewX']===_0x35f00c&&this[_0x550148(0x7e9)]===_0x14771c)return;this[_0x550148(0x677)]=_0xad3004,this['_targetSkewY']=_0x25b1d4,this['_skewDuration']=_0x206440,this[_0x550148(0x8ca)]=_0x16c4c1,this[_0x550148(0x7f6)]=_0x4bda18||_0x550148(0x3d0),_0x10b061<=0x0&&(this[_0x550148(0xa04)][_0x550148(0x1ee)]['x']=this['_targetSkewX'],this[_0x550148(0xa04)][_0x550148(0x1ee)]['y']=this[_0x550148(0x7e9)]);}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x74c)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x78b)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x78b)]=function(){const _0x3d8027=_0x1a0039;if(SceneManager[_0x3d8027(0x549)]()){if(_0x3d8027(0xa93)!=='JRdjc'){if(this[_0x3d8027(0x3f4)]())_0x2ac581[_0x3d8027(0xa1e)]['Sprite_Enemy_updateBossCollapse'][_0x3d8027(0xb33)](this);}else Scene_Message[_0x3d8027(0x6d2)][_0x3d8027(0x78b)][_0x3d8027(0xb33)](this);}else _0x3d8027(0x287)===_0x3d8027(0x287)?VisuMZ[_0x3d8027(0xa1e)]['Scene_Battle_terminate']['call'](this):(_0x689ea2[_0x2ac496]=0x1,_0x17a336++);this[_0x3d8027(0x9ed)]();},Scene_Battle['prototype'][_0x1a0039(0x902)]=function(){const _0x4332ca=_0x1a0039;if(ConfigManager[_0x4332ca(0xa31)]&&ConfigManager[_0x4332ca(0xb6f)]!==undefined)return ConfigManager[_0x4332ca(0xb6f)];else{if(this['battleLayoutStyle']()===_0x4332ca(0x459)){if(_0x4332ca(0x535)!==_0x4332ca(0x535))this['placeGauge'](_0xea8a18,'tp',_0x5c62f2+(_0xef6864[_0x4332ca(0x646)]||0x0),_0x94ee9f+this[_0x4332ca(0x6fa)]()*0x2+(_0x4ca722[_0x4332ca(0x715)]||0x0));else return![];}else{return Scene_Message[_0x4332ca(0x6d2)][_0x4332ca(0x902)][_0x4332ca(0xb33)](this);;}}},VisuMZ[_0x1a0039(0xa1e)]['Scene_Battle_createAllWindows']=Scene_Battle['prototype']['createAllWindows'],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x733)]=function(){const _0x56aacd=_0x1a0039;this['createEnemyNameContainer'](),VisuMZ[_0x56aacd(0xa1e)][_0x56aacd(0x86a)]['call'](this),this['createAutoBattleWindow']();},VisuMZ['BattleCore'][_0x1a0039(0x753)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x7eb)],Scene_Battle['prototype'][_0x1a0039(0x7eb)]=function(){const _0x5b224c=_0x1a0039;VisuMZ[_0x5b224c(0xa1e)][_0x5b224c(0x753)][_0x5b224c(0xb33)](this),this[_0x5b224c(0xa84)]()==='border'&&this[_0x5b224c(0x59a)]();},Scene_Battle['prototype'][_0x1a0039(0x201)]=function(_0x448f1c){const _0x310f60=_0x1a0039;if(_0x448f1c){if(_0x310f60(0x284)!==_0x310f60(0x284)){if(this[_0x310f60(0xa24)]===_0x492388)this[_0x310f60(0x2cc)]();if(!_0x35e050)return;if(this['_defeatedEnemies'][_0x310f60(0x604)](_0x1ed332))return;this[_0x310f60(0xa24)]['push'](_0x4d9d85),this['_defeatedEnemies'][_0x310f60(0x8b1)]((_0xbdb117,_0xc755b1)=>_0xbdb117-_0xc755b1);}else this[_0x310f60(0x56b)]['x']=(Graphics[_0x310f60(0x926)]-Graphics[_0x310f60(0x5d3)])/0x2,this['_windowLayer']['y']=(Graphics[_0x310f60(0x84d)]-Graphics['boxHeight'])/0x2;}else this[_0x310f60(0x56b)]['x']=Graphics[_0x310f60(0x926)]*0xa,this[_0x310f60(0x56b)]['y']=Graphics[_0x310f60(0x84d)]*0xa;},VisuMZ['BattleCore']['Scene_Battle_selectNextCommand']=Scene_Battle[_0x1a0039(0x6d2)]['selectNextCommand'],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x72d)]=function(){const _0x3eae98=_0x1a0039,_0x51ff63=BattleManager[_0x3eae98(0xbc6)]();VisuMZ[_0x3eae98(0xa1e)][_0x3eae98(0x48f)][_0x3eae98(0xb33)](this);if(_0x51ff63){if(_0x51ff63===BattleManager[_0x3eae98(0xbc6)]())return;if(_0x51ff63===BattleManager[_0x3eae98(0xac9)])return;if(_0x51ff63[_0x3eae98(0x68a)]())_0x51ff63[_0x3eae98(0x68a)]()['stepBack']();}},VisuMZ[_0x1a0039(0xa1e)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x54c)],Scene_Battle['prototype'][_0x1a0039(0x54c)]=function(){const _0x1cbda2=_0x1a0039,_0x441e66=BattleManager[_0x1cbda2(0xbc6)]();if(_0x441e66&&_0x441e66[_0x1cbda2(0x68a)])_0x441e66['battler']()[_0x1cbda2(0x6cb)]();VisuMZ['BattleCore']['Scene_Battle_selectPreviousCommand']['call'](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x898)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x664)],Scene_Battle['prototype'][_0x1a0039(0x664)]=function(){const _0x218cb4=_0x1a0039;if(VisuMZ[_0x218cb4(0xa1e)][_0x218cb4(0x4ce)][_0x218cb4(0x636)][_0x218cb4(0x9a9)])return VisuMZ[_0x218cb4(0xa1e)][_0x218cb4(0x4ce)][_0x218cb4(0x636)][_0x218cb4(0x9a9)][_0x218cb4(0xb33)](this);return VisuMZ[_0x218cb4(0xa1e)][_0x218cb4(0x898)]['call'](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x90d)]=Scene_Battle['prototype'][_0x1a0039(0x196)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x196)]=function(){const _0xbaa55f=_0x1a0039;VisuMZ[_0xbaa55f(0xa1e)][_0xbaa55f(0x90d)][_0xbaa55f(0xb33)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x24e)]=function(){const _0x3384c7=_0x1a0039,_0x9c4008=this['_partyCommandWindow'];_0x9c4008[_0x3384c7(0xbe4)](_0x3384c7(0x680),this[_0x3384c7(0x696)][_0x3384c7(0x940)](this)),_0x9c4008[_0x3384c7(0xbe4)](_0x3384c7(0x28c),this[_0x3384c7(0x342)]['bind'](this));const _0x9fee41=this[_0x3384c7(0xa84)]();switch(_0x9fee41){case'xp':case _0x3384c7(0x3a9):return this[_0x3384c7(0x752)][_0x3384c7(0x39f)](0x1);break;}},Scene_Battle['prototype']['commandAutoBattle']=function(){const _0x1b1dde=_0x1a0039;BattleManager[_0x1b1dde(0xb01)]=!![],$gameParty[_0x1b1dde(0x43b)](),this['selectNextCommand'](),BattleManager[_0x1b1dde(0xb4c)]()&&(BattleManager[_0x1b1dde(0x47a)]=![]);},Scene_Battle['prototype'][_0x1a0039(0x342)]=function(){const _0x56138c=_0x1a0039;this[_0x56138c(0x565)]()?_0x56138c(0xb51)===_0x56138c(0x945)?(_0x400b99[_0x56138c(0x23c)]=!![],this[_0x56138c(0x172)](_0x120977)):(this['_callSceneOptions']=!![],this[_0x56138c(0xa33)][_0x56138c(0xb15)]('addText',VisuMZ[_0x56138c(0xa1e)][_0x56138c(0x4ce)][_0x56138c(0xa47)][_0x56138c(0x452)])):this[_0x56138c(0x881)]();},Scene_Battle['prototype']['isQueueOptionsMenu']=function(){const _0x121cd7=_0x1a0039;return BattleManager[_0x121cd7(0x847)]();},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x881)]=function(){const _0x10c0ee=_0x1a0039;this[_0x10c0ee(0xabe)]=![],this[_0x10c0ee(0x942)][_0x10c0ee(0x9fc)](),this[_0x10c0ee(0x56b)][_0x10c0ee(0x3c0)]=![];if(BattleManager[_0x10c0ee(0x9fd)]()){if('iauzD'!==_0x10c0ee(0x9d2)){if($dataSystem[_0x10c0ee(0x2a8)]||$dataSystem[_0x10c0ee(0x57a)]){if(_0x10c0ee(0x345)!=='Xtzdr'){if(this[_0x10c0ee(0xa9d)]===_0x10c0ee(0x573))this[_0x10c0ee(0xb65)]();else this[_0x10c0ee(0xa9d)]==='forceAction'?this[_0x10c0ee(0x8e9)]():_0x583e9b['BattleCore'][_0x10c0ee(0x75b)][_0x10c0ee(0xb33)](this,_0x3a088a);}else SceneManager[_0x10c0ee(0x31e)]();}}else{if(!_0x532e68[_0x10c0ee(0xa1e)][_0x10c0ee(0x4ce)][_0x10c0ee(0x636)][_0x10c0ee(0x51a)])return;_0x2902b3[_0x10c0ee(0xa1e)][_0x10c0ee(0x215)][_0x10c0ee(0xb33)](this,_0x1f2ab0);}}else($gameMap[_0x10c0ee(0x2a8)]()||$gameMap[_0x10c0ee(0x57a)]())&&('SHfDY'!==_0x10c0ee(0x610)?SceneManager[_0x10c0ee(0x31e)]():this[_0x10c0ee(0xac1)]());SceneManager['push'](Scene_Options);if(BattleManager[_0x10c0ee(0xb4c)]()){if(_0x10c0ee(0x986)===_0x10c0ee(0x986))BattleManager[_0x10c0ee(0x61c)]=BattleManager[_0x10c0ee(0xbc6)]();else return;}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xba3)]=Scene_Battle[_0x1a0039(0x6d2)]['updateBattleProcess'],Scene_Battle[_0x1a0039(0x6d2)]['updateBattleProcess']=function(){const _0x3bdd0e=_0x1a0039;VisuMZ[_0x3bdd0e(0xa1e)]['Scene_Battle_updateBattleProcess'][_0x3bdd0e(0xb33)](this);if(this['_callSceneOptions']&&!BattleManager[_0x3bdd0e(0xac9)])this['callOptions']();},VisuMZ[_0x1a0039(0xa1e)]['Scene_Battle_update']=Scene_Battle['prototype'][_0x1a0039(0x9fc)],Scene_Battle['prototype']['update']=function(){const _0x20e941=_0x1a0039;VisuMZ[_0x20e941(0xa1e)]['Scene_Battle_update'][_0x20e941(0xb33)](this),this[_0x20e941(0x747)]();},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xb86)]=function(){const _0xb89539=_0x1a0039,_0x59707e=this[_0xb89539(0x5b7)]();this[_0xb89539(0xab8)]=new Window_AutoBattleCancel(_0x59707e),this[_0xb89539(0xab8)]['hide'](),this[_0xb89539(0xb20)](this[_0xb89539(0xab8)]);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x5b7)]=function(){const _0xea30a9=_0x1a0039;return VisuMZ[_0xea30a9(0xa1e)][_0xea30a9(0x4ce)]['AutoBattle'][_0xea30a9(0x787)][_0xea30a9(0xb33)](this);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x9ed)]=function(){const _0x3accc0=_0x1a0039;this[_0x3accc0(0x2fe)]=[];},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x747)]=function(){const _0x29fc7b=_0x1a0039;if(!this[_0x29fc7b(0x2fe)])return;for(const _0x136d6a of this[_0x29fc7b(0x2fe)]){_0x136d6a&&_0x136d6a[_0x29fc7b(0x9fc)]();}},Scene_Battle[_0x1a0039(0x6d2)]['playOnceParallelInterpreter']=function(_0x92a471){const _0x4a8f7f=_0x1a0039,_0x1ecffe=$dataCommonEvents[_0x92a471];if(!_0x1ecffe)return;const _0x3227db=new Game_BattleOnceParallelInterpreter();this[_0x4a8f7f(0x84b)](_0x3227db),_0x3227db[_0x4a8f7f(0x32f)](_0x92a471);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x84b)]=function(_0x5080d4){const _0x4023ad=_0x1a0039;this[_0x4023ad(0x2fe)]=this['_onceParallelInterpreters']||[],this[_0x4023ad(0x2fe)]['push'](_0x5080d4);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x275)]=function(_0x378d3){const _0xb2a569=_0x1a0039;this['_onceParallelInterpreters']=this[_0xb2a569(0x2fe)]||[],this[_0xb2a569(0x2fe)]['remove'](_0x378d3);},Game_Troop[_0x1a0039(0x6d2)]['onBattleStartOnceParallels']=function(){const _0x1c9f46=_0x1a0039;for(const _0x20dfba of this[_0x1c9f46(0xafc)]()['pages']){if(_0x1c9f46(0x630)!==_0x1c9f46(0x21a)){if(!this[_0x1c9f46(0x9af)](_0x20dfba))continue;SceneManager['_scene'][_0x1c9f46(0x694)](_0x20dfba);}else _0x4de409[_0x1c9f46(0xa1e)][_0x1c9f46(0x198)][_0x1c9f46(0xb33)](this,_0x3f6bef),this['callNextMethod']();}},Game_Troop[_0x1a0039(0x6d2)][_0x1a0039(0x9af)]=function(_0x4cf07d){const _0x59f6ef=_0x1a0039;if(!_0x4cf07d)return;for(const _0x14b4a3 of _0x4cf07d['list']){if(_0x59f6ef(0xa2a)!==_0x59f6ef(0xa2a))this[_0x59f6ef(0xaac)][_0x59f6ef(0xb20)](this['_animationContainer']);else{if([0x6c,0x198]['includes'](_0x14b4a3[_0x59f6ef(0x13f)])){const _0x549fca=_0x14b4a3['parameters'][0x0];if(_0x549fca[_0x59f6ef(0x7f1)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x694)]=function(_0x42bfd3){const _0x1f9ad4=_0x1a0039;if(!_0x42bfd3)return;const _0x59eaf2=new Game_BattleOnceParallelInterpreter();this[_0x1f9ad4(0x84b)](_0x59eaf2),_0x59eaf2[_0x1f9ad4(0x834)](_0x42bfd3);};function _0x5893(_0x4c741c,_0x1eb959){const _0x53bedc=_0x53be();return _0x5893=function(_0x58934f,_0x9f834d){_0x58934f=_0x58934f-0x127;let _0x12a2c7=_0x53bedc[_0x58934f];return _0x12a2c7;},_0x5893(_0x4c741c,_0x1eb959);}function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter[_0x1a0039(0x6d2)]=Object[_0x1a0039(0x862)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x1a0039(0x6d2)][_0x1a0039(0x9a0)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x1a0039(0x6d2)][_0x1a0039(0x32f)]=function(_0x2c5740){const _0x3e888f=_0x1a0039,_0x46b88d=$dataCommonEvents[_0x2c5740];if(_0x46b88d){if(_0x3e888f(0x250)!==_0x3e888f(0x250))return _0x3e888f(0x3ba);else this[_0x3e888f(0x55a)](_0x46b88d[_0x3e888f(0x71c)],0x0);}else{if('QdsvU'!==_0x3e888f(0x809)){const _0x17d751=_0x6bc2e7['width'],_0x2f52d1=_0x328d86[_0x3e888f(0x917)]((_0x28640e[_0x3e888f(0x5d3)]-_0x17d751)/0x2),_0x5610e0=this['calcWindowHeight'](0x4,!![]),_0x499f7c=_0x327f83['boxHeight']-_0x5610e0+(_0x1c87a2[_0x3e888f(0x84d)]-_0x107d37[_0x3e888f(0x7b0)])/0x2;return new _0x221905(_0x2f52d1,_0x499f7c,_0x17d751,_0x5610e0);}else this[_0x3e888f(0x78b)]();}},Game_BattleOnceParallelInterpreter[_0x1a0039(0x6d2)][_0x1a0039(0x78b)]=function(){const _0x19a7e6=_0x1a0039;if(!SceneManager[_0x19a7e6(0x984)]())return;SceneManager[_0x19a7e6(0x784)][_0x19a7e6(0x275)](this),Game_Interpreter[_0x19a7e6(0x6d2)][_0x19a7e6(0x78b)][_0x19a7e6(0xb33)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x1a0039(0x834)]=function(_0x4a6870){const _0x124d76=_0x1a0039;if(_0x4a6870)'tHfsv'===_0x124d76(0x1c7)?this[_0x124d76(0x55a)](_0x4a6870['list'],0x0):(_0x18525b[_0x124d76(0xa1e)][_0x124d76(0x30e)][_0x124d76(0xb33)](this),_0x560769[_0x124d76(0xa1e)][_0x124d76(0x4ce)]['HpGauge'][_0x124d76(0x4ba)]&&this[_0x124d76(0xa4d)]());else{if(_0x124d76(0x837)!=='taatf'){const _0x3c6097=_0x213634[_0x339a3a];_0x3c6097&&_0x4fff83['reserveCommonEvent'](_0x157016);}else this[_0x124d76(0x78b)]();}},Scene_Battle['prototype']['isPartyCommandWindowDisabled']=function(){const _0x21d2a2=_0x1a0039;return VisuMZ[_0x21d2a2(0xa1e)]['Settings']['PartyCmd'][_0x21d2a2(0x745)];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x3c1)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x18f)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x18f)]=function(){const _0x30a082=_0x1a0039;if(this[_0x30a082(0x7f8)]())this['onDisabledPartyCommandSelection']();else{if('fRXYL'===_0x30a082(0x578))VisuMZ[_0x30a082(0xa1e)][_0x30a082(0x3c1)][_0x30a082(0xb33)](this);else return this['subject']()[_0x30a082(0x611)]();}},Scene_Battle['prototype']['onDisabledPartyCommandSelection']=function(){const _0x526954=_0x1a0039;if(BattleManager['isDTB']())this['selectNextCommand']();else BattleManager[_0x526954(0xb4c)]()&&(_0x526954(0x505)===_0x526954(0x505)?VisuMZ[_0x526954(0xa1e)][_0x526954(0x3c1)][_0x526954(0xb33)](this):(_0x3177af+=_0x5c002c,_0x543f7b+=_0x84bf53[_0x526954(0x261)]()?-_0x59a3ab:_0x50de78));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x7fc)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x927)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x927)]=function(){const _0x2783c2=_0x1a0039;BattleManager['isTpb']()?(this[_0x2783c2(0xb9c)](),this[_0x2783c2(0x8d6)]()):_0x2783c2(0x78f)==='eILwf'?(_0x305f43['isAttack']()&&_0x3a6c55['isActor']()&&this[_0x2783c2(0xb15)](_0x2783c2(0x5e8),_0x4ea9aa,_0x22d756),this[_0x2783c2(0xafa)](_0x24116b,_0x320202,_0x5f2729)):VisuMZ['BattleCore'][_0x2783c2(0x7fc)]['call'](this);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xb9c)]=function(){const _0x1ace30=_0x1a0039;if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return;if(Imported[_0x1ace30(0x81c)]&&BattleManager['isCTB']())return;const _0x47ee4f=$gameParty['aliveMembers']()[_0x1ace30(0x538)](_0x5dfb8e=>_0x5dfb8e[_0x1ace30(0x80f)]()&&_0x5dfb8e[_0x1ace30(0x64c)]());BattleManager[_0x1ace30(0x87f)]=_0x47ee4f[0x0]||null,BattleManager[_0x1ace30(0x87f)]&&BattleManager[_0x1ace30(0x87f)][_0x1ace30(0x76e)](_0x1ace30(0x5ed));},VisuMZ['BattleCore'][_0x1a0039(0x508)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xa74)],Scene_Battle[_0x1a0039(0x6d2)]['createActorCommandWindow']=function(){const _0x3bf420=_0x1a0039;VisuMZ[_0x3bf420(0xa1e)][_0x3bf420(0x508)]['call'](this),this[_0x3bf420(0xaa5)]();},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xaa5)]=function(){const _0x334cc8=_0x1a0039,_0x204cb2=this[_0x334cc8(0xbd2)];_0x204cb2[_0x334cc8(0xbe4)](_0x334cc8(0x206),this['actorCommandEscape'][_0x334cc8(0x940)](this)),_0x204cb2['setHandler'](_0x334cc8(0x680),this[_0x334cc8(0x325)][_0x334cc8(0x940)](this)),_0x204cb2[_0x334cc8(0xbe4)](_0x334cc8(0x1bc),this[_0x334cc8(0x982)][_0x334cc8(0x940)](this));if(BattleManager[_0x334cc8(0xb4c)]()){if(this[_0x334cc8(0x7f8)]())delete _0x204cb2[_0x334cc8(0xa49)][_0x334cc8(0xb7a)];else{if(_0x334cc8(0xb76)!==_0x334cc8(0xb76)){const _0x30038d=_0x34d463[0x0][_0x334cc8(0x4a8)](_0x2033ce[0x0]),_0x9d186c=_0x2ecb6c[0x1][_0x334cc8(0x4a8)](_0x4c19a0[0x1]),_0x2e5809=new _0x51de0c(_0x5da267[_0x334cc8(0x4a8)](_0x9d186c),'i');_0x541f43[_0x30038d]=_0x2e5809;}else _0x204cb2[_0x334cc8(0xbe4)]('cancel',this[_0x334cc8(0x480)][_0x334cc8(0x940)](this));}}},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x88b)]=function(){const _0x237f92=_0x1a0039;this[_0x237f92(0x2d5)]();},Scene_Battle[_0x1a0039(0x6d2)]['actorCommandAutoBattle']=function(){const _0x3545c2=_0x1a0039;BattleManager[_0x3545c2(0xbc6)]()[_0x3545c2(0x85d)](),BattleManager[_0x3545c2(0xa21)](),BattleManager[_0x3545c2(0x1b5)](),this['changeInputWindow']();},Scene_Battle[_0x1a0039(0x6d2)]['actorCommandSingleSkill']=function(){const _0x7b5dcb=_0x1a0039,_0x17c47b=BattleManager[_0x7b5dcb(0x5de)]();_0x17c47b[_0x7b5dcb(0x532)](this[_0x7b5dcb(0xbd2)][_0x7b5dcb(0xb12)]()),this[_0x7b5dcb(0x5bc)]();},Scene_Battle['prototype']['actorCommandCancelTPB']=function(){const _0x585fbc=_0x1a0039;this[_0x585fbc(0x806)]()?this['performTpbActiveCheckSwitch']():_0x585fbc(0x9b3)===_0x585fbc(0xa4f)?_0xc63c37=_0x488d8a[_0x585fbc(0x84e)](_0x3f57b7):this[_0x585fbc(0x998)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x534)]=![],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x806)]=function(){const _0x79a775=_0x1a0039;if(Imported[_0x79a775(0x81c)]&&BattleManager[_0x79a775(0xb64)]()){if('DPXWP'!==_0x79a775(0x6c0))return![];else _0x37d1d6[_0x79a775(0xa1e)][_0x79a775(0xae6)]['call'](this);}else{if(!VisuMZ[_0x79a775(0xa1e)][_0x79a775(0x534)])return![];const _0x493430=$gameParty[_0x79a775(0x4d2)]()[_0x79a775(0x538)](_0xff7612=>_0xff7612[_0x79a775(0x80f)]()&&_0xff7612['canInput']());return _0x493430[_0x79a775(0x2c0)]>0x0&&BattleManager[_0x79a775(0xbc6)]()!==_0x493430[_0x493430[_0x79a775(0x2c0)]-0x1];}},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xbcf)]=function(){const _0x912505=_0x1a0039,_0x5737fe=BattleManager[_0x912505(0xbc6)](),_0x44c608=_0x5737fe[_0x912505(0x68a)]();if(_0x44c608)_0x44c608['stepBack']();const _0x1fc025=$gameParty[_0x912505(0x4d2)]()[_0x912505(0x538)](_0x2d13e5=>_0x2d13e5[_0x912505(0x80f)]()&&_0x2d13e5[_0x912505(0x64c)]()),_0x48d0c4=_0x1fc025[_0x912505(0xadc)](_0x5737fe),_0x201f3f=_0x1fc025[_0x48d0c4+0x1];BattleManager[_0x912505(0x87f)]=_0x201f3f||null;if(_0x201f3f)_0x201f3f[_0x912505(0x76e)]('inputting');_0x5737fe[_0x912505(0x76e)](_0x912505(0xb98)),this[_0x912505(0x135)]();},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x998)]=function(){const _0x343505=_0x1a0039;this[_0x343505(0x752)][_0x343505(0x55a)](),this[_0x343505(0xbd2)][_0x343505(0xb04)]();if(!VisuMZ[_0x343505(0xa1e)][_0x343505(0x534)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x343505(0xb64)]())return;if(BattleManager[_0x343505(0x87f)]){BattleManager['_currentActor'][_0x343505(0x76e)](_0x343505(0xb98));const _0x12c9bc=BattleManager['_currentActor'][_0x343505(0x68a)]();if(_0x12c9bc)_0x12c9bc[_0x343505(0x6cb)]();}BattleManager[_0x343505(0x87f)]=null;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x772)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x477)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x477)]=function(){const _0x18d1d9=_0x1a0039;VisuMZ['BattleCore'][_0x18d1d9(0x772)]['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x346)]=function(){const _0x333f12=_0x1a0039;this[_0x333f12(0xbd2)]['setHelpWindow'](this[_0x333f12(0x6e3)]),this[_0x333f12(0x752)][_0x333f12(0x592)](this[_0x333f12(0x6e3)]);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xa84)]=function(){const _0x473f6a=_0x1a0039;if($gameTemp[_0x473f6a(0x209)]!==undefined)return $gameTemp[_0x473f6a(0x209)];if(this[_0x473f6a(0x1d0)])return this[_0x473f6a(0x1d0)];return this[_0x473f6a(0x1d0)]=VisuMZ[_0x473f6a(0xa1e)][_0x473f6a(0x4ce)]['BattleLayout'][_0x473f6a(0xb0f)][_0x473f6a(0x6f5)]()[_0x473f6a(0x850)](),this[_0x473f6a(0x1d0)]===_0x473f6a(0x189)&&!Imported[_0x473f6a(0x93c)]&&(this[_0x473f6a(0x1d0)]=_0x473f6a(0x9dc)),this[_0x473f6a(0x1d0)];},VisuMZ['BattleCore'][_0x1a0039(0x888)]=Scene_Battle['prototype'][_0x1a0039(0x48c)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x48c)]=function(){const _0x422ef7=_0x1a0039,_0x1322cf=this[_0x422ef7(0xa84)]();switch(_0x1322cf){case _0x422ef7(0x71c):return this[_0x422ef7(0x8c2)](Math['max'](0x1,$gameParty[_0x422ef7(0x6d9)]()),!![]);break;default:return VisuMZ[_0x422ef7(0xa1e)]['Scene_Battle_windowAreaHeight'][_0x422ef7(0xb33)](this);break;}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x1d8)]=Scene_Battle[_0x1a0039(0x6d2)]['helpWindowRect'],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x51d)]=function(){const _0xd00c82=_0x1a0039,_0x402408=this[_0xd00c82(0xa84)]();switch(_0x402408){case _0xd00c82(0x459):return this[_0xd00c82(0xa34)]();break;case _0xd00c82(0x9dc):case _0xd00c82(0x71c):case'xp':case _0xd00c82(0x3a9):default:return VisuMZ[_0xd00c82(0xa1e)][_0xd00c82(0x1d8)][_0xd00c82(0xb33)](this);break;}},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x518)]=function(){const _0x476483=_0x1a0039,_0x24529a=this['battleLayoutStyle']();switch(_0x24529a){case'xp':case _0x476483(0x3a9):return this[_0x476483(0x88e)]();break;case _0x476483(0x459):return this[_0x476483(0x6e0)]();break;case'default':case _0x476483(0x71c):default:return this[_0x476483(0x6c8)]();break;}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x838)]=Scene_Battle['prototype'][_0x1a0039(0x812)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x812)]=function(){const _0x25d713=_0x1a0039,_0x1b5fa1=this[_0x25d713(0xa84)]();switch(_0x1b5fa1){case'xp':case _0x25d713(0x3a9):return this[_0x25d713(0x779)]();break;case _0x25d713(0x459):return this['partyCommandWindowRectBorderStyle']();case _0x25d713(0x9dc):case _0x25d713(0x71c):default:return this[_0x25d713(0x67a)]();break;}},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x67a)]=function(){const _0x3c760e=_0x1a0039,_0x4a315f=VisuMZ[_0x3c760e(0xa1e)][_0x3c760e(0x4ce)][_0x3c760e(0x687)],_0x414ec4=_0x4a315f[_0x3c760e(0x4c8)]||0xc0,_0x146bfd=this[_0x3c760e(0x48c)](),_0x21e540=this[_0x3c760e(0x902)]()?Graphics['boxWidth']-_0x414ec4:0x0,_0x5cc239=Graphics['boxHeight']-_0x146bfd;return new Rectangle(_0x21e540,_0x5cc239,_0x414ec4,_0x146bfd);},Scene_Battle[_0x1a0039(0x6d2)]['actorCommandWindowRect']=function(){const _0x52a9ed=_0x1a0039;return this[_0x52a9ed(0x812)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xade)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x716)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x716)]=function(){const _0x2110af=_0x1a0039,_0xe743d4=this[_0x2110af(0xa84)]();switch(_0xe743d4){case'xp':case _0x2110af(0x3a9):case _0x2110af(0x459):break;case _0x2110af(0x9dc):case _0x2110af(0x71c):default:VisuMZ[_0x2110af(0xa1e)][_0x2110af(0xade)][_0x2110af(0xb33)](this);break;}},VisuMZ['BattleCore']['Scene_Battle_startActorSelection']=Scene_Battle[_0x1a0039(0x6d2)]['startActorSelection'],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x177)]=function(){const _0x9c1f38=_0x1a0039;VisuMZ['BattleCore'][_0x9c1f38(0x3ae)][_0x9c1f38(0xb33)](this),this[_0x9c1f38(0x7e5)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x3a2)]=Scene_Battle['prototype'][_0x1a0039(0x626)],Scene_Battle[_0x1a0039(0x6d2)]['startEnemySelection']=function(){const _0x5911c6=_0x1a0039;VisuMZ[_0x5911c6(0xa1e)][_0x5911c6(0x3a2)][_0x5911c6(0xb33)](this),this['_enemyWindow'][_0x5911c6(0x761)](),this[_0x5911c6(0x7e5)]();},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x7e5)]=function(){const _0x119132=_0x1a0039,_0x28a558=this['battleLayoutStyle']();if(['xp','portrait',_0x119132(0x459)][_0x119132(0x604)](_0x28a558)){if(_0x119132(0x645)!==_0x119132(0x1f0))this[_0x119132(0xbd2)][_0x119132(0xb04)]();else{this[_0x119132(0x5a0)](0x0,0x0,0x0,0x0);return;}}(_0x28a558==='border'||this[_0x119132(0x150)]())&&(this[_0x119132(0x1b3)][_0x119132(0xb04)](),this[_0x119132(0x12b)][_0x119132(0xb04)]());},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xb74)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xb7c)],Scene_Battle['prototype'][_0x1a0039(0xb7c)]=function(){const _0x45289b=_0x1a0039;VisuMZ['BattleCore']['Scene_Battle_onActorOk'][_0x45289b(0xb33)](this),this[_0x45289b(0x62b)]();},Scene_Battle[_0x1a0039(0x6d2)]['isNonSubmenuCancel']=function(){const _0xfe88b5=_0x1a0039;return[_0xfe88b5(0xac3),_0xfe88b5(0xb95),_0xfe88b5(0x1bc)][_0xfe88b5(0x604)](this['_actorCommandWindow']['currentSymbol']());},VisuMZ['BattleCore'][_0x1a0039(0x5cb)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x731)],Scene_Battle[_0x1a0039(0x6d2)]['onActorCancel']=function(){const _0x29c798=_0x1a0039;this[_0x29c798(0x5b8)]()?_0x29c798(0x21d)===_0x29c798(0x20a)?(this[_0x29c798(0x853)]=this[_0x29c798(0x5d5)],this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this[_0x29c798(0x853)]=0x0)):(this[_0x29c798(0xa98)][_0x29c798(0x65e)](),this[_0x29c798(0x54f)][_0x29c798(0x319)](),this[_0x29c798(0xbd2)][_0x29c798(0x6e2)]()):_0x29c798(0x6fb)===_0x29c798(0x38a)?_0x58963a[_0x29c798(0x45d)](_0x5f1790):VisuMZ['BattleCore'][_0x29c798(0x5cb)]['call'](this),this[_0x29c798(0xa4e)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x8f3)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x5ec)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x5ec)]=function(){const _0x5e8bef=_0x1a0039;VisuMZ[_0x5e8bef(0xa1e)][_0x5e8bef(0x8f3)][_0x5e8bef(0xb33)](this),this[_0x5e8bef(0x62b)]();},VisuMZ['BattleCore'][_0x1a0039(0xb1e)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xadf)],Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xadf)]=function(){const _0x3f1fdc=_0x1a0039;this[_0x3f1fdc(0x5b8)]()?(this['_statusWindow'][_0x3f1fdc(0x65e)](),this[_0x3f1fdc(0xad4)][_0x3f1fdc(0x319)](),this[_0x3f1fdc(0xbd2)][_0x3f1fdc(0x6e2)]()):_0x3f1fdc(0x70b)!==_0x3f1fdc(0x3bf)?VisuMZ[_0x3f1fdc(0xa1e)][_0x3f1fdc(0xb1e)]['call'](this):this[_0x3f1fdc(0x38e)]=_0x1e19a4[_0x3f1fdc(0xa1e)]['Settings'][_0x3f1fdc(0xab1)][_0x3f1fdc(0x336)][_0x3f1fdc(0xb33)](this),this[_0x3f1fdc(0xa4e)]();},Scene_Battle[_0x1a0039(0x6d2)]['okTargetSelectionVisibility']=function(){const _0x425450=_0x1a0039,_0x3b7b1f=this['battleLayoutStyle']();(_0x3b7b1f==='border'||this[_0x425450(0x150)]())&&(this[_0x425450(0x1b3)][_0x425450(0xb30)](),this[_0x425450(0x1b3)]['active']&&this[_0x425450(0x1b3)]['show'](),this[_0x425450(0x12b)][_0x425450(0xb30)](),this[_0x425450(0x12b)][_0x425450(0x6f0)]&&this['_itemWindow'][_0x425450(0x65e)]());},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xa4e)]=function(){const _0x8dbc42=_0x1a0039,_0x29175a=this[_0x8dbc42(0xa84)]();['xp',_0x8dbc42(0x3a9),_0x8dbc42(0x459)][_0x8dbc42(0x604)](_0x29175a)&&this[_0x8dbc42(0xbd2)][_0x8dbc42(0xb30)](),this[_0x8dbc42(0x62b)]();},Scene_Battle[_0x1a0039(0x6d2)]['statusWindowRectDefaultStyle']=function(){const _0x421c0d=_0x1a0039,_0x2558db=VisuMZ[_0x421c0d(0xa1e)][_0x421c0d(0x4ce)][_0x421c0d(0x687)],_0x2ab9d0=Window_BattleStatus[_0x421c0d(0x6d2)][_0x421c0d(0x1f2)](),_0x5495e6=Graphics['boxWidth']-(_0x2558db['CommandWidth']||0xc0),_0xab0a5b=this[_0x421c0d(0x48c)]()+_0x2ab9d0,_0x16a8b9=this[_0x421c0d(0x902)]()?0x0:Graphics['boxWidth']-_0x5495e6,_0x519788=Graphics[_0x421c0d(0x7b0)]-_0xab0a5b+_0x2ab9d0;return new Rectangle(_0x16a8b9,_0x519788,_0x5495e6,_0xab0a5b);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x88e)]=function(){const _0x50c8ae=_0x1a0039,_0x17d7e2=Window_BattleStatus[_0x50c8ae(0x6d2)][_0x50c8ae(0x1f2)](),_0x1cf4c3=Graphics[_0x50c8ae(0x5d3)],_0x1ddf5b=this[_0x50c8ae(0x48c)]()+_0x17d7e2,_0x23d00d=0x0,_0x368ed6=Graphics[_0x50c8ae(0x7b0)]-_0x1ddf5b+_0x17d7e2;return new Rectangle(_0x23d00d,_0x368ed6,_0x1cf4c3,_0x1ddf5b);},Scene_Battle['prototype'][_0x1a0039(0x779)]=function(){const _0xf7534e=_0x1a0039,_0x5e8175=Graphics[_0xf7534e(0x5d3)]/0x2,_0x411198=this['calcWindowHeight'](VisuMZ[_0xf7534e(0xa1e)][_0xf7534e(0x4ce)][_0xf7534e(0x687)]['XPActorCommandLines'],!![]),_0x1d847f=Math['round']((Graphics['boxWidth']-_0x5e8175)/0x2),_0x5de62c=Graphics[_0xf7534e(0x7b0)]-_0x411198-this[_0xf7534e(0x88e)]()['height'];return new Rectangle(_0x1d847f,_0x5de62c,_0x5e8175,_0x411198);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xa34)]=function(){const _0x390831=_0x1a0039,_0x51add1=Graphics[_0x390831(0x926)],_0x25228f=Math['round']((Graphics[_0x390831(0x5d3)]-_0x51add1)/0x2),_0x4f89e3=this[_0x390831(0x89c)](),_0x47d0ad=(Graphics[_0x390831(0x84d)]-Graphics[_0x390831(0x7b0)])/-0x2;return new Rectangle(_0x25228f,_0x47d0ad,_0x51add1,_0x4f89e3);},Scene_Battle['prototype'][_0x1a0039(0x6e0)]=function(){const _0x411d0e=_0x1a0039,_0xd4db0d=Graphics[_0x411d0e(0x926)],_0x4c4f98=Math['round']((Graphics[_0x411d0e(0x5d3)]-_0xd4db0d)/0x2),_0x42b0b0=this['calcWindowHeight'](0x4,!![]),_0x545fb4=Graphics[_0x411d0e(0x7b0)]-_0x42b0b0+(Graphics[_0x411d0e(0x84d)]-Graphics[_0x411d0e(0x7b0)])/0x2;return new Rectangle(_0x4c4f98,_0x545fb4,_0xd4db0d,_0x42b0b0);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x463)]=function(){const _0x25159a=_0x1a0039,_0x40426c=Math[_0x25159a(0x8bb)](Graphics[_0x25159a(0x926)]/0x3),_0x110fa6=this[_0x25159a(0x902)]()?(Graphics[_0x25159a(0x926)]+Graphics[_0x25159a(0x5d3)])/0x2-_0x40426c:(Graphics[_0x25159a(0x926)]-Graphics[_0x25159a(0x5d3)])/-0x2,_0x175faa=this[_0x25159a(0xa34)](),_0x107db1=_0x175faa['y']+_0x175faa[_0x25159a(0x84d)],_0x3bfba9=this[_0x25159a(0x6e0)](),_0xbb2767=_0x3bfba9['y']-_0x107db1;return new Rectangle(_0x110fa6,_0x107db1,_0x40426c,_0xbb2767);},Scene_Battle[_0x1a0039(0x6d2)]['skillItemWindowRectBorderStyle']=function(){const _0x4cb2ee=_0x1a0039,_0x324cd1=Math[_0x4cb2ee(0xb9b)](Graphics[_0x4cb2ee(0x926)]/0x3),_0x2aaf3d=Math[_0x4cb2ee(0x917)]((Graphics[_0x4cb2ee(0x5d3)]-_0x324cd1)/0x2),_0x922db7=this['partyCommandWindowRectBorderStyle'](),_0x563c3a=_0x922db7['y'],_0x55a14b=_0x922db7['height'];return new Rectangle(_0x2aaf3d,_0x563c3a,_0x324cd1,_0x55a14b);},Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x59a)]=function(){const _0x5c5723=_0x1a0039;this[_0x5c5723(0x8f0)]['y']=this[_0x5c5723(0x6e3)]['y']+this[_0x5c5723(0x6e3)][_0x5c5723(0x84d)];if(this[_0x5c5723(0x902)]()){if(_0x5c5723(0xbc4)==='XFBrx')_0x3b09f1+=(_0x24bf08[_0x5c5723(0x926)]-_0x1aa2fe)/0x2;else{if(this[_0x5c5723(0xa84)]()===_0x5c5723(0x459))this[_0x5c5723(0x8f0)]['x']=0x8;else{if(_0x5c5723(0x5bb)===_0x5c5723(0x5bb))this[_0x5c5723(0x8f0)]['x']=-this[_0x5c5723(0x8f0)][_0x5c5723(0x926)]-0x4;else return this[_0x5c5723(0xae2)][_0x1758fb];}}}else this[_0x5c5723(0x8f0)]['x']=Graphics['width']-(Graphics[_0x5c5723(0x926)]-Graphics[_0x5c5723(0x5d3)])/0x2-this[_0x5c5723(0x8f0)][_0x5c5723(0x926)]-0x4;},VisuMZ['BattleCore'][_0x1a0039(0x4da)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xb0e)],Scene_Battle[_0x1a0039(0x6d2)]['skillWindowRect']=function(){const _0x4ad24c=_0x1a0039;if(this[_0x4ad24c(0xa84)]()===_0x4ad24c(0x459)){if(_0x4ad24c(0x544)!==_0x4ad24c(0x2db))return this[_0x4ad24c(0x95d)]();else{const _0x35962e=this[_0x4ad24c(0x2c2)],_0x56fb0a=_0x35962e['globalAlpha'];_0x3d0233=_0x310843||0xffffffff;let _0x17f25d=_0x3978ed,_0x16f87c=_0x36461a[_0x4ad24c(0x917)](_0x5f1357+0x18/0x2+this['fontSize']*0.35);_0x3045cb===_0x4ad24c(0x36f)&&(_0x17f25d+=_0x1b52d5/0x2),_0x16c03b===_0x4ad24c(0x283)&&(_0x17f25d+=_0x304460),_0x35962e[_0x4ad24c(0x63f)](),_0x35962e[_0x4ad24c(0xa94)]=this[_0x4ad24c(0x8dd)](),_0x35962e[_0x4ad24c(0x316)]=_0x52237d,_0x35962e[_0x4ad24c(0x5f8)]=_0x4ad24c(0x9e0),_0x35962e[_0x4ad24c(0xaaa)]=0x1,this[_0x4ad24c(0x67e)](_0x3338da,_0x17f25d,_0x16f87c,_0x4650a3),_0x35962e['globalAlpha']=_0x56fb0a,this[_0x4ad24c(0x914)](_0x44575a,_0x17f25d,_0x16f87c,_0x4b2d0e),_0x35962e[_0x4ad24c(0xb63)](),this['_baseTexture']['update']();}}else return this[_0x4ad24c(0x150)]()?'VHLQY'===_0x4ad24c(0xb48)?_0x49bb99[_0x4ad24c(0x4d2)]()[_0x4ad24c(0x538)](_0x465483=>_0x465483!==_0x2709f2):this['skillItemWindowRectMiddle']():VisuMZ[_0x4ad24c(0xa1e)]['Scene_Battle_skillWindowRect']['call'](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x4dd)]=Scene_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xa75)],Scene_Battle[_0x1a0039(0x6d2)]['itemWindowRect']=function(){const _0x1480f0=_0x1a0039;if(this[_0x1480f0(0xa84)]()===_0x1480f0(0x459))return this[_0x1480f0(0x95d)]();else return this[_0x1480f0(0x150)]()?this[_0x1480f0(0x6cd)]():VisuMZ['BattleCore'][_0x1480f0(0x4dd)][_0x1480f0(0xb33)](this);},Scene_Battle['prototype'][_0x1a0039(0x150)]=function(){const _0x210a89=_0x1a0039;return VisuMZ[_0x210a89(0xa1e)][_0x210a89(0x4ce)]['BattleLayout'][_0x210a89(0x600)];},Scene_Battle[_0x1a0039(0x6d2)]['skillItemWindowRectMiddle']=function(){const _0x469930=_0x1a0039,_0x338147=Sprite_Button[_0x469930(0x6d2)]['blockWidth']()*0x2+0x4;let _0x396dfa=Graphics[_0x469930(0x5d3)]-_0x338147;Imported[_0x469930(0x212)]&&SceneManager[_0x469930(0x8e3)]()&&(_0x396dfa+=_0x338147);const _0x459aca=this['helpAreaBottom'](),_0x427ff2=Graphics[_0x469930(0x7b0)]-_0x459aca-this[_0x469930(0x518)]()[_0x469930(0x84d)]+Window_BattleStatus[_0x469930(0x6d2)][_0x469930(0x1f2)](),_0x548bab=0x0;return new Rectangle(_0x548bab,_0x459aca,_0x396dfa,_0x427ff2);},Scene_Battle[_0x1a0039(0x6d2)]['createEnemyNameContainer']=function(){const _0x13cc7d=_0x1a0039;if(!VisuMZ[_0x13cc7d(0xa1e)][_0x13cc7d(0x4ce)][_0x13cc7d(0x814)]['NameLegacy'])return;this['_enemyNameContainer']=new Sprite(),this[_0x13cc7d(0x35a)]['x']=this['_windowLayer']['x'],this[_0x13cc7d(0x35a)]['y']=this[_0x13cc7d(0x56b)]['y'];const _0x1eabda=this[_0x13cc7d(0x7d3)][_0x13cc7d(0xadc)](this[_0x13cc7d(0x56b)]);this[_0x13cc7d(0x5e4)](this[_0x13cc7d(0x35a)],_0x1eabda);for(let _0xb05df3=0x0;_0xb05df3<0x8;_0xb05df3++){const _0x37b4d3=new Window_EnemyName(_0xb05df3);this[_0x13cc7d(0x35a)][_0x13cc7d(0xb20)](_0x37b4d3);}},Sprite_Battler[_0x1a0039(0xa46)]=VisuMZ['BattleCore'][_0x1a0039(0x4ce)]['Actor'][_0x1a0039(0x9ad)],VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x1d9)]=Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x68c)],Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x68c)]=function(){const _0x5e721e=_0x1a0039;VisuMZ[_0x5e721e(0xa1e)][_0x5e721e(0x1d9)][_0x5e721e(0xb33)](this),this[_0x5e721e(0x63e)]();if(this['constructor']===Sprite_Enemy)this[_0x5e721e(0x2c5)]();this[_0x5e721e(0x7d1)]();},Sprite_Battler[_0x1a0039(0x6d2)]['initMembersBattleCore']=function(){const _0x55fb14=_0x1a0039;this[_0x55fb14(0x1d4)]=0x0,this[_0x55fb14(0x9da)]=0x0,this[_0x55fb14(0x4a5)]=0x0,this[_0x55fb14(0x43d)]=0x0,this[_0x55fb14(0x15b)]=0x0,this[_0x55fb14(0x35e)]=0x0,this[_0x55fb14(0x390)]=_0x55fb14(0x3d0),this[_0x55fb14(0x267)]=0x0,this[_0x55fb14(0x69d)]=0x0,this[_0x55fb14(0x2df)]=0x0,this[_0x55fb14(0x389)]=0x0,this['_targetOpacity']=0xff,this[_0x55fb14(0x886)]=0x0,this[_0x55fb14(0x991)]=0x0,this[_0x55fb14(0x6ff)]=_0x55fb14(0x3d0),this[_0x55fb14(0x853)]=0x0,this['_targetAngle']=0x0,this[_0x55fb14(0x618)]=0x0,this[_0x55fb14(0xb34)]=0x0,this[_0x55fb14(0x821)]=_0x55fb14(0x3d0),this[_0x55fb14(0x50d)]=!![],this[_0x55fb14(0x39e)]=0x0,this[_0x55fb14(0x4ae)]=0x0,this[_0x55fb14(0x677)]=0x0,this[_0x55fb14(0x7e9)]=0x0,this['_skewDuration']=0x0,this[_0x55fb14(0x8ca)]=0x0,this[_0x55fb14(0x7f6)]=_0x55fb14(0x3d0),this[_0x55fb14(0xad8)]=0x1,this[_0x55fb14(0x3d3)]=0x1,this['_targetGrowX']=0x1,this[_0x55fb14(0x2b4)]=0x1,this[_0x55fb14(0xb61)]=0x0,this[_0x55fb14(0x7dc)]=0x0,this['_growEasing']=_0x55fb14(0x3d0),this[_0x55fb14(0xb3a)]=0x1,this[_0x55fb14(0x980)]=0x0,this['_targetHomeY']=0x0,this[_0x55fb14(0x41b)]=0x0,this['_homeWholeDuration']=0x0,this[_0x55fb14(0x73d)]=_0x55fb14(0x3d0);},Sprite_Battler['prototype'][_0x1a0039(0x2c5)]=function(){const _0x4e3681=_0x1a0039;this[_0x4e3681(0x757)]=new Sprite(),this[_0x4e3681(0x757)][_0x4e3681(0x3bc)]=ImageManager[_0x4e3681(0x6de)](_0x4e3681(0x8a5)),this['_shadowSprite'][_0x4e3681(0x3bc)][_0x4e3681(0x7a2)]=VisuMZ[_0x4e3681(0xa1e)][_0x4e3681(0x4ce)][_0x4e3681(0x429)][_0x4e3681(0x3aa)],this[_0x4e3681(0x757)]['anchor']['x']=0.5,this[_0x4e3681(0x757)][_0x4e3681(0x29d)]['y']=0.5,this[_0x4e3681(0x757)]['y']=-0x2,this[_0x4e3681(0x757)][_0x4e3681(0x3c0)]=![],this[_0x4e3681(0xb20)](this[_0x4e3681(0x757)]);},Sprite_Battler[_0x1a0039(0x6d2)]['createDistortionSprite']=function(){const _0x53f832=_0x1a0039;this[_0x53f832(0xa04)]=new Sprite(),this[_0x53f832(0xa04)][_0x53f832(0x29d)]['x']=0.5,this[_0x53f832(0xa04)][_0x53f832(0x29d)]['y']=0.5,this[_0x53f832(0xb20)](this[_0x53f832(0xa04)]);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x16c)]=function(){const _0x19862b=_0x1a0039;if(!this[_0x19862b(0xa04)])return;if(this[_0x19862b(0x757)]){if(_0x19862b(0xa88)===_0x19862b(0xa88)){const _0x453548=this['getChildIndex'](this[_0x19862b(0xa04)]);this[_0x19862b(0x5e4)](this[_0x19862b(0x757)],_0x453548),this[_0x19862b(0x4ec)]();}else this['_linkedSprite']=_0x34f956;}this[_0x19862b(0x851)]&&(_0x19862b(0x767)===_0x19862b(0x767)?this['_distortionSprite'][_0x19862b(0xb20)](this[_0x19862b(0x851)]):this[_0x19862b(0xae8)](_0x19862b(0x3cf)));if(this[_0x19862b(0xba4)]){if(_0x19862b(0x9f1)!=='aAGYn')return _0x1707bb['isActor']()?_0x266502[_0x19862b(0x241)]()[_0x19862b(0x2c0)]||0x1:0x1;else this['_distortionSprite'][_0x19862b(0xb20)](this['_weaponSprite']);}this['_mainSprite']&&this[_0x19862b(0xa04)][_0x19862b(0xb20)](this['_mainSprite']),this['_dragonbonesSpriteContainer']&&(_0x19862b(0x96d)===_0x19862b(0xbb1)?this[_0x19862b(0xa84)]()===_0x19862b(0x459)?this[_0x19862b(0x8f0)]['x']=0x8:this[_0x19862b(0x8f0)]['x']=-this[_0x19862b(0x8f0)]['width']-0x4:this[_0x19862b(0xa04)][_0x19862b(0xb20)](this[_0x19862b(0x318)]));},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x4ec)]=function(){const _0x43b030=_0x1a0039;if(!this['_shadowSprite'])return;if(this[_0x43b030(0x414)]&&this[_0x43b030(0x414)][_0x43b030(0x4ad)]()){const _0x271f42=this[_0x43b030(0x757)][_0x43b030(0x3bc)];this[_0x43b030(0x757)][_0x43b030(0x5bd)](0x0,0x0,_0x271f42[_0x43b030(0x926)],_0x271f42['height']);}else _0x43b030(0x8fe)!==_0x43b030(0xa2b)?this[_0x43b030(0x757)][_0x43b030(0x5bd)](0x0,0x0,0x0,0x0):(_0xb99aab[_0x43b030(0xa1e)][_0x43b030(0x7be)][_0x43b030(0xb33)](this),this['y']=_0x46ef39['height']*0xa);},Sprite_Battler['prototype']['damageContainer']=function(){const _0x1c656f=_0x1a0039;return SceneManager['isSceneBattle']()?SceneManager[_0x1c656f(0x784)][_0x1c656f(0x942)][_0x1c656f(0x45f)]:_0x1c656f(0x33b)==='qmsAI'?this[_0x1c656f(0x599)]:!![];},Sprite_Battler['prototype']['setupTextPopup']=function(_0x470bcc,_0x277863){const _0x20c6bb=_0x1a0039;if(!this[_0x20c6bb(0x414)][_0x20c6bb(0x427)]())return;const _0x3a292e=VisuMZ[_0x20c6bb(0xa1e)]['Settings']['Damage'],_0x1a09ee=new Sprite_Damage();_0x1a09ee[_0x20c6bb(0x792)]=_0x3a292e['PopupDuration'],this[_0x20c6bb(0x441)](_0x1a09ee),_0x1a09ee['setupTextPopup'](_0x470bcc,_0x277863),this[_0x20c6bb(0xaf5)](_0x1a09ee);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xbbe)]=function(_0x2e4411,_0xfb20f7,_0x4b26ed){const _0x252863=_0x1a0039;if(!this['_battler'][_0x252863(0x427)]())return;const _0x7957e2=VisuMZ[_0x252863(0xa1e)][_0x252863(0x4ce)]['Damage'],_0x8d2f93=new Sprite_Damage();_0x8d2f93[_0x252863(0x792)]=_0x7957e2[_0x252863(0x5d1)],this['sortDamageSprites'](_0x8d2f93),_0x8d2f93[_0x252863(0xbbe)](_0x2e4411,_0xfb20f7,_0x4b26ed),this[_0x252863(0xaf5)](_0x8d2f93);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x852)]=function(){const _0xac7fdb=_0x1a0039;if(!this['_battler'][_0xac7fdb(0x262)]())return;while(this[_0xac7fdb(0x414)][_0xac7fdb(0x262)]()){this[_0xac7fdb(0x414)][_0xac7fdb(0x427)]()&&this['createDamageSprite']();}this[_0xac7fdb(0x414)][_0xac7fdb(0xb6c)](),this['_battler'][_0xac7fdb(0x475)]();},Sprite_Battler['prototype'][_0x1a0039(0x3dd)]=function(){const _0x54249b=_0x1a0039,_0x567e41=VisuMZ[_0x54249b(0xa1e)]['Settings'][_0x54249b(0xa92)],_0x370ced=new Sprite_Damage();_0x370ced[_0x54249b(0x792)]=_0x567e41[_0x54249b(0x5d1)],this['sortDamageSprites'](_0x370ced),_0x370ced[_0x54249b(0x55a)](this[_0x54249b(0x414)]),_0x370ced[_0x54249b(0x7e1)](this['_battler']),this['addDamageSprite'](_0x370ced);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xaf5)]=function(_0x23d680){const _0x6cc29f=_0x1a0039;this[_0x6cc29f(0x4b0)][_0x6cc29f(0xb15)](_0x23d680);if(this[_0x6cc29f(0xafd)]())_0x6cc29f(0x702)!==_0x6cc29f(0x90f)?SceneManager[_0x6cc29f(0x784)][_0x6cc29f(0xa98)][_0x6cc29f(0xaf5)](_0x23d680,this[_0x6cc29f(0x414)]):_0x1801ca=!_0x79fb9;else{this['damageContainer']()['addChild'](_0x23d680);if(SceneManager[_0x6cc29f(0x50a)]())_0x23d680['scale']['x']=-0x1;}},Sprite_Battler['prototype'][_0x1a0039(0xafd)]=function(){const _0x4336b2=_0x1a0039;return!$gameSystem[_0x4336b2(0x969)]()&&this[_0x4336b2(0x414)]&&this[_0x4336b2(0x414)][_0x4336b2(0x261)]();},Sprite_Battler['prototype'][_0x1a0039(0x441)]=function(_0x5498c3){const _0x581dd1=_0x1a0039;this[_0x581dd1(0xb80)](_0x5498c3,!![]);const _0x4b5f51=VisuMZ[_0x581dd1(0xa1e)][_0x581dd1(0x4ce)][_0x581dd1(0xa92)],_0x4c50dd=SceneManager[_0x581dd1(0x50a)]()?-0x1:0x1;if(_0x4b5f51['NewPopupBottom']){if('alUQf'===_0x581dd1(0x3b3))for(const _0x59e9e8 of this['_damages']){_0x59e9e8['x']+=_0x4b5f51[_0x581dd1(0x7bc)]*_0x4c50dd,_0x59e9e8['y']+=_0x4b5f51[_0x581dd1(0x844)];}else _0x26a9bd[_0x581dd1(0xa1e)]['Window_BattleLog_pushBaseLine']['call'](this),this[_0x581dd1(0x15a)]();}else{if(_0x581dd1(0xb7f)==='ShhuN'){const _0xaecefe=this[_0x581dd1(0x4b0)][this['_damages'][_0x581dd1(0x2c0)]-0x1];_0xaecefe&&(_0x5498c3['x']=_0xaecefe['x']+_0x4b5f51[_0x581dd1(0x7bc)]*_0x4c50dd,_0x5498c3['y']=_0xaecefe['y']+_0x4b5f51[_0x581dd1(0x844)]);}else _0x106b9c[_0x581dd1(0x4e0)](_0x2ac6ae[_0x581dd1(0x67b)],0x0);}},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xb80)]=function(_0x43406a,_0x76bd6f){const _0x165423=_0x1a0039,_0x2c8101=SceneManager[_0x165423(0x50a)]()?-0x1:0x1;let _0x3645b0=this[_0x165423(0x1d4)];_0x3645b0+=this[_0x165423(0x769)]();let _0x19f131=this[_0x165423(0x9da)];const _0x19d455=this[_0x165423(0xa04)][_0x165423(0x511)]['y'];_0x19f131+=this[_0x165423(0xb1c)]();const _0x134333=SceneManager['_scene'][_0x165423(0xa98)];if(_0x134333&&this['parent']===_0x134333){if(_0x165423(0x81d)===_0x165423(0x55e)){if(this['constructor']===_0xc49d65&&!_0x18cc46[_0x165423(0x227)]())return;}else{_0x3645b0+=_0x134333['x']-this[_0x165423(0x14d)]();const _0x48e2f1=_0x134333[_0x165423(0x576)]()*0x3/0x4;_0x19f131=_0x134333['y']+_0x48e2f1,_0x19f131=Math[_0x165423(0x409)](_0x19f131,_0x134333['y']+this['y']-this[_0x165423(0x84d)]+_0x48e2f1);}}_0x43406a['x']=Math[_0x165423(0x917)](_0x3645b0+this[_0x165423(0x14d)]()*_0x2c8101),_0x43406a['y']=Math['round'](_0x19f131+this[_0x165423(0xa9f)]());},VisuMZ['BattleCore'][_0x1a0039(0x2ff)]=Sprite_Battler['prototype']['damageOffsetX'],Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x14d)]=function(){const _0x1c2b25=_0x1a0039;let _0x4d8f8e=VisuMZ[_0x1c2b25(0xa1e)]['Sprite_Battler_damageOffsetX'][_0x1c2b25(0xb33)](this),_0x279bfc=VisuMZ[_0x1c2b25(0xa1e)][_0x1c2b25(0x4ce)]['Damage']['PopupOffsetX']||0x0;return Math[_0x1c2b25(0x917)](_0x4d8f8e+_0x279bfc);},VisuMZ['BattleCore'][_0x1a0039(0x1af)]=Sprite_Battler['prototype'][_0x1a0039(0xa9f)],Sprite_Battler['prototype']['damageOffsetY']=function(){const _0x283649=_0x1a0039;let _0x1e0d2e=VisuMZ[_0x283649(0xa1e)]['Sprite_Battler_damageOffsetY'][_0x283649(0xb33)](this);switch(VisuMZ[_0x283649(0xa1e)][_0x283649(0x4ce)][_0x283649(0xa92)][_0x283649(0xb56)]){case _0x283649(0x58e):_0x1e0d2e-=this[_0x283649(0x84d)]*this['scale']['y'];break;case _0x283649(0x36f):_0x1e0d2e-=this[_0x283649(0x84d)]*this[_0x283649(0x511)]['y']*0.5;break;}let _0x5a1f92=VisuMZ[_0x283649(0xa1e)][_0x283649(0x4ce)]['Damage']['PopupOffsetY']||0x0;return Math['round'](_0x1e0d2e+_0x5a1f92);},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x14d)]=function(){const _0x19cf9d=_0x1a0039;return Sprite_Battler[_0x19cf9d(0x6d2)][_0x19cf9d(0x14d)][_0x19cf9d(0xb33)](this);},Sprite_Actor['prototype'][_0x1a0039(0xa9f)]=function(){const _0x1c625c=_0x1a0039;return Sprite_Battler['prototype'][_0x1c625c(0xa9f)][_0x1c625c(0xb33)](this);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x40f)]=function(_0x34da42){const _0x3ca483=_0x1a0039;this[_0x3ca483(0xafd)]()?SceneManager['_scene'][_0x3ca483(0xa98)][_0x3ca483(0x708)](_0x34da42):(this[_0x3ca483(0x424)]()[_0x3ca483(0xb6e)](_0x34da42),this[_0x3ca483(0x4b0)][_0x3ca483(0x5a5)](_0x34da42),_0x34da42['destroy']());},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x94b)]=Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x6ee)],Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x6ee)]=function(_0xca236b,_0x51263b){const _0x37e35e=_0x1a0039,_0xc80dbb=VisuMZ[_0x37e35e(0xa1e)][_0x37e35e(0x4ce)];if(this['constructor']===Sprite_Actor)_0x37e35e(0x94f)!==_0x37e35e(0x94f)?(_0x5cabff['x']+=this['x'],_0x55891f['y']+=this['y']):(_0xca236b+=_0xc80dbb[_0x37e35e(0x429)][_0x37e35e(0x1b9)]||0x0,_0x51263b+=_0xc80dbb['Actor'][_0x37e35e(0x5f2)]||0x0);else{if(this[_0x37e35e(0x9a0)]===Sprite_Enemy){if(_0x37e35e(0xb4b)!==_0x37e35e(0xb4b))return _0x2edd2e[_0x37e35e(0x784)][_0x37e35e(0x942)][_0x37e35e(0x45f)];else _0xca236b+=_0xc80dbb[_0x37e35e(0x814)][_0x37e35e(0x1b9)]||0x0,_0x51263b+=_0xc80dbb[_0x37e35e(0x814)][_0x37e35e(0x5f2)]||0x0;}}this[_0x37e35e(0x414)]&&(_0xca236b=this[_0x37e35e(0x414)][_0x37e35e(0x81f)]??_0xca236b,_0x51263b=this[_0x37e35e(0x414)][_0x37e35e(0x621)]??_0x51263b),VisuMZ['BattleCore'][_0x37e35e(0x94b)][_0x37e35e(0xb33)](this,_0xca236b,_0x51263b),this['_targetHomeX']=this[_0x37e35e(0x59b)],this[_0x37e35e(0x494)]=this[_0x37e35e(0xab6)],this[_0x37e35e(0x41b)]=0x0,this['_homeWholeDuration']=0x0,this[_0x37e35e(0x73d)]=_0x37e35e(0x3d0);},VisuMZ['BattleCore']['Sprite_Battler_update']=Sprite_Battler['prototype'][_0x1a0039(0x9fc)],Sprite_Battler[_0x1a0039(0x6d2)]['update']=function(){const _0x494d4f=_0x1a0039;VisuMZ[_0x494d4f(0xa1e)]['Sprite_Battler_update']['call'](this),!this[_0x494d4f(0x414)]&&this[_0x494d4f(0xa60)]&&(this[_0x494d4f(0xa60)][_0x494d4f(0x3c0)]=![]);},VisuMZ[_0x1a0039(0xa1e)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x1a0039(0x6d2)]['updateMain'],Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x2cd)]=function(){const _0x292f8d=_0x1a0039;this[_0x292f8d(0x43f)](),this[_0x292f8d(0x693)](),this[_0x292f8d(0x38c)](),this[_0x292f8d(0x8f6)](),this[_0x292f8d(0x7fb)](),VisuMZ[_0x292f8d(0xa1e)][_0x292f8d(0x682)][_0x292f8d(0xb33)](this);if(this[_0x292f8d(0x9a0)]===Sprite_Enemy)this[_0x292f8d(0x970)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x7e8)]=Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x401)],Sprite_Battler[_0x1a0039(0x6d2)]['updatePosition']=function(){const _0x2cf630=_0x1a0039;this['updateHomeMove'](),VisuMZ[_0x2cf630(0xa1e)][_0x2cf630(0x7e8)]['call'](this),this[_0x2cf630(0x563)](),this[_0x2cf630(0x67f)]();},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x25b)]=function(_0x2859dd,_0x507cf7,_0x2395fe,_0x55db82){const _0x7bb638=_0x1a0039;if(this[_0x7bb638(0x980)]!==_0x2859dd||this[_0x7bb638(0x494)]!==_0x507cf7){if('kHHqV'==='dIdmL'){this[_0x7bb638(0x434)]=0x14,this[_0x7bb638(0x9ca)][_0x7bb638(0x3bc)]=_0x47207e;_0x30973b[_0x7bb638(0x784)][_0x7bb638(0x902)]()?(this[_0x7bb638(0x9ca)]['x']=0x0,this['_borderPortraitTargetX']=_0x4459b8[_0x7bb638(0xb9b)](_0x309120[_0x7bb638(0x926)]/0x2)):(this['_borderPortraitSprite']['x']=this[_0x7bb638(0x926)],this['_borderPortraitTargetX']=this[_0x7bb638(0x926)]*0x3/0x4);this[_0x7bb638(0x9ca)][_0x7bb638(0x1f4)]=0x0,this[_0x7bb638(0x9ca)]['y']=this['y']+this['height'];const _0x9512d=_0x3a7d6d[_0x7bb638(0xbc6)]();_0x9512d&&(this['_borderPortraitTargetX']+=_0x9512d[_0x7bb638(0x3af)](),this['_borderPortraitSprite']['y']+=_0x9512d[_0x7bb638(0x8ed)]());}else this[_0x7bb638(0x980)]=_0x2859dd,this[_0x7bb638(0x494)]=_0x507cf7,this['_homeDuration']=_0x2395fe,this[_0x7bb638(0x810)]=_0x2395fe,this['_homeEasing']=_0x55db82,_0x2395fe<=0x0&&this[_0x7bb638(0x515)]();}},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x884)]=function(){const _0x3f2574=_0x1a0039;if(this[_0x3f2574(0x41b)]<=0x0)return;const _0x50914b=this[_0x3f2574(0x41b)],_0x6d3ed=this[_0x3f2574(0x810)],_0x555bc2=this[_0x3f2574(0x73d)];if(Imported[_0x3f2574(0x212)])this[_0x3f2574(0x59b)]=this['applyEasing'](this[_0x3f2574(0x59b)],this[_0x3f2574(0x980)],_0x50914b,_0x6d3ed,_0x555bc2),this[_0x3f2574(0xab6)]=this['applyEasing'](this['_homeY'],this[_0x3f2574(0x494)],_0x50914b,_0x6d3ed,_0x555bc2);else{if(_0x3f2574(0x128)!==_0x3f2574(0x128)){if(this[_0x3f2574(0x41b)]<=0x0)return;const _0x281c88=this[_0x3f2574(0x41b)],_0x36553d=this[_0x3f2574(0x810)],_0x1c8a01=this[_0x3f2574(0x73d)];_0xf8cba7['VisuMZ_0_CoreEngine']?(this[_0x3f2574(0x59b)]=this[_0x3f2574(0x4f3)](this['_homeX'],this[_0x3f2574(0x980)],_0x281c88,_0x36553d,_0x1c8a01),this[_0x3f2574(0xab6)]=this[_0x3f2574(0x4f3)](this[_0x3f2574(0xab6)],this['_targetHomeY'],_0x281c88,_0x36553d,_0x1c8a01)):(this['_homeX']=(this[_0x3f2574(0x59b)]*(_0x281c88-0x1)+this[_0x3f2574(0x980)])/_0x281c88,this[_0x3f2574(0xab6)]=(this[_0x3f2574(0xab6)]*(_0x281c88-0x1)+this['_targetHomeY'])/_0x281c88);this[_0x3f2574(0x41b)]--;if(this[_0x3f2574(0x41b)]<=0x0)this[_0x3f2574(0x515)]();}else this[_0x3f2574(0x59b)]=(this[_0x3f2574(0x59b)]*(_0x50914b-0x1)+this[_0x3f2574(0x980)])/_0x50914b,this[_0x3f2574(0xab6)]=(this[_0x3f2574(0xab6)]*(_0x50914b-0x1)+this[_0x3f2574(0x494)])/_0x50914b;}this[_0x3f2574(0x41b)]--;if(this[_0x3f2574(0x41b)]<=0x0)this[_0x3f2574(0x515)]();},Sprite_Battler['prototype'][_0x1a0039(0x515)]=function(){const _0x6311c2=_0x1a0039;this[_0x6311c2(0x59b)]=this[_0x6311c2(0x980)],this[_0x6311c2(0xab6)]=this[_0x6311c2(0x494)];},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x563)]=function(){const _0x2b57ac=_0x1a0039;this[_0x2b57ac(0x1d4)]=this['x'],this[_0x2b57ac(0x9da)]=this['y'],this[_0x2b57ac(0x7df)](),this[_0x2b57ac(0x577)](),this['x']+=this[_0x2b57ac(0x769)](),this['y']+=this[_0x2b57ac(0xb1c)](),this['y']+=this[_0x2b57ac(0xba8)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x2b57ac(0x8bb)](this['y']);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x769)]=function(){let _0x44268b=0x0;return _0x44268b;},Sprite_Battler['prototype']['extraPositionY']=function(){const _0x18bd2e=_0x1a0039;let _0x181eba=0x0;return this[_0x18bd2e(0x414)]&&!this[_0x18bd2e(0x414)][_0x18bd2e(0x224)]()&&(_0x181eba-=this[_0x18bd2e(0x4a5)],_0x181eba-=this[_0x18bd2e(0x267)]),_0x181eba;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xba8)]=function(){const _0x3feaba=_0x1a0039;let _0x45e63c=0x0;if(this['_distortionSprite']&&this['constructor']!==Sprite_SvEnemy){if(_0x3feaba(0x7cf)!==_0x3feaba(0xb6b)){const _0x181746=this[_0x3feaba(0xa04)][_0x3feaba(0x511)]['y'];_0x45e63c-=(_0x181746-0x1)*this[_0x3feaba(0x84d)];}else return;}return _0x45e63c;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x8f6)]=function(){const _0x3f43cb=_0x1a0039,_0x452d8e=this[_0x3f43cb(0x414)]&&this[_0x3f43cb(0x414)][_0x3f43cb(0x93d)]();this['_flipScaleX']=(_0x452d8e?-0x1:0x1)*Math[_0x3f43cb(0xbe1)](this[_0x3f43cb(0x511)]['x']);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x71e)]=function(_0x4f65c2,_0x450930,_0x38652f){const _0x5bf1ab=_0x1a0039;if(!this[_0x5bf1ab(0x5c7)]())return;if(this[_0x5bf1ab(0x43d)]===_0x4f65c2)return;this[_0x5bf1ab(0x43d)]=_0x4f65c2,this['_floatDuration']=_0x450930,this[_0x5bf1ab(0x35e)]=_0x450930,this[_0x5bf1ab(0x390)]=_0x38652f||_0x5bf1ab(0x3d0);if(_0x450930<=0x0)this['_floatHeight']=_0x4f65c2;},Sprite_Battler[_0x1a0039(0x6d2)]['updateFloat']=function(){const _0x1dd388=_0x1a0039;if(this[_0x1dd388(0x15b)]<=0x0)return;const _0x554cad=this[_0x1dd388(0x15b)],_0x210b7c=this[_0x1dd388(0x35e)],_0x1db71f=this[_0x1dd388(0x390)];if(Imported[_0x1dd388(0x212)]){if(_0x1dd388(0x360)===_0x1dd388(0x360))this[_0x1dd388(0x4a5)]=this[_0x1dd388(0x4f3)](this[_0x1dd388(0x4a5)],this[_0x1dd388(0x43d)],_0x554cad,_0x210b7c,_0x1db71f);else return this[_0x1dd388(0x3df)][_0x1dd388(0x3f4)]();}else this[_0x1dd388(0x4a5)]=(this[_0x1dd388(0x4a5)]*(_0x554cad-0x1)+this[_0x1dd388(0x43d)])/_0x554cad;this['_floatDuration']--;if(this[_0x1dd388(0x15b)]<=0x0)this[_0x1dd388(0xb42)]();},Sprite_Battler['prototype']['onFloatEnd']=function(){const _0x348c9c=_0x1a0039;this['_floatHeight']=this[_0x348c9c(0x43d)];},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x24d)]=function(){const _0x2bc184=_0x1a0039;return this[_0x2bc184(0x15b)]>0x0;},Sprite_Battler['prototype'][_0x1a0039(0xb68)]=function(_0x3ec8a5,_0x247b8e){const _0x59a397=_0x1a0039;if(!this['canMove']())return;if(_0x247b8e<=0x0)return;this['_jumpMaxHeight']=_0x3ec8a5,this[_0x59a397(0x2df)]=_0x247b8e,this[_0x59a397(0x389)]=_0x247b8e;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x577)]=function(){const _0x21225f=_0x1a0039;if(this[_0x21225f(0x2df)]<=0x0)return;const _0x25c9c5=this[_0x21225f(0x389)]-this[_0x21225f(0x2df)],_0x21139c=this['_jumpWholeDuration']/0x2,_0x2b9937=this[_0x21225f(0x69d)],_0x2363a7=-_0x2b9937/Math[_0x21225f(0x61f)](_0x21139c,0x2);this['_jumpHeight']=_0x2363a7*Math['pow'](_0x25c9c5-_0x21139c,0x2)+_0x2b9937,this[_0x21225f(0x2df)]--;if(this[_0x21225f(0x2df)]<=0x0)return this[_0x21225f(0x6bc)]();},Sprite_Battler['prototype'][_0x1a0039(0x6bc)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x229)]=function(){const _0x16131c=_0x1a0039;return this[_0x16131c(0x2df)]>0x0;},Sprite_Battler['prototype'][_0x1a0039(0x560)]=function(_0x54c40b,_0x4e16d4,_0x2dd7ab){const _0x7c070b=_0x1a0039;if(this['_targetOpacity']===_0x54c40b)return;this[_0x7c070b(0x54b)]=_0x54c40b,this[_0x7c070b(0x886)]=_0x4e16d4,this[_0x7c070b(0x991)]=_0x4e16d4,this[_0x7c070b(0x6ff)]=_0x2dd7ab||'Linear';if(_0x4e16d4<=0x0)this[_0x7c070b(0x1f4)]=_0x54c40b;},Sprite_Battler['prototype'][_0x1a0039(0x67f)]=function(){const _0x3fd486=_0x1a0039;if(this[_0x3fd486(0x9a0)][_0x3fd486(0x192)]===_0x3fd486(0x8d9))return;if(this[_0x3fd486(0x886)]<=0x0)return;const _0xf996b8=this[_0x3fd486(0x886)],_0x522cff=this[_0x3fd486(0x991)],_0x47acd8=this[_0x3fd486(0x6ff)];Imported[_0x3fd486(0x212)]?_0x3fd486(0x9d4)===_0x3fd486(0x9db)?_0x347743[_0x3fd486(0x19a)]()[_0x3fd486(0x4e5)][_0x3fd486(0x27b)]>0x0?this['performAttack']():this['requestMotion'](_0x3fd486(0xa6e)):this['opacity']=this['applyEasing'](this[_0x3fd486(0x1f4)],this[_0x3fd486(0x54b)],_0xf996b8,_0x522cff,_0x47acd8):this[_0x3fd486(0x1f4)]=(this[_0x3fd486(0x1f4)]*(_0xf996b8-0x1)+this['_targetOpacity'])/_0xf996b8;this[_0x3fd486(0x886)]--;if(this[_0x3fd486(0x886)]<=0x0)this[_0x3fd486(0x285)]();},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x285)]=function(){const _0x1446fd=_0x1a0039;this[_0x1446fd(0x1f4)]=this[_0x1446fd(0x54b)];},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x356)]=function(){const _0x58ba6e=_0x1a0039;return this[_0x58ba6e(0x886)]>0x0;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x970)]=function(){const _0x34c536=_0x1a0039;this[_0x34c536(0x757)]['visible']=this[_0x34c536(0x414)][_0x34c536(0x227)](),this[_0x34c536(0x39c)]();},Sprite_Battler[_0x1a0039(0x6d2)]['updateShadowPosition']=function(){const _0x1ba713=_0x1a0039;if(!this[_0x1ba713(0x757)])return;this[_0x1ba713(0x757)]['y']=this[_0x1ba713(0x9da)]-this['y']-0x2;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x1f7)]=function(){const _0x562cb0=_0x1a0039;if(!this[_0x562cb0(0x414)])return;this[_0x562cb0(0x19b)]=this[_0x562cb0(0x414)][_0x562cb0(0x179)](),this[_0x562cb0(0x133)]=this[_0x562cb0(0x414)][_0x562cb0(0x48d)]();},Game_BattlerBase[_0x1a0039(0x6d2)][_0x1a0039(0x179)]=function(){const _0x4f5d14=_0x1a0039,_0x11eeb4=this[_0x4f5d14(0x261)]()?this[_0x4f5d14(0xbc6)]():this['enemy']();if(_0x11eeb4){if(_0x4f5d14(0x467)==='onSBI')_0x4c7b52[_0x4f5d14(0x784)]['updateBattleProcess']();else{const _0x508d19=_0x11eeb4[_0x4f5d14(0x83c)];if(_0x508d19['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if(_0x4f5d14(0xaf4)!==_0x4f5d14(0x955))return Number(RegExp['$1'])*0.01;else _0x4c2a0c[_0x4f5d14(0xa1e)][_0x4f5d14(0xaf9)][_0x4f5d14(0xb33)](this),this[_0x4f5d14(0x4f4)]()&&this['isSkipPartyCommandWindow']()&&!this[_0x4f5d14(0x6c5)]&&_0x226db6[_0x4f5d14(0x64c)]()&&this[_0x4f5d14(0x72d)]();}else{if(_0x508d19[_0x4f5d14(0x7f1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Game_BattlerBase[_0x1a0039(0x6d2)]['battlerShadowScaleY']=function(){const _0x3717c3=_0x1a0039,_0x4d3df0=this['isActor']()?this[_0x3717c3(0xbc6)]():this[_0x3717c3(0x91b)]();if(_0x4d3df0){if(_0x3717c3(0xb14)!==_0x3717c3(0xb14))_0x10438a+=_0x4c4a30[_0x3717c3(0x261)]()?-_0x36d996:_0x5d6ac2,_0x481019+=_0x298987;else{const _0x42d1a7=_0x4d3df0['note'];if(_0x42d1a7[_0x3717c3(0x7f1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x42d1a7[_0x3717c3(0x7f1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x43f)]=function(){const _0x56efa5=_0x1a0039;if(this[_0x56efa5(0x9a0)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x56efa5(0xace)]();},Sprite_Battler[_0x1a0039(0x6d2)]['finalizeScale']=function(){const _0x8e21bf=_0x1a0039,_0x35e87c=this[_0x8e21bf(0xa04)];_0x35e87c&&(_0x8e21bf(0x804)!==_0x8e21bf(0x252)?(_0x35e87c['scale']['x']=this['mainSpriteScaleX'](),_0x35e87c['scale']['y']=this[_0x8e21bf(0x5cd)]()):_0x3070a8=_0xe6edc4);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x2a9)]=function(){const _0x3b76c0=_0x1a0039;let _0x33e933=0x1;return _0x33e933*=this[_0x3b76c0(0xb3a)],_0x33e933*=this[_0x3b76c0(0xad8)],_0x33e933;},Sprite_Battler['prototype'][_0x1a0039(0x5cd)]=function(){const _0x5ade25=_0x1a0039;return 0x1*this[_0x5ade25(0x3d3)];},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x393)]=function(){const _0xbf7535=_0x1a0039;return this[_0xbf7535(0x926)]*this[_0xbf7535(0x2a9)]();},Sprite_Battler[_0x1a0039(0x6d2)]['mainSpriteHeight']=function(){return this['height']*this['mainSpriteScaleY']();},Sprite_Battler[_0x1a0039(0x6d2)]['startGrow']=function(_0xac74bc,_0x21f15f,_0x236451,_0x1d0942){const _0xdb5eb0=_0x1a0039;if(!this[_0xdb5eb0(0x5c7)]())return;if(!this['_distortionSprite'])return;if(this[_0xdb5eb0(0x1ac)]===_0xac74bc&&this[_0xdb5eb0(0x2b4)]===_0x21f15f)return;this[_0xdb5eb0(0x1ac)]=_0xac74bc,this[_0xdb5eb0(0x2b4)]=_0x21f15f,this[_0xdb5eb0(0xb61)]=_0x236451,this['_growWholeDuration']=_0x236451,this[_0xdb5eb0(0x175)]=_0x1d0942||'Linear',_0x236451<=0x0&&(_0xdb5eb0(0x571)!==_0xdb5eb0(0x571)?_0x1caf4a[_0xdb5eb0(0xa1e)][_0xdb5eb0(0x213)][_0xdb5eb0(0xb33)](this,_0x248444):(this[_0xdb5eb0(0xad8)]=this[_0xdb5eb0(0x1ac)],this[_0xdb5eb0(0x3d3)]=this[_0xdb5eb0(0x2b4)]));},Sprite_Battler['prototype'][_0x1a0039(0x12a)]=function(){const _0x25f300=_0x1a0039;if(this[_0x25f300(0xb61)]<=0x0)return;if(!this[_0x25f300(0xa04)])return;const _0x5d13bf=this[_0x25f300(0xb61)],_0x35b62e=this[_0x25f300(0x7dc)],_0x1e51b2=this[_0x25f300(0x175)];Imported[_0x25f300(0x212)]?(this[_0x25f300(0xad8)]=this['applyEasing'](this[_0x25f300(0xad8)],this[_0x25f300(0x1ac)],_0x5d13bf,_0x35b62e,_0x1e51b2),this[_0x25f300(0x3d3)]=this['applyEasing'](this[_0x25f300(0x3d3)],this[_0x25f300(0x2b4)],_0x5d13bf,_0x35b62e,_0x1e51b2)):(this['_growX']=(this[_0x25f300(0xad8)]*(_0x5d13bf-0x1)+this[_0x25f300(0x1ac)])/_0x5d13bf,this[_0x25f300(0x3d3)]=(this[_0x25f300(0x3d3)]*(_0x5d13bf-0x1)+this[_0x25f300(0x2b4)])/_0x5d13bf);this[_0x25f300(0xb61)]--;if(this[_0x25f300(0xb61)]<=0x0)this[_0x25f300(0x9e8)]();},Sprite_Battler['prototype'][_0x1a0039(0x9e8)]=function(){const _0x479a15=_0x1a0039;this[_0x479a15(0xad8)]=this['_targetGrowX'],this[_0x479a15(0x3d3)]=this[_0x479a15(0x2b4)];},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x1c6)]=function(){const _0x29a474=_0x1a0039;return this[_0x29a474(0xb61)]>0x0;},Sprite_Battler['prototype'][_0x1a0039(0x43a)]=function(_0x35315e,_0x3ccdb0,_0x1be399,_0x2c22be){const _0x2b16a8=_0x1a0039;if(!this[_0x2b16a8(0x5c7)]())return;if(!this['_distortionSprite'])return;if(this['_targetSkewX']===_0x35315e&&this[_0x2b16a8(0x7e9)]===_0x3ccdb0)return;this[_0x2b16a8(0x677)]=_0x35315e,this[_0x2b16a8(0x7e9)]=_0x3ccdb0,this[_0x2b16a8(0x432)]=_0x1be399,this[_0x2b16a8(0x8ca)]=_0x1be399,this[_0x2b16a8(0x7f6)]=_0x2c22be||_0x2b16a8(0x3d0),_0x1be399<=0x0&&('atKad'!=='NioBM'?(this[_0x2b16a8(0xa04)][_0x2b16a8(0x1ee)]['x']=this['_targetSkewX'],this['_distortionSprite']['skew']['y']=this['_targetSkewY']):_0x1ea99b=_0x117d03);},Sprite_Battler['prototype'][_0x1a0039(0x693)]=function(){const _0x230497=_0x1a0039;if(this[_0x230497(0x432)]<=0x0)return;if(!this[_0x230497(0xa04)])return;const _0x306e7b=this[_0x230497(0x432)],_0x591c45=this['_skewWholeDuration'],_0x342827=this[_0x230497(0x7f6)],_0x456318=this[_0x230497(0xa04)];Imported[_0x230497(0x212)]?(_0x456318[_0x230497(0x1ee)]['x']=this[_0x230497(0x4f3)](_0x456318['skew']['x'],this[_0x230497(0x677)],_0x306e7b,_0x591c45,_0x342827),_0x456318[_0x230497(0x1ee)]['y']=this[_0x230497(0x4f3)](_0x456318[_0x230497(0x1ee)]['y'],this['_targetSkewY'],_0x306e7b,_0x591c45,_0x342827)):(_0x456318['skew']['x']=(_0x456318[_0x230497(0x1ee)]['x']*(_0x306e7b-0x1)+this[_0x230497(0x677)])/_0x306e7b,_0x456318[_0x230497(0x1ee)]['y']=(_0x456318[_0x230497(0x1ee)]['y']*(_0x306e7b-0x1)+this['_targetSkewY'])/_0x306e7b);this[_0x230497(0x432)]--;if(this['_skewDuration']<=0x0)this[_0x230497(0x855)]();},Sprite_Battler[_0x1a0039(0x6d2)]['onSkewEnd']=function(){const _0x1dca8b=_0x1a0039;this[_0x1dca8b(0xa04)][_0x1dca8b(0x1ee)]['x']=this[_0x1dca8b(0x677)],this[_0x1dca8b(0xa04)][_0x1dca8b(0x1ee)]['y']=this[_0x1dca8b(0x7e9)];},Sprite_Battler['prototype'][_0x1a0039(0xa9b)]=function(){const _0x2f8b30=_0x1a0039;return this[_0x2f8b30(0x432)]>0x0;},Sprite_Battler['prototype'][_0x1a0039(0x913)]=function(_0x3c4943,_0x46919b,_0x14f0bd,_0x4b83cd){const _0x41b114=_0x1a0039;if(!this[_0x41b114(0x5c7)]())return;if(!this[_0x41b114(0xa04)])return;if(this[_0x41b114(0x5d5)]===_0x3c4943)return;this[_0x41b114(0x5d5)]=_0x3c4943,this[_0x41b114(0x618)]=_0x46919b,this['_angleWholeDuration']=_0x46919b,this['_angleEasing']=_0x14f0bd||_0x41b114(0x3d0),this['_angleRevertOnFinish']=_0x4b83cd,this['_angleRevertOnFinish']===undefined&&(this[_0x41b114(0x50d)]=!![]),_0x46919b<=0x0&&(this[_0x41b114(0x853)]=_0x3c4943,this['_angleRevertOnFinish']&&(this[_0x41b114(0x5d5)]=0x0,this[_0x41b114(0x853)]=0x0));},Sprite_Battler['prototype'][_0x1a0039(0x38c)]=function(){const _0x497cd2=_0x1a0039;this[_0x497cd2(0x582)](),this[_0x497cd2(0x31f)]();},Sprite_Battler['prototype']['updateAngleCalculations']=function(){const _0x229bfb=_0x1a0039;if(this[_0x229bfb(0x618)]<=0x0)return;const _0x28ffa9=this[_0x229bfb(0x618)],_0x14a7eb=this[_0x229bfb(0xb34)],_0x1333b8=this[_0x229bfb(0x821)];if(Imported[_0x229bfb(0x212)]){if('iimwb'!=='GCxFA')this[_0x229bfb(0x853)]=this['applyEasing'](this[_0x229bfb(0x853)],this[_0x229bfb(0x5d5)],_0x28ffa9,_0x14a7eb,_0x1333b8);else return this[_0x229bfb(0x2ae)][_0x229bfb(0x9df)]();}else{if(_0x229bfb(0x1e4)===_0x229bfb(0x4c1))return _0x15bfc3(_0x3053b8['$1'])[_0x229bfb(0xaf3)](/[\r\n]+/);else this['_currentAngle']=(this['_currentAngle']*(_0x28ffa9-0x1)+this['_targetAngle'])/_0x28ffa9;}this[_0x229bfb(0x618)]--;if(this['_angleDuration']<=0x0)this[_0x229bfb(0x871)]();},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x871)]=function(){const _0x224fda=_0x1a0039;this[_0x224fda(0x853)]=this[_0x224fda(0x5d5)],this[_0x224fda(0x50d)]&&(this[_0x224fda(0x5d5)]=0x0,this[_0x224fda(0x853)]=0x0);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x6c9)]=function(){const _0x106d4e=_0x1a0039;return this[_0x106d4e(0x618)]>0x0;},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x31f)]=function(){const _0x21f960=_0x1a0039;if(!this[_0x21f960(0xa04)])return;const _0x292843=this['_currentAngle'],_0x277405=this['scale']['x'],_0x3893a1=this['_battler'][_0x21f960(0x261)]()?-0x1:0x1;this['_distortionSprite']['angle']=_0x292843*_0x277405*_0x3893a1;const _0x464830=this[_0x21f960(0xa04)][_0x21f960(0x511)]['y'];this[_0x21f960(0xa04)]['y']=this['height']*-0.5*(0x2-_0x464830),this['_distortionSprite']['y']=Math['ceil'](this[_0x21f960(0xa04)]['y']);const _0x33a93f=[this['_mainSprite'],this['_svBattlerSprite'],this[_0x21f960(0x318)]];for(const _0x50a354 of _0x33a93f){if(_0x21f960(0xb88)!=='jOdCe'){if(!_0x50a354)continue;_0x50a354['y']=this[_0x21f960(0x84d)]*0.5;}else return this[_0x21f960(0x8e8)]()['match'](/\$/i);}this[_0x21f960(0x757)]&&(_0x21f960(0x443)==='MYJOQ'?_0x15178f[_0x21f960(0x93c)]?this[_0x21f960(0x209)]=_0x21f960(0x189):this[_0x21f960(0x209)]=_0x21f960(0x9dc):(this[_0x21f960(0x19b)]=this[_0x21f960(0x19b)]??0x1,this['_shadowScaleY']=this[_0x21f960(0x133)]??0x1,this[_0x21f960(0x757)][_0x21f960(0x511)]['x']=this[_0x21f960(0xa04)][_0x21f960(0x511)]['x']*this[_0x21f960(0x19b)],this['_shadowSprite'][_0x21f960(0x511)]['y']=this['_distortionSprite'][_0x21f960(0x511)]['y']*this[_0x21f960(0x133)]));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x30e)]=Sprite_Actor['prototype'][_0x1a0039(0x269)],Sprite_Actor['prototype'][_0x1a0039(0x269)]=function(){const _0x2a5b86=_0x1a0039;VisuMZ['BattleCore'][_0x2a5b86(0x30e)][_0x2a5b86(0xb33)](this),VisuMZ[_0x2a5b86(0xa1e)][_0x2a5b86(0x4ce)][_0x2a5b86(0x6eb)]['ShowActorGauge']&&this[_0x2a5b86(0xa4d)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x9d8)]=Sprite_Enemy['prototype']['createStateIconSprite'],Sprite_Enemy[_0x1a0039(0x6d2)]['createStateIconSprite']=function(){const _0x7b349e=_0x1a0039;VisuMZ[_0x7b349e(0xa1e)]['Settings'][_0x7b349e(0x6eb)][_0x7b349e(0x725)]&&this[_0x7b349e(0xa4d)](),VisuMZ[_0x7b349e(0xa1e)][_0x7b349e(0x9d8)][_0x7b349e(0xb33)](this);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa4d)]=function(){const _0x5b16fb=_0x1a0039;if(!ConfigManager[_0x5b16fb(0x5b5)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x4cc9c7=VisuMZ[_0x5b16fb(0xa1e)][_0x5b16fb(0x4ce)][_0x5b16fb(0x6eb)],_0x189f58=new Sprite_HpGauge();_0x189f58[_0x5b16fb(0x29d)]['x']=_0x4cc9c7['AnchorX'],_0x189f58[_0x5b16fb(0x29d)]['y']=_0x4cc9c7[_0x5b16fb(0x194)],_0x189f58[_0x5b16fb(0x511)]['x']=_0x189f58['scale']['y']=_0x4cc9c7[_0x5b16fb(0xaec)],this['_hpGaugeSprite']=_0x189f58,this['addChild'](this['_hpGaugeSprite']);if(Spriteset_Battle[_0x5b16fb(0x6a7)]){if('ZULmv'!==_0x5b16fb(0x1d1))BattleManager['addChildToUiContainer'](this['_hpGaugeSprite']);else{const _0x1f2fcf=this[_0x5b16fb(0x388)](_0x3cb791),_0xc5045=this[_0x5b16fb(0x3a4)](_0x400d33)[_0x5b16fb(0x926)];return _0xc5045<=_0x1f2fcf['width']?_0x5b16fb(0x3ba):_0x5b16fb(0x4cd);}}},VisuMZ['BattleCore'][_0x1a0039(0x800)]=Sprite_Battler[_0x1a0039(0x6d2)]['setBattler'],Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x39a)]=function(_0x99b043){const _0x169335=_0x1a0039,_0x551625=this['_battler'];VisuMZ[_0x169335(0xa1e)][_0x169335(0x800)][_0x169335(0xb33)](this,_0x99b043),this[_0x169335(0x7ba)](_0x99b043);if(_0x551625!==_0x99b043)this['updateShadowScale']();},Sprite_Battler[_0x1a0039(0x6d2)]['setupHpGaugeSprite']=function(_0x20aa84){const _0x47c573=_0x1a0039;if(!_0x20aa84)return;if(!this[_0x47c573(0xa60)])return;if(_0x20aa84[_0x47c573(0x261)]()){}else{if(_0x20aa84[_0x47c573(0x795)]()){if(this[_0x47c573(0x9a0)]===Sprite_SvEnemy&&!_0x20aa84[_0x47c573(0x227)]())return;}}this[_0x47c573(0xa60)]['setup'](_0x20aa84,'hp');},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x5da)]=function(){const _0x339049=_0x1a0039;return this[_0x339049(0x414)]&&this[_0x339049(0x414)]['hasStaticSvBattler']();},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x5af)]=function(){const _0x56105b=_0x1a0039,_0x1df932=this[_0x56105b(0xa1c)][_0x56105b(0x3bc)];if(!_0x1df932)return;const _0x6aea5a=_0x1df932[_0x56105b(0x926)];let _0x508fdd=_0x1df932[_0x56105b(0x84d)];if(this[_0x56105b(0x414)][_0x56105b(0x93b)]()){if(this[_0x56105b(0x6d4)])_0x508fdd=Math['max'](0x0,this[_0x56105b(0x6d4)][_0x56105b(0x84d)]-0x4);}this[_0x56105b(0xa1c)][_0x56105b(0x5bd)](0x0,0x0,_0x6aea5a,_0x508fdd),this['setFrame'](0x0,0x0,_0x6aea5a,_0x508fdd);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x7fb)]=function(){const _0x5ddb85=_0x1a0039;if(!this[_0x5ddb85(0x414)])return;if(!this['_hpGaugeSprite'])return;const _0x46e3b3=VisuMZ[_0x5ddb85(0xa1e)][_0x5ddb85(0x4ce)][_0x5ddb85(0x6eb)],_0x2560a8=this[_0x5ddb85(0xa60)];_0x2560a8[_0x5ddb85(0x3c0)]=this[_0x5ddb85(0x856)]();const _0x122d0c=_0x46e3b3['OffsetX'],_0xaf5f44=_0x46e3b3[_0x5ddb85(0x5f2)];_0x2560a8['x']=_0x122d0c,_0x2560a8['x']+=this[_0x5ddb85(0x414)]['battleUIOffsetX'](),_0x2560a8['y']=-this[_0x5ddb85(0x84d)]+_0xaf5f44,_0x2560a8['y']+=this['_battler'][_0x5ddb85(0x1bb)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0x5ddb85(0x784)][_0x5ddb85(0x942)]&&(_0x2560a8['x']+=this['x'],_0x2560a8['y']+=this['y']);},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x856)]=function(){const _0x47ac9b=_0x1a0039;if(!this[_0x47ac9b(0x414)])return![];if(this[_0x47ac9b(0x414)][_0x47ac9b(0x261)]())return!![];if(this[_0x47ac9b(0x414)][_0x47ac9b(0x405)]())return![];if(this[_0x47ac9b(0x1f4)]<=0x0)return![];const _0x5c5fae=this[_0x47ac9b(0x414)][_0x47ac9b(0x91b)]()[_0x47ac9b(0x83c)];if(_0x5c5fae[_0x47ac9b(0x7f1)](/<SHOW HP GAUGE>/i))return!![];if(_0x5c5fae[_0x47ac9b(0x7f1)](/<HIDE HP GAUGE>/i))return![];const _0x826df7=VisuMZ[_0x47ac9b(0xa1e)][_0x47ac9b(0x4ce)][_0x47ac9b(0x6eb)];if(_0x826df7[_0x47ac9b(0xaf0)]){if(_0x826df7[_0x47ac9b(0x85f)]&&BattleManager[_0x47ac9b(0x9fd)]())return!![];if(this['_battler'][_0x47ac9b(0xb27)])return![];return this['_battler'][_0x47ac9b(0x14a)]();}return!![];},VisuMZ[_0x1a0039(0xa1e)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x8b5)],Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x8b5)]=function(){const _0xf499a0=_0x1a0039;if(!this['_battler'])return![];if(this[_0xf499a0(0x41b)]>0x0)return!![];return VisuMZ['BattleCore'][_0xf499a0(0x5c2)][_0xf499a0(0xb33)](this);},VisuMZ['BattleCore']['Sprite_Battler_startMove']=Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0xa2f)],Sprite_Battler[_0x1a0039(0x6d2)]['startMove']=function(_0x37dba5,_0x1eca4d,_0x17088a){const _0x29c437=_0x1a0039;this[_0x29c437(0x5c7)]()&&VisuMZ[_0x29c437(0xa1e)]['Sprite_Battler_startMove'][_0x29c437(0xb33)](this,_0x37dba5,_0x1eca4d,_0x17088a);},Sprite_Battler[_0x1a0039(0x6d2)]['canMove']=function(){const _0xb8abf6=_0x1a0039;if(this['_battler']&&this['_battler'][_0xb8abf6(0x93b)]())return![];if(this[_0xb8abf6(0x414)]&&!this['_battler'][_0xb8abf6(0x301)]())return![];return $gameSystem[_0xb8abf6(0x969)]();},Sprite_Battler[_0x1a0039(0x6d2)]['stepForward']=function(){},Sprite_Battler['prototype'][_0x1a0039(0x6cb)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x1a0039(0x6d2)]['retreat']=function(){},Sprite_Battler[_0x1a0039(0x6d2)][_0x1a0039(0x8f9)]=function(){const _0x46604e=_0x1a0039,_0x2cfb02=VisuMZ[_0x46604e(0xa1e)]['Settings'][_0x46604e(0x429)],_0x2153ea=this[_0x46604e(0x414)]&&this[_0x46604e(0x414)][_0x46604e(0x261)]()?0x1:-0x1,_0x411df6=this[_0x46604e(0x1d4)]-this[_0x46604e(0x59b)]+_0x2153ea*_0x2cfb02['FlinchDistanceX'],_0x57c47c=this[_0x46604e(0x9da)]-this[_0x46604e(0xab6)]+_0x2153ea*_0x2cfb02[_0x46604e(0x8a1)],_0x2575ff=_0x2cfb02[_0x46604e(0xb89)];this['startMove'](_0x411df6,_0x57c47c,_0x2575ff);},VisuMZ['BattleCore'][_0x1a0039(0x764)]=Sprite_Actor[_0x1a0039(0x6d2)]['initMembers'],Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x68c)]=function(){const _0x32fa34=_0x1a0039;VisuMZ[_0x32fa34(0xa1e)][_0x32fa34(0x764)][_0x32fa34(0xb33)](this),this[_0x32fa34(0x16c)]();},Sprite_Actor['prototype']['mainSprite']=function(){return this['_distortionSprite']||this['_mainSprite']||this;},VisuMZ['BattleCore'][_0x1a0039(0x29c)]=Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x9a8)],Sprite_Actor[_0x1a0039(0x6d2)]['moveToStartPosition']=function(){},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x9e4)]=function(_0xa476f2){const _0x2729cd=_0x1a0039;if(SceneManager[_0x2729cd(0x237)]())return;if(!_0xa476f2)return;if(!_0xa476f2[_0x2729cd(0x5c7)]())return;VisuMZ['BattleCore'][_0x2729cd(0x29c)]['call'](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x6d5)]=Sprite_Actor['prototype'][_0x1a0039(0x939)],Sprite_Actor[_0x1a0039(0x6d2)]['setActorHome']=function(_0x43653c){const _0x48086d=_0x1a0039;VisuMZ[_0x48086d(0xa1e)]['Settings'][_0x48086d(0x429)][_0x48086d(0x896)]?VisuMZ['BattleCore'][_0x48086d(0x4ce)][_0x48086d(0x429)][_0x48086d(0x896)][_0x48086d(0xb33)](this,_0x43653c):VisuMZ[_0x48086d(0xa1e)][_0x48086d(0x6d5)][_0x48086d(0xb33)](this,_0x43653c);},VisuMZ[_0x1a0039(0xa1e)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x39a)],Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x39a)]=function(_0x11945c){const _0x482b1c=_0x1a0039;VisuMZ[_0x482b1c(0xa1e)][_0x482b1c(0x185)]['call'](this,_0x11945c),this[_0x482b1c(0x903)](_0x11945c);},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x903)]=function(_0x1a1279){const _0x63a4b9=_0x1a0039;if(!_0x1a1279)return;if(!this[_0x63a4b9(0xa1c)])return;this[_0x63a4b9(0xa1c)]['anchor']['x']=this['_actor']['svBattlerAnchorX'](),this[_0x63a4b9(0xa1c)][_0x63a4b9(0x29d)]['y']=this[_0x63a4b9(0x8ff)]['svBattlerAnchorY'](),this[_0x63a4b9(0x4ec)]();},VisuMZ['BattleCore'][_0x1a0039(0x528)]=Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)],Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)]=function(){const _0x37a241=_0x1a0039;VisuMZ[_0x37a241(0xa1e)][_0x37a241(0x528)]['call'](this),this[_0x37a241(0x8ff)]&&(this[_0x37a241(0x69a)](),this[_0x37a241(0x904)]());},VisuMZ[_0x1a0039(0xa1e)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x1a0039(0x6d2)]['updateBitmap'],Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0xb8c)]=function(){const _0x5f521f=_0x1a0039;VisuMZ[_0x5f521f(0xa1e)]['Sprite_Actor_updateBitmap'][_0x5f521f(0xb33)](this),this[_0x5f521f(0xa1c)]&&this[_0x5f521f(0xa1c)][_0x5f521f(0x3bc)]&&this[_0x5f521f(0x414)]&&(this[_0x5f521f(0xa1c)][_0x5f521f(0x3bc)][_0x5f521f(0x7a2)]!==this[_0x5f521f(0x414)][_0x5f521f(0x641)]()&&(this[_0x5f521f(0xa1c)][_0x5f521f(0x3bc)][_0x5f521f(0x7a2)]=this[_0x5f521f(0x414)][_0x5f521f(0x641)]()));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x439)]=Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x970)],Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x970)]=function(){const _0x6075e3=_0x1a0039;VisuMZ[_0x6075e3(0xa1e)][_0x6075e3(0x439)]['call'](this),this[_0x6075e3(0x874)]();},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x874)]=function(){const _0x1f97fa=_0x1a0039;if(!this['_mainSprite'])return;if(!this[_0x1f97fa(0x757)])return;this[_0x1f97fa(0x4ec)](),this[_0x1f97fa(0x39c)]();},Sprite_Actor[_0x1a0039(0x6d2)]['updateStateSprite']=function(){const _0x144c86=_0x1a0039;this['_stateSprite'][_0x144c86(0x511)]['x']=0x1/(this['scale']['x']||0.001),this[_0x144c86(0x1ed)]['scale']['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x904)]=function(){const _0x2a5445=_0x1a0039;if(!$gameSystem[_0x2a5445(0x969)]()&&this['constructor']===Sprite_Actor){const _0x31c019=Scene_Battle['prototype'][_0x2a5445(0xa84)]();[_0x2a5445(0x9dc),_0x2a5445(0x71c),_0x2a5445(0x3a9),'border']['includes'](_0x31c019)&&(this[_0x2a5445(0x1f4)]=0x0);}},Sprite_Actor[_0x1a0039(0x6d2)]['refreshMotion']=function(){const _0x3c4bb2=_0x1a0039,_0x376304=this['_actor'];if(_0x376304){const _0x452c9b=_0x376304[_0x3c4bb2(0xa20)]();if(_0x376304['isInputting']()||_0x376304[_0x3c4bb2(0x3de)]()){if(_0x3c4bb2(0x591)!==_0x3c4bb2(0x591)){if(!_0x1cfb7f['isSceneBattle']())return;const _0x3dc1be=_0x399359[_0x3c4bb2(0x572)]();if(!_0x3dc1be)return;_0x3dc1be['setWaitMode'](_0x3c4bb2(0x344));}else this['startMotion'](_0x3c4bb2(0x5f9));}else{if(_0x452c9b===0x3){if(_0x3c4bb2(0x448)===_0x3c4bb2(0xbdd))return 0x0;else this[_0x3c4bb2(0xae8)](_0x3c4bb2(0x45e));}else{if(_0x452c9b===0x2)this[_0x3c4bb2(0xae8)](_0x3c4bb2(0x59f));else{if(this[_0x3c4bb2(0x594)])this[_0x3c4bb2(0xae8)](_0x3c4bb2(0x206));else{if(_0x376304[_0x3c4bb2(0x83e)]())this['startMotion']('wait');else{if(_0x376304[_0x3c4bb2(0x833)]()){if(_0x3c4bb2(0xbcd)===_0x3c4bb2(0xbcd))this[_0x3c4bb2(0xae8)]('chant');else{_0x1b97d3[_0x3c4bb2(0x6d2)]['updateFrame'][_0x3c4bb2(0xb33)](this);const _0x1ac7a4=this[_0x3c4bb2(0xab4)]()||this;if(!_0x1ac7a4)return;!_0x1ac7a4['bitmap']&&(_0x1ac7a4['bitmap']=new _0x127858(this[_0x3c4bb2(0x926)],this['height'])),this[_0x3c4bb2(0x317)]==='bossCollapse'?this['_mainSprite'][_0x3c4bb2(0x5bd)](0x0,0x0,this[_0x3c4bb2(0xa1c)][_0x3c4bb2(0x926)],this['_effectDuration']):_0x1ac7a4[_0x3c4bb2(0x5bd)](0x0,0x0,_0x1ac7a4['bitmap']['width'],this[_0x3c4bb2(0x3bc)][_0x3c4bb2(0x84d)]);}}else{if(_0x376304[_0x3c4bb2(0x79f)]()||_0x376304[_0x3c4bb2(0x73c)]())this[_0x3c4bb2(0xae8)](_0x3c4bb2(0xb95));else{if(_0x452c9b===0x1)'ZlwBm'!==_0x3c4bb2(0x866)?this[_0x3c4bb2(0xae8)]('abnormal'):_0x846f6f[_0x3c4bb2(0xb15)](new _0x2eadfc(_0x366288));else{if(_0x376304[_0x3c4bb2(0x669)]())_0x3c4bb2(0x9c6)!==_0x3c4bb2(0x9c6)?(_0x37ae35[_0x3c4bb2(0xa1e)][_0x3c4bb2(0x90d)][_0x3c4bb2(0xb33)](this),this[_0x3c4bb2(0x24e)]()):this[_0x3c4bb2(0xae8)]('dying');else{if(_0x376304[_0x3c4bb2(0x97d)]()){if(_0x3c4bb2(0x7cc)!=='iuFzq')this[_0x3c4bb2(0xae8)](_0x3c4bb2(0x5f9));else{if(!_0x337a58[_0x3c4bb2(0x984)]())return;if(!_0x45f1b4['VisuMZ_3_BoostAction'])return;if(!_0x402c29['_subject'])return;_0x5a0e8c[_0x3c4bb2(0x44a)](_0x1e9de5,_0x524c7e);const _0x4c68a5=_0x998b83[_0x3c4bb2(0xbb4)];_0x33e166[_0x3c4bb2(0x4e0)](_0x4c68a5,_0x342670[_0x3c4bb2(0xac9)][_0x3c4bb2(0x63d)]());}}else _0x376304[_0x3c4bb2(0xa70)]()?this['startMotion'](_0x3c4bb2(0x730)):'zkBDg'!=='dvUPU'?this[_0x3c4bb2(0xae8)](_0x3c4bb2(0x5f9)):(this['_homeX']=(this[_0x3c4bb2(0x59b)]*(_0x5b5e0d-0x1)+this[_0x3c4bb2(0x980)])/_0x1b2e9e,this[_0x3c4bb2(0xab6)]=(this['_homeY']*(_0x41051b-0x1)+this[_0x3c4bb2(0x494)])/_0x4774af);}}}}}}}}}}},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0xbe5)]=function(){const _0x6163c7=0xa,_0x5ab58d=0x12c*_0x6163c7,_0x30a326=0x1e*_0x6163c7;this['startMove'](_0x5ab58d,0x0,_0x30a326);},Sprite_Actor[_0x1a0039(0x6d2)]['onMoveEnd']=function(){const _0x2afd03=_0x1a0039;Sprite_Battler[_0x2afd03(0x6d2)]['onMoveEnd'][_0x2afd03(0xb33)](this);},Sprite_Actor[_0x1a0039(0x6d2)]['motionSpeed']=function(){const _0x29652f=_0x1a0039;return Sprite_Battler[_0x29652f(0xa46)];},Sprite_Weapon[_0x1a0039(0x6d2)][_0x1a0039(0x9bc)]=function(){const _0xa1dfc7=_0x1a0039;return Sprite_Battler[_0xa1dfc7(0xa46)];},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x46f)]=function(){},Sprite_Actor[_0x1a0039(0x6d2)]['setupWeaponAnimation']=function(){},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x37f)]=function(){const _0x540e72=_0x1a0039;if(this[_0x540e72(0x520)]&&++this[_0x540e72(0x653)]>=this[_0x540e72(0x95a)]()){if(_0x540e72(0x7b5)!==_0x540e72(0xb23)){if(this[_0x540e72(0x520)]['loop'])this[_0x540e72(0x299)]=(this[_0x540e72(0x299)]+0x1)%0x4;else this[_0x540e72(0x299)]<0x2?this[_0x540e72(0x299)]++:this[_0x540e72(0x35c)]();this['_motionCount']=0x0;}else _0xb40ece[_0x540e72(0x942)]['processAnimationRequests']();}},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x1d2)]=function(_0x1025bd){const _0x586078=_0x1a0039;if(_0x1025bd===_0x586078(0x695))this['_checkOn']=!![];if(this['_battler']&&this[_0x586078(0x414)]['isDead']()){this['_motion']=Sprite_Actor[_0x586078(0x217)]['dead'];return;}const _0x309b7=Sprite_Actor[_0x586078(0x217)][_0x1025bd];this[_0x586078(0x520)]=_0x309b7,this[_0x586078(0x653)]=0x0,this[_0x586078(0x299)]=0x0;},Sprite_Actor['prototype']['forceWeaponAnimation']=function(_0x1a1f68){const _0x9a878d=_0x1a0039;if(this[_0x9a878d(0x5da)]())return;this[_0x9a878d(0x943)](),this[_0x9a878d(0xba4)][_0x9a878d(0x55a)](_0x1a1f68),this[_0x9a878d(0x8ff)][_0x9a878d(0x6f2)]();},Sprite_Actor[_0x1a0039(0x6d2)]['adjustWeaponSpriteOffset']=function(){const _0x102213=_0x1a0039;let _0x4736f3=-0x10,_0x1af04c=this['height']*0.5;const _0x449bca=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3aa02c=this[_0x102213(0x414)]['traitObjects']()[_0x102213(0x73b)](_0x21ee89=>_0x21ee89&&_0x21ee89[_0x102213(0x83c)][_0x102213(0x7f1)](_0x449bca)?Number(RegExp['$1']):0x0),_0x549c39=this[_0x102213(0x414)][_0x102213(0x58b)]()[_0x102213(0x73b)](_0x32669f=>_0x32669f&&_0x32669f[_0x102213(0x83c)]['match'](_0x449bca)?Number(RegExp['$2']):0x0);_0x4736f3=_0x3aa02c[_0x102213(0x54a)]((_0x3c1ff5,_0x24a20d)=>_0x3c1ff5+_0x24a20d,_0x4736f3),_0x1af04c=_0x549c39[_0x102213(0x54a)]((_0x2b6a39,_0x51a45d)=>_0x2b6a39+_0x51a45d,_0x1af04c),this['_weaponSprite']['x']=_0x4736f3,this[_0x102213(0xba4)]['y']=_0x1af04c,this[_0x102213(0xba4)][_0x102213(0x9fc)]();},Sprite_Weapon[_0x1a0039(0x6d2)][_0x1a0039(0x55a)]=function(_0x36537e){const _0x952911=_0x1a0039;this[_0x952911(0x805)]=_0x36537e,this[_0x952911(0x312)]=-0x1,this['_pattern']=0x0,this['loadBitmap'](),this[_0x952911(0x3ee)]();},Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x84f)]=function(){},Sprite_Actor[_0x1a0039(0x6d2)]['stepForward']=function(){const _0x3058c1=_0x1a0039,_0x446f64=VisuMZ['BattleCore']['Settings'][_0x3058c1(0x36e)],_0x49276a=_0x446f64[_0x3058c1(0x4a9)],_0x12ab53=_0x446f64['StepDistanceY'],_0x366cdf=_0x446f64['StepDuration'];this[_0x3058c1(0xa2f)](-_0x49276a,-_0x12ab53,_0x366cdf);},VisuMZ['BattleCore'][_0x1a0039(0x997)]=Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x3ee)],Sprite_Actor[_0x1a0039(0x6d2)][_0x1a0039(0x3ee)]=function(){const _0x38e9a7=_0x1a0039;if(this[_0x38e9a7(0x5da)]()){if(_0x38e9a7(0x514)==='lMRGY'){if(this[_0x38e9a7(0x405)]())return![];if(this['isAlive']()&&this[_0x38e9a7(0x567)]())return!![];if(this[_0x38e9a7(0x795)]()&&this[_0x38e9a7(0x227)]()){if(this[_0x38e9a7(0x93b)]()&&this[_0x38e9a7(0x3f4)]())return![];}else{if(this[_0x38e9a7(0x93b)]())return![];}return!![];}else this[_0x38e9a7(0x5af)]();}else{if(_0x38e9a7(0xae0)!==_0x38e9a7(0x70d))this[_0x38e9a7(0x419)](),VisuMZ[_0x38e9a7(0xa1e)][_0x38e9a7(0x997)][_0x38e9a7(0xb33)](this);else{if(_0x3cc838[_0x38e9a7(0x81c)]&&_0x2ab87e[_0x38e9a7(0xb64)]())return![];else{if(!_0x38024b[_0x38e9a7(0xa1e)][_0x38e9a7(0x534)])return![];const _0x5cedae=_0x4d5bcc[_0x38e9a7(0x4d2)]()[_0x38e9a7(0x538)](_0x29f7c4=>_0x29f7c4[_0x38e9a7(0x80f)]()&&_0x29f7c4[_0x38e9a7(0x64c)]());return _0x5cedae[_0x38e9a7(0x2c0)]>0x0&&_0x45fb53[_0x38e9a7(0xbc6)]()!==_0x5cedae[_0x5cedae['length']-0x1];}}}},Sprite_Actor['prototype'][_0x1a0039(0x419)]=function(){const _0x333929=_0x1a0039;if(this[_0x333929(0x414)]&&this['_battler'][_0x333929(0x408)]){const _0x1b2058=this[_0x333929(0x414)][_0x333929(0x408)];this[_0x333929(0x520)]=Sprite_Actor['MOTIONS'][_0x1b2058['motionType']],this['_pattern']=_0x1b2058[_0x333929(0x9dd)];const _0x1675e5=this[_0x333929(0xba4)];_0x1675e5[_0x333929(0x468)](_0x1b2058['weaponImageId'],_0x1b2058[_0x333929(0x9dd)]),this[_0x333929(0x943)]();}},Sprite_Weapon[_0x1a0039(0x6d2)][_0x1a0039(0x468)]=function(_0x376832,_0x185921){const _0x52032d=_0x1a0039;this[_0x52032d(0x805)]=_0x376832,this[_0x52032d(0x312)]=-Infinity,this['_pattern']=_0x185921,this['loadBitmap'](),this[_0x52032d(0x3ee)]();},Sprite_Enemy['prototype']['initMembers']=function(){const _0x5966af=_0x1a0039;Sprite_Battler[_0x5966af(0x6d2)][_0x5966af(0x68c)][_0x5966af(0xb33)](this),this[_0x5966af(0x3df)]=null,this['_appeared']=![],this['_battlerName']='',this[_0x5966af(0x1a4)]=0x0,this['_effectType']=null,this[_0x5966af(0x62d)]=0x0,this['_shake']=0x0,this[_0x5966af(0x92f)](),this[_0x5966af(0x49a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x1fd)]=Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)],Sprite_Enemy['prototype'][_0x1a0039(0x9fc)]=function(){const _0x243899=_0x1a0039;VisuMZ[_0x243899(0xa1e)]['Sprite_Enemy_update']['call'](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x92f)]=function(){const _0x3941e2=_0x1a0039;this['_mainSprite']=new Sprite(),this[_0x3941e2(0xa1c)][_0x3941e2(0x29d)]['x']=0.5,this[_0x3941e2(0xa1c)][_0x3941e2(0x29d)]['y']=0x1,this['addChild'](this['_mainSprite']),this[_0x3941e2(0x16c)]();},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0xab4)]=function(){const _0xaee362=_0x1a0039;return this[_0xaee362(0xa04)]||this[_0xaee362(0xa1c)]||this;},Sprite_Enemy[_0x1a0039(0x6d2)]['loadBitmap']=function(_0x122546){const _0x2914f5=_0x1a0039;this[_0x2914f5(0x3bc)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0x1a9020=this[_0x2914f5(0x3df)][_0x2914f5(0x195)]();this[_0x2914f5(0x3bc)]=new Bitmap(_0x1a9020[_0x2914f5(0x926)],_0x1a9020['height']),this[_0x2914f5(0xa1c)][_0x2914f5(0x3bc)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x2914f5(0x969)]())this[_0x2914f5(0xa1c)]['bitmap']=ImageManager[_0x2914f5(0xa02)](_0x122546),this[_0x2914f5(0xa1c)][_0x2914f5(0x3bc)][_0x2914f5(0x870)](this[_0x2914f5(0x29e)]['bind'](this));else{if(_0x2914f5(0x992)!==_0x2914f5(0x16b))this[_0x2914f5(0xa1c)][_0x2914f5(0x3bc)]=ImageManager[_0x2914f5(0x5fd)](_0x122546),this[_0x2914f5(0xa1c)]['bitmap'][_0x2914f5(0x870)](this[_0x2914f5(0x29e)][_0x2914f5(0x940)](this));else{if(_0x4db290[_0x2914f5(0x813)](_0x348c14))return!![];return![];}}}},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x29e)]=function(){const _0x46c92e=_0x1a0039,_0x395c92=this[_0x46c92e(0xa1c)][_0x46c92e(0x3bc)];_0x395c92&&(this[_0x46c92e(0x3bc)]=new Bitmap(_0x395c92[_0x46c92e(0x926)],_0x395c92['height']));},VisuMZ['BattleCore']['Sprite_Enemy_setHue']=Sprite_Enemy[_0x1a0039(0x6d2)]['setHue'],Sprite_Enemy[_0x1a0039(0x6d2)]['setHue']=function(_0x2911ca){const _0x4c8819=_0x1a0039;this[_0x4c8819(0xa1c)]&&this[_0x4c8819(0xa1c)][_0x4c8819(0xbb6)](_0x2911ca);},VisuMZ['BattleCore']['Sprite_Enemy_initVisibility']=Sprite_Enemy['prototype'][_0x1a0039(0x411)],Sprite_Enemy['prototype'][_0x1a0039(0x411)]=function(){const _0x26f556=_0x1a0039;if(this[_0x26f556(0x3f4)]())_0x26f556(0x907)==='RGFsi'?_0x3f40fb[_0x26f556(0x9fc)]():VisuMZ[_0x26f556(0xa1e)]['Sprite_Enemy_initVisibility']['call'](this);else{this['_appeared']=!this[_0x26f556(0x3df)]['isHidden']();if(!this[_0x26f556(0xa6d)]){if(_0x26f556(0x8fd)==='pIUwp')this[_0x26f556(0x1f4)]=0x0;else{if(!(_0x1885ed[_0x26f556(0xa1e)][_0x26f556(0x4ce)][_0x26f556(0xa15)]['ShowCosts']??!![]))return;const _0x2475d0=this[_0x26f556(0xb17)](_0x1ec44c);if(![_0x26f556(0xac3),_0x26f556(0xb95),_0x26f556(0x1bc)][_0x26f556(0x604)](_0x2475d0))return;const _0x53df2d=this[_0x26f556(0x388)](_0x3e13da);let _0x3e06f2=null;if(_0x2475d0===_0x26f556(0xac3))_0x3e06f2=_0x1996f5[this[_0x26f556(0x8ff)][_0x26f556(0x867)]()];else _0x2475d0===_0x26f556(0xb95)?_0x3e06f2=_0x57af60[this['_actor']['guardSkillId']()]:_0x3e06f2=_0x5747d4[this['_list'][_0x4614a2]['ext']];this[_0x26f556(0x2e0)](this[_0x26f556(0x8ff)],_0x3e06f2,_0x53df2d['x'],_0x53df2d['y'],_0x53df2d[_0x26f556(0x926)]);}}}},VisuMZ['BattleCore'][_0x1a0039(0x92d)]=Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x8c0)],Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x8c0)]=function(){const _0x5e154e=_0x1a0039;if(this[_0x5e154e(0x3f4)]())VisuMZ[_0x5e154e(0xa1e)][_0x5e154e(0x92d)][_0x5e154e(0xb33)](this);},Sprite_Enemy['prototype'][_0x1a0039(0x3ee)]=function(){const _0x81f66b=_0x1a0039;Sprite_Battler[_0x81f66b(0x6d2)][_0x81f66b(0x3ee)][_0x81f66b(0xb33)](this);const _0x15657f=this[_0x81f66b(0xab4)]()||this;if(!_0x15657f)return;!_0x15657f[_0x81f66b(0x3bc)]&&(_0x81f66b(0xae9)!==_0x81f66b(0x221)?_0x15657f['bitmap']=new Bitmap(this[_0x81f66b(0x926)],this['height']):this[_0x81f66b(0x851)][_0x81f66b(0x35c)]()),this[_0x81f66b(0x317)]===_0x81f66b(0x8f5)?this[_0x81f66b(0xa1c)][_0x81f66b(0x5bd)](0x0,0x0,this['_mainSprite'][_0x81f66b(0x926)],this['_effectDuration']):_0x15657f[_0x81f66b(0x5bd)](0x0,0x0,_0x15657f[_0x81f66b(0x3bc)][_0x81f66b(0x926)],this[_0x81f66b(0x3bc)][_0x81f66b(0x84d)]);},VisuMZ['BattleCore'][_0x1a0039(0x30c)]=Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x57b)],Sprite_Enemy['prototype']['updateBossCollapse']=function(){const _0xb02d0f=_0x1a0039;if(this['allowCollapse']())VisuMZ[_0xb02d0f(0xa1e)][_0xb02d0f(0x30c)]['call'](this);},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x8b5)]=function(){const _0x29f19c=_0x1a0039;return Sprite_Battler[_0x29f19c(0x6d2)]['isMoving'][_0x29f19c(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x151)]=Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x69a)],Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x69a)]=function(){const _0x4db594=_0x1a0039;VisuMZ[_0x4db594(0xa1e)][_0x4db594(0x151)][_0x4db594(0xb33)](this),this[_0x4db594(0x328)]();},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x328)]=function(){const _0x45a83e=_0x1a0039,_0x27af1b=VisuMZ['BattleCore'][_0x45a83e(0x4ce)][_0x45a83e(0x814)];if(_0x27af1b[_0x45a83e(0xaef)]&&!_0x27af1b[_0x45a83e(0x3ef)]){this[_0x45a83e(0x1aa)][_0x45a83e(0x1f4)]=0x0;return;}this[_0x45a83e(0x1aa)]['x']=0x0,this['_stateIconSprite']['x']+=this['_battler'][_0x45a83e(0xb94)](),this[_0x45a83e(0x1aa)]['y']=-this[_0x45a83e(0x3bc)][_0x45a83e(0x84d)]-this[_0x45a83e(0x1aa)][_0x45a83e(0x84d)]-0x4,this['_stateIconSprite']['y']+=this[_0x45a83e(0x414)][_0x45a83e(0x1bb)](),this[_0x45a83e(0x1aa)][_0x45a83e(0x511)]['x']=0x1/(this[_0x45a83e(0x511)]['x']||0.001),this[_0x45a83e(0x1aa)][_0x45a83e(0x511)]['y']=0x1/(this[_0x45a83e(0x511)]['y']||0.001),this[_0x45a83e(0x227)]()&&(this['_svBattlerSprite'][_0x45a83e(0x1ed)]['scale']['x']=-0x1/(this[_0x45a83e(0x511)]['x']||0.001),this[_0x45a83e(0x851)][_0x45a83e(0x1ed)][_0x45a83e(0x511)]['y']=0x1/(this[_0x45a83e(0x511)]['y']||0.001));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x815)]=Sprite_Enemy['prototype']['setBattler'],Sprite_Enemy['prototype']['setBattler']=function(_0x40a049){const _0x2d9312=_0x1a0039;VisuMZ[_0x2d9312(0xa1e)][_0x2d9312(0x815)]['call'](this,_0x40a049),this[_0x2d9312(0x1cd)](_0x40a049);},Sprite_Enemy['prototype']['setSvBattlerSprite']=function(_0x3b5731){const _0x719954=_0x1a0039;if(!this['_svBattlerSprite']){if('GYzqr'==='GYzqr')this[_0x719954(0x851)]=new Sprite_SvEnemy(_0x3b5731),this['attachSpritesToDistortionSprite']();else{if(!_0x268161[_0x719954(0xa1e)]['Settings']['BattleLog'][_0x719954(0x37e)])return;const _0x213d95=_0x1e769a[_0x719954(0x246)](),_0xc9bac3=_0x213d95[_0x719954(0x6a5)]();for(const _0x145b95 of _0xc9bac3){_0x145b95[_0x719954(0x226)]&&(this[_0x719954(0xb15)](_0x719954(0x214)),this[_0x719954(0xb15)](_0x719954(0x5ef)),this[_0x719954(0xb15)]('pushBaseLine'),this[_0x719954(0xb15)](_0x719954(0x827),_0x145b95[_0x719954(0x226)][_0x719954(0x4a8)](_0x1d3363['name']())),this[_0x719954(0xb15)](_0x719954(0x730)));}}}this[_0x719954(0x851)][_0x719954(0x39a)](_0x3b5731);},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x227)]=function(){const _0x2a2d09=_0x1a0039;return this['_enemy']&&this[_0x2a2d09(0x3df)][_0x2a2d09(0x227)]();},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x3f4)]=function(){const _0x4e4122=_0x1a0039;if(this[_0x4e4122(0x227)]()){if(_0x4e4122(0x176)!==_0x4e4122(0x3ce))return this['_enemy'][_0x4e4122(0x3f4)]();else{let _0x532e3b=_0x46cf99[_0x4e4122(0xa1e)][_0x4e4122(0x95f)][_0x4e4122(0xb33)](this);if(this[_0x4e4122(0x470)])return _0x532e3b;if(this[_0x4e4122(0x38f)]!==_0x2054b7){this[_0x4e4122(0x470)]=!![];const _0x3bb175=this[_0x4e4122(0xa19)]();for(let _0x22b66e=0x0;_0x22b66e<_0x3bb175['length'];_0x22b66e++){_0x3bb175[_0x22b66e]===0x1&&this[_0x4e4122(0x38f)]!==_0x22b66e&&(_0x532e3b[_0x22b66e]=null);}this[_0x4e4122(0x470)]=_0x127eee;}return _0x532e3b;}}else return!![];},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x35c)]=function(){const _0x254401=_0x1a0039;if(this[_0x254401(0x227)]()){if(_0x254401(0x491)===_0x254401(0x491))this['_svBattlerSprite']['refreshMotion']();else return this[_0x254401(0x3ff)]()[_0x254401(0x42d)](_0x2fdfc1=>_0x2fdfc1[_0x254401(0x6c9)]());}},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x1d2)]=function(_0x3b1517){const _0x588735=_0x1a0039;if(this[_0x588735(0x227)]())this[_0x588735(0x851)][_0x588735(0x1d2)](_0x3b1517);},Sprite_Enemy[_0x1a0039(0x6d2)]['forceWeaponAnimation']=function(_0xb272ed){const _0x157b5a=_0x1a0039;if(this[_0x157b5a(0x227)]())this['_svBattlerSprite']['forceWeaponAnimation'](_0xb272ed);},Sprite_Enemy[_0x1a0039(0x6d2)][_0x1a0039(0x9ba)]=function(){const _0x4c1221=_0x1a0039,_0x1c30bb=VisuMZ[_0x4c1221(0xa1e)]['Settings'][_0x4c1221(0x36e)],_0x4b2179=_0x1c30bb['StepDistanceX'],_0x2de957=_0x1c30bb[_0x4c1221(0x932)],_0xaa560f=_0x1c30bb[_0x4c1221(0x976)];this[_0x4c1221(0xa2f)](_0x4b2179,_0x2de957,_0xaa560f);};function Sprite_SvEnemy(){const _0xa562c=_0x1a0039;this[_0xa562c(0x3e0)](...arguments);}Sprite_SvEnemy[_0x1a0039(0x6d2)]=Object['create'](Sprite_Actor[_0x1a0039(0x6d2)]),Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x9a0)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x1a0039(0x6d2)]['initialize']=function(_0x59e100){const _0x361ea1=_0x1a0039;Sprite_Actor[_0x361ea1(0x6d2)][_0x361ea1(0x3e0)][_0x361ea1(0xb33)](this,_0x59e100),this['scale']['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x2c5)]=function(){},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x9a8)]=function(){},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x939)]=function(_0x40c056){},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x970)]=function(){},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x39c)]=function(){},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x69a)]=function(){const _0x3bda54=_0x1a0039;this[_0x3bda54(0x1ed)][_0x3bda54(0x3c0)]=![];},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0xb8c)]=function(){const _0xd42bd2=_0x1a0039;Sprite_Battler['prototype']['updateBitmap'][_0xd42bd2(0xb33)](this);const _0x522218=this[_0xd42bd2(0x8ff)][_0xd42bd2(0x80c)]();if(this[_0xd42bd2(0x584)]!==_0x522218){if(_0xd42bd2(0xb60)===_0xd42bd2(0xb60))this['_battlerName']=_0x522218,this[_0xd42bd2(0xa1c)]['bitmap']=ImageManager[_0xd42bd2(0x15f)](_0x522218);else return _0x4e44c5[_0xd42bd2(0xa1e)]['Game_Action_isForOpponent'][_0xd42bd2(0xb33)](this);}this['_mainSprite']&&this['_mainSprite'][_0xd42bd2(0x3bc)]&&this[_0xd42bd2(0x414)]&&(this[_0xd42bd2(0xa1c)][_0xd42bd2(0x3bc)]['smooth']!==this[_0xd42bd2(0x414)][_0xd42bd2(0x641)]()&&(this['_mainSprite'][_0xd42bd2(0x3bc)]['smooth']=this[_0xd42bd2(0x414)][_0xd42bd2(0x641)]()));},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0xbe5)]=function(){},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0xa2f)]=function(_0x47fada,_0x11f70f,_0x45bb3c){const _0x370ba2=_0x1a0039;if(this['parent'])this[_0x370ba2(0x599)]['startMove'](_0x47fada,_0x11f70f,_0x45bb3c);},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x35c)]=function(){const _0x4a1f81=_0x1a0039,_0x309102=this['_actor'];if(_0x309102){const _0x472e81=_0x309102['stateMotionIndex']();if(_0x309102[_0x4a1f81(0x165)]()||_0x309102[_0x4a1f81(0x3de)]())this[_0x4a1f81(0xae8)]('walk');else{if(_0x472e81===0x3){if(_0x4a1f81(0x7c6)!==_0x4a1f81(0x7c6))return _0x4f7d35;else this[_0x4a1f81(0xae8)](_0x4a1f81(0x45e));}else{if(_0x472e81===0x2)_0x4a1f81(0x512)==='NSfBe'?this[_0x4a1f81(0xae8)](_0x4a1f81(0x59f)):(this[_0x4a1f81(0x48a)]=this['validTargets'](),this[_0x4a1f81(0x586)](),_0x206bef[_0x4a1f81(0x6d2)][_0x4a1f81(0x466)]['call'](this));else{if(_0x309102['isChanting']())this[_0x4a1f81(0xae8)](_0x4a1f81(0x931));else{if(_0x309102[_0x4a1f81(0x79f)]()||_0x309102['isGuardWaiting']())this[_0x4a1f81(0xae8)](_0x4a1f81(0xb95));else{if(_0x472e81===0x1)this[_0x4a1f81(0xae8)]('abnormal');else{if(_0x309102['isDying']())this[_0x4a1f81(0xae8)](_0x4a1f81(0x3cf));else _0x309102[_0x4a1f81(0x97d)]()?_0x4a1f81(0x8d7)===_0x4a1f81(0xa8b)?_0x1dc0ab+=_0x2029c3/0x2:this[_0x4a1f81(0xae8)](_0x4a1f81(0x5f9)):_0x4a1f81(0x160)===_0x4a1f81(0x160)?this['startMotion'](_0x309102[_0x4a1f81(0x195)]()['motionIdle']||_0x4a1f81(0x5f9)):_0x1557b1[_0x4a1f81(0xb15)](_0x4a1f81(0x5e8),_0x240f99,_0x10ed2a);}}}}}}}},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0xa35)]=function(){const _0x2f8803=_0x1a0039;return this[_0x2f8803(0x599)]?this[_0x2f8803(0x599)][_0x2f8803(0x3f7)]===0x0&&this[_0x2f8803(0x599)]['_offsetY']===0x0:'yNSiV'===_0x2f8803(0x3bd)?this[_0x2f8803(0x95d)]():!![];},Sprite_SvEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x8f6)]=function(){},VisuMZ[_0x1a0039(0xa1e)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation[_0x1a0039(0x6d2)]['targetSpritePosition'],Sprite_Animation['prototype']['targetSpritePosition']=function(_0x444774){const _0x3a8dd7=_0x1a0039;return _0x444774[_0x3a8dd7(0xa04)]?this['targetDistortionSpritePosition'](_0x444774):VisuMZ['BattleCore'][_0x3a8dd7(0xbae)][_0x3a8dd7(0xb33)](this,_0x444774);},Sprite_Animation[_0x1a0039(0x6d2)]['targetDistortionSpritePosition']=function(_0xb5d689){const _0x286f41=_0x1a0039;let _0x5cbb8d=_0xb5d689['x'],_0x1d255a=_0xb5d689['y'],_0x2c8755=_0xb5d689[_0x286f41(0x84d)],_0x50985c=_0xb5d689[_0x286f41(0xa04)]['scale']['y'];_0xb5d689['x']=_0xb5d689[_0x286f41(0x1d4)]+_0xb5d689[_0x286f41(0x769)](),_0xb5d689['y']=_0xb5d689['_baseY']+_0xb5d689[_0x286f41(0xb1c)](),_0xb5d689[_0x286f41(0x84d)]*=_0x50985c;let _0x52a035=VisuMZ[_0x286f41(0xa1e)][_0x286f41(0xbae)][_0x286f41(0xb33)](this,_0xb5d689);return _0xb5d689['x']=_0x5cbb8d,_0xb5d689['y']=_0x1d255a,_0xb5d689[_0x286f41(0x84d)]=_0x2c8755,_0x52a035;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x2b7)]=Sprite_AnimationMV[_0x1a0039(0x6d2)][_0x1a0039(0x401)],Sprite_AnimationMV['prototype'][_0x1a0039(0x401)]=function(){const _0x154b6c=_0x1a0039;VisuMZ[_0x154b6c(0xa1e)][_0x154b6c(0x2b7)]['call'](this);if(this[_0x154b6c(0xaeb)][_0x154b6c(0x9c1)]===0x3){if(this['x']===0x0)this['x']=Math['round'](Graphics[_0x154b6c(0x926)]/0x2);if(this['y']===0x0)this['y']=Math['round'](Graphics['height']/0x2);}},Sprite_Damage[_0x1a0039(0x6d2)][_0x1a0039(0x7e1)]=function(_0x10d769){const _0x34eab8=_0x1a0039,_0x53b3ff=_0x10d769[_0x34eab8(0xad1)]()||_0x10d769[_0x34eab8(0x246)]();if(_0x53b3ff[_0x34eab8(0x8d5)]||_0x53b3ff['evaded']){if('qCNuN'!=='qCNuN'){const _0x374e70=_0x5611c9[_0x34eab8(0xa1e)][_0x34eab8(0x4ce)][_0x34eab8(0x687)];if(_0x374e70[_0x34eab8(0x722)]){const _0x45505b=new _0x31a112();_0x45505b[_0x34eab8(0x3bc)]=_0x44f9e1['loadSystem'](_0x374e70[_0x34eab8(0x722)]),_0x45505b['x']=_0x374e70[_0x34eab8(0x721)]||0x0,_0x45505b['y']=_0x374e70['StatusWindowAttachmentBackOffsetY']||0x0,this['addChildToBack'](_0x45505b),this['_backAttachmentSprite']=_0x45505b;}if(_0x374e70['StatusWindowAttachmentFront']){const _0x4e0432=new _0x1cadd0();_0x4e0432[_0x34eab8(0x3bc)]=_0x2ab003[_0x34eab8(0x6de)](_0x374e70['StatusWindowAttachmentFront']),_0x4e0432['x']=_0x374e70['StatusWindowAttachmentFrontOffsetX']||0x0,_0x4e0432['y']=_0x374e70[_0x34eab8(0x1fe)]||0x0,this[_0x34eab8(0xb20)](_0x4e0432),this['_frontAttachmentSprite']=_0x4e0432;}}else this[_0x34eab8(0x780)]=0x0,this[_0x34eab8(0x282)]();}else{if(_0x53b3ff['hpAffected'])this['_colorType']=_0x53b3ff[_0x34eab8(0x225)]>=0x0?0x0:0x1,this[_0x34eab8(0x438)](_0x53b3ff[_0x34eab8(0x225)]);else _0x10d769[_0x34eab8(0x140)]()&&_0x53b3ff['mpDamage']!==0x0&&(_0x34eab8(0xb91)!==_0x34eab8(0x218)?(this[_0x34eab8(0x780)]=_0x53b3ff[_0x34eab8(0x1dd)]>=0x0?0x2:0x3,this['createDigits'](_0x53b3ff[_0x34eab8(0x1dd)])):_0x5bb59b[_0x34eab8(0x5e6)](_0x3edb9a));}_0x53b3ff['critical']&&(_0x34eab8(0x49c)!==_0x34eab8(0x6b5)?this[_0x34eab8(0x7ed)]():_0x2a2669[_0x34eab8(0xb15)](_0x34eab8(0x372),_0x49208a));},Sprite_Damage[_0x1a0039(0x6d2)][_0x1a0039(0x55a)]=function(_0x7f897b){},Sprite_Damage['prototype'][_0x1a0039(0x438)]=function(_0x2afcda){const _0x1267ee=_0x1a0039;let _0x168712=this[_0x1267ee(0xbc3)](_0x2afcda);const _0x338373=this[_0x1267ee(0x35b)](),_0x4726b7=Math[_0x1267ee(0x8bb)](_0x338373*0.75);for(let _0x40032c=0x0;_0x40032c<_0x168712[_0x1267ee(0x2c0)];_0x40032c++){if(_0x1267ee(0x428)===_0x1267ee(0x742))this[_0x1267ee(0xa1c)]=new _0x3fae97(),this['_mainSprite'][_0x1267ee(0x29d)]['x']=0.5,this[_0x1267ee(0xa1c)]['anchor']['y']=0x1,this[_0x1267ee(0xb20)](this['_mainSprite']),this[_0x1267ee(0x16c)]();else{const _0xa58ab9=this[_0x1267ee(0x4de)](_0x4726b7,_0x338373);_0xa58ab9[_0x1267ee(0x3bc)]['drawText'](_0x168712[_0x40032c],0x0,0x0,_0x4726b7,_0x338373,'center'),_0xa58ab9['x']=(_0x40032c-(_0x168712[_0x1267ee(0x2c0)]-0x1)/0x2)*_0x4726b7,_0xa58ab9['dy']=-_0x40032c;}}},Sprite_Damage[_0x1a0039(0x6d2)]['createString']=function(_0x3f47d5){const _0x1efbe1=_0x1a0039;let _0x5e16d8=Math[_0x1efbe1(0xbe1)](_0x3f47d5)[_0x1efbe1(0x7c2)]();if(this[_0x1efbe1(0x71b)]()){if(_0x1efbe1(0x4cb)!=='UrkdF'){if(_0x31cf5c){const _0x5015f0=_0x10fac5[_0x1efbe1(0xadc)](_0x495880);return _0x5015f0>=0x0?[_0x462512[_0x5015f0-0x1]||_0x3d7c60]:[_0x383e5f];}}else _0x5e16d8=VisuMZ[_0x1efbe1(0x84e)](_0x5e16d8);}const _0x1cde42=VisuMZ['BattleCore'][_0x1efbe1(0x4ce)][_0x1efbe1(0xa92)];let _0x373420='',_0x2de2fa='';switch(this[_0x1efbe1(0x780)]){case 0x0:_0x373420=_0x1cde42['hpDamageFmt']||_0x1efbe1(0x499),_0x2de2fa=TextManager['hp'];if(_0x3f47d5===0x0)_0x373420='%1';break;case 0x1:_0x373420=_0x1cde42[_0x1efbe1(0x290)]||'+%1',_0x2de2fa=TextManager['hp'];break;case 0x2:_0x373420=_0x1cde42[_0x1efbe1(0x93a)]||_0x1efbe1(0x8a9),_0x2de2fa=TextManager['mp'];break;case 0x3:_0x373420=_0x1cde42['mpHealingFmt']||_0x1efbe1(0x2b8),_0x2de2fa=TextManager['mp'];break;}return _0x373420[_0x1efbe1(0x4a8)](_0x5e16d8,_0x2de2fa)[_0x1efbe1(0x850)]();},Sprite_Damage['prototype'][_0x1a0039(0x71b)]=function(){const _0x7d1988=_0x1a0039;return Imported[_0x7d1988(0x212)]?_0x7d1988(0x94d)===_0x7d1988(0x94d)?VisuMZ['CoreEngine'][_0x7d1988(0x4ce)][_0x7d1988(0x1e5)][_0x7d1988(0xb3b)]:(_0x43a156=_0x49c052[_0x7d1988(0x917)](_0x3d079b*1.2),_0xb72467[_0x7d1988(0xa1e)][_0x7d1988(0x25f)][_0x7d1988(0xb33)](this,_0x2c004a,_0x14925e)):![];},Sprite_Damage[_0x1a0039(0x6d2)][_0x1a0039(0x7ed)]=function(){const _0x17c64d=_0x1a0039,_0x23384b=VisuMZ['BattleCore'][_0x17c64d(0x4ce)][_0x17c64d(0xa92)];this[_0x17c64d(0x407)]=_0x23384b[_0x17c64d(0x1c0)][_0x17c64d(0x130)](0x0),this[_0x17c64d(0x70c)]=_0x23384b['CriticalDuration'];},Sprite_Damage[_0x1a0039(0x6d2)][_0x1a0039(0x440)]=function(_0x1b4a52,_0x5116f9){const _0x292acb=_0x1a0039;this[_0x292acb(0x407)]=_0x5116f9[_0x292acb(0x86b)]||[0x0,0x0,0x0,0x0],this[_0x292acb(0x407)]=JsonEx[_0x292acb(0x5ee)](this['_flashColor']),this[_0x292acb(0x70c)]=_0x5116f9[_0x292acb(0xaad)]||0x0;const _0x3dbaba=this[_0x292acb(0x35b)](),_0x36fcdc=Math[_0x292acb(0x8bb)](_0x3dbaba*0x1e),_0x3dc0b9=this[_0x292acb(0x4de)](_0x36fcdc,_0x3dbaba);_0x3dc0b9[_0x292acb(0x3bc)]['textColor']=ColorManager[_0x292acb(0x350)](_0x5116f9[_0x292acb(0x9b1)]),_0x3dc0b9[_0x292acb(0x3bc)][_0x292acb(0x743)](_0x1b4a52,0x0,0x0,_0x36fcdc,_0x3dbaba,_0x292acb(0x36f)),_0x3dc0b9['dy']=0x0;},Sprite_Damage[_0x1a0039(0x6d2)][_0x1a0039(0xbbe)]=function(_0x5199b8,_0x51a493,_0x34a60d){const _0x5c9fa7=_0x1a0039,_0x42449a=Math[_0x5c9fa7(0x8ae)](this['fontSize'](),ImageManager[_0x5c9fa7(0x923)]),_0x4b4b15=Math[_0x5c9fa7(0x8bb)](_0x42449a*0x1e),_0x1a1857=this['createChildSprite'](_0x4b4b15,_0x42449a),_0x25b9c8=ImageManager['iconWidth']/0x2,_0x2a687f=_0x1a1857[_0x5c9fa7(0x3bc)][_0x5c9fa7(0xb4d)](_0x51a493+'\x20');_0x1a1857['bitmap'][_0x5c9fa7(0x9b1)]=ColorManager[_0x5c9fa7(0x350)](_0x34a60d[_0x5c9fa7(0x9b1)]),_0x1a1857[_0x5c9fa7(0x3bc)][_0x5c9fa7(0x743)](_0x51a493,_0x25b9c8,0x0,_0x4b4b15-_0x25b9c8,_0x42449a,_0x5c9fa7(0x36f));const _0x414cd8=Math[_0x5c9fa7(0x917)]((_0x42449a-ImageManager[_0x5c9fa7(0x923)])/0x2),_0x2b29f1=_0x4b4b15/0x2-ImageManager['iconWidth']-_0x2a687f/0x2+_0x25b9c8/0x2,_0x1b89a4=ImageManager[_0x5c9fa7(0x6de)]('IconSet'),_0x49c93d=ImageManager[_0x5c9fa7(0x87b)],_0x54118b=ImageManager[_0x5c9fa7(0x923)],_0x562a28=_0x5199b8%0x10*_0x49c93d,_0x4ea51a=Math[_0x5c9fa7(0x8bb)](_0x5199b8/0x10)*_0x54118b;_0x1a1857[_0x5c9fa7(0x3bc)][_0x5c9fa7(0x17a)](_0x1b89a4,_0x562a28,_0x4ea51a,_0x49c93d,_0x54118b,_0x2b29f1,_0x414cd8),this['_flashColor']=_0x34a60d[_0x5c9fa7(0x86b)]||[0x0,0x0,0x0,0x0],this[_0x5c9fa7(0x407)]=JsonEx[_0x5c9fa7(0x5ee)](this[_0x5c9fa7(0x407)]),this[_0x5c9fa7(0x70c)]=_0x34a60d['flashDuration']||0x0,_0x1a1857['dy']=0x0;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x25f)]=Sprite_Damage[_0x1a0039(0x6d2)]['createChildSprite'],Sprite_Damage[_0x1a0039(0x6d2)][_0x1a0039(0x4de)]=function(_0x5528dc,_0x303ca0){const _0x1879bf=_0x1a0039;return _0x303ca0=Math[_0x1879bf(0x917)](_0x303ca0*1.2),VisuMZ['BattleCore']['Sprite_Damage_createChildSprite'][_0x1879bf(0xb33)](this,_0x5528dc,_0x303ca0);},VisuMZ['BattleCore'][_0x1a0039(0xb9a)]=Sprite_StateIcon['prototype'][_0x1a0039(0x3ee)],Sprite_StateIcon['prototype'][_0x1a0039(0x3ee)]=function(){const _0x8e0f69=_0x1a0039;VisuMZ[_0x8e0f69(0xa1e)][_0x8e0f69(0xb9a)][_0x8e0f69(0xb33)](this),this[_0x8e0f69(0x1f4)]=this[_0x8e0f69(0x2d6)]>0x0?0xff:0x0;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x315)]=Sprite_Weapon['prototype']['loadBitmap'],Sprite_Weapon[_0x1a0039(0x6d2)][_0x1a0039(0x376)]=function(){const _0x24f061=_0x1a0039;VisuMZ['BattleCore'][_0x24f061(0x315)][_0x24f061(0xb33)](this),this[_0x24f061(0x3bc)]&&(this[_0x24f061(0x3bc)][_0x24f061(0x7a2)]=VisuMZ[_0x24f061(0xa1e)]['Settings']['Actor']['SmoothImage']);};function Sprite_HpGauge(){const _0x3822e8=_0x1a0039;this[_0x3822e8(0x3e0)](...arguments);}Sprite_HpGauge[_0x1a0039(0x6d2)]=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x1a0039(0x6d2)][_0x1a0039(0x9a0)]=Sprite_HpGauge,Sprite_HpGauge[_0x1a0039(0x6d2)]['initialize']=function(){const _0x2937a7=_0x1a0039;Sprite_Gauge[_0x2937a7(0x6d2)][_0x2937a7(0x3e0)][_0x2937a7(0xb33)](this);},Sprite_HpGauge[_0x1a0039(0x6d2)][_0x1a0039(0x524)]=function(){return 0x0;},Sprite_HpGauge[_0x1a0039(0x6d2)]['redraw']=function(){const _0x2a00cf=_0x1a0039;this[_0x2a00cf(0x3bc)][_0x2a00cf(0xaf1)]();const _0x14e725=this['currentValue']();!isNaN(_0x14e725)&&(_0x2a00cf(0x97f)!=='zMlxH'?this[_0x2a00cf(0x169)]():(this['_text']=this[_0x2a00cf(0x91b)]()['name'](),this[_0x2a00cf(0x466)]()));};function Sprite_EnemyName(){const _0x35448d=_0x1a0039;this[_0x35448d(0x3e0)](...arguments);}Sprite_EnemyName[_0x1a0039(0x6d2)]=Object[_0x1a0039(0x862)](Sprite_Name['prototype']),Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x9a0)]=Sprite_EnemyName,Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)]=function(){const _0x62e315=_0x1a0039;Sprite_Name[_0x62e315(0x6d2)][_0x62e315(0x3e0)][_0x62e315(0xb33)](this),this[_0x62e315(0x46a)]();},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x68c)]=function(){const _0x1e2318=_0x1a0039;Sprite_Name['prototype']['initMembers'][_0x1e2318(0xb33)](this),this['opacity']=0x0,this[_0x1e2318(0x723)]=null,this['anchor']['x']=0.5,this[_0x1e2318(0x29d)]['y']=0x0;},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x46a)]=function(){const _0x5a3cda=_0x1a0039;VisuMZ[_0x5a3cda(0xa1e)][_0x5a3cda(0x4ce)][_0x5a3cda(0x814)][_0x5a3cda(0xaef)]&&(this[_0x5a3cda(0x1aa)]=new Sprite_StateIcon(),this['addChild'](this[_0x5a3cda(0x1aa)]));},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x63a)]=function(){const _0x49b17b=_0x1a0039;return Graphics[_0x49b17b(0x5d3)];},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x921)]=function(){const _0x460a5d=_0x1a0039;return this[_0x460a5d(0x516)]=this[_0x460a5d(0x516)]||Window_Base[_0x460a5d(0x6d2)][_0x460a5d(0x576)]()||0x24,this[_0x460a5d(0x516)]*0x4;},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x35b)]=function(){const _0x344ac4=_0x1a0039;return VisuMZ[_0x344ac4(0xa1e)][_0x344ac4(0x4ce)]['Enemy'][_0x344ac4(0x7cd)]||$gameSystem[_0x344ac4(0x1ef)]();},Sprite_EnemyName[_0x1a0039(0x6d2)]['linkSprite']=function(_0x31cf65){const _0xf1c8a5=_0x1a0039;this[_0xf1c8a5(0x723)]=_0x31cf65;},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)]=function(){const _0xb156f3=_0x1a0039;Sprite_Name[_0xb156f3(0x6d2)]['update'][_0xb156f3(0xb33)](this),this[_0xb156f3(0x93f)](),this[_0xb156f3(0x401)](),this[_0xb156f3(0xa56)](),this['updateOpacity']();},Sprite_EnemyName[_0x1a0039(0x6d2)]['redraw']=function(){const _0x516344=_0x1a0039;this[_0x516344(0x822)]=undefined;const _0x1962e6=this[_0x516344(0x192)](),_0x26850b=this[_0x516344(0x63a)](),_0x46c6af=Window_Base[_0x516344(0x6d2)]['lineHeight']();this[_0x516344(0xaba)](),this['bitmap'][_0x516344(0xaf1)](),this[_0x516344(0x3bc)][_0x516344(0x743)](_0x1962e6,0x0,0x0,_0x26850b,_0x46c6af,_0x516344(0x36f));},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x93f)]=function(){const _0x1bee23=_0x1a0039;if(!this[_0x1bee23(0x723)])return;this[_0x1bee23(0x414)]!==this[_0x1bee23(0x723)][_0x1bee23(0x414)]&&this[_0x1bee23(0x55a)](this[_0x1bee23(0x723)][_0x1bee23(0x414)]);},Sprite_EnemyName[_0x1a0039(0x6d2)]['updatePosition']=function(){const _0x128eda=_0x1a0039;if(!this[_0x128eda(0x723)])return;this[_0x128eda(0x516)]=this[_0x128eda(0x516)]||Window_Base[_0x128eda(0x6d2)][_0x128eda(0x576)](),this['x']=this['_linkedSprite']['_baseX'],this['y']=this[_0x128eda(0x723)][_0x128eda(0x9da)]-this[_0x128eda(0x516)]*0.5;const _0x36050e=VisuMZ[_0x128eda(0xa1e)][_0x128eda(0x4ce)][_0x128eda(0x814)];this['x']+=_0x36050e['NameOffsetX']||0x0,this['y']+=_0x36050e[_0x128eda(0xa0c)]||0x0;},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0xa56)]=function(){const _0x4b5c0b=_0x1a0039;this[_0x4b5c0b(0x139)]();},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x139)]=function(){const _0x47839f=_0x1a0039;if(!this[_0x47839f(0x1aa)])return;if(this[_0x47839f(0x414)]!==this['_stateIconSprite'][_0x47839f(0x414)]){if(_0x47839f(0xa06)!==_0x47839f(0xa06))return _0x1abf20[_0x47839f(0xa1e)][_0x47839f(0x5d2)][_0x47839f(0xb33)](this,_0x288d98);else this['_stateIconSprite']['setup'](this[_0x47839f(0x414)]);}const _0x5b0a8a=this['textWidth']();this[_0x47839f(0x516)]=this[_0x47839f(0x516)]||Window_Base[_0x47839f(0x6d2)][_0x47839f(0x576)](),this['_stateIconSprite']['x']=Math[_0x47839f(0x917)]((_0x5b0a8a+ImageManager[_0x47839f(0x87b)])/0x2)+0x8,this[_0x47839f(0x1aa)]['y']=this[_0x47839f(0x516)]/0x2;const _0x5add18=VisuMZ[_0x47839f(0xa1e)]['Settings'][_0x47839f(0x814)];this[_0x47839f(0x1aa)]['x']+=_0x5add18[_0x47839f(0x320)]||0x0,this[_0x47839f(0x1aa)]['y']+=_0x5add18['AttachStateOffsetY']||0x0;},Sprite_EnemyName['prototype'][_0x1a0039(0x67f)]=function(){const _0x119d59=_0x1a0039,_0x323a77=this[_0x119d59(0x6ae)]();if(_0x323a77&&this[_0x119d59(0x1f4)]<0xff)this[_0x119d59(0x1f4)]+=0x10;else{if(!_0x323a77&&this[_0x119d59(0x1f4)]>0x0){if(_0x119d59(0x30a)==='kqmTZ'){const _0x738056=this[_0x119d59(0xa04)][_0x119d59(0x511)]['y'];_0x19e95f-=(_0x738056-0x1)*this['height'];}else this[_0x119d59(0x1f4)]-=0x10;}}},Sprite_EnemyName[_0x1a0039(0x6d2)]['visibilityState']=function(){const _0x1ebeeb=_0x1a0039;if(this[_0x1ebeeb(0x6dc)]())return![];else{if(!this[_0x1ebeeb(0x414)]){if(_0x1ebeeb(0x223)!==_0x1ebeeb(0x2ee))return![];else this[_0x1ebeeb(0x410)]();}else{if(this[_0x1ebeeb(0x414)]['isDead']()){if(_0x1ebeeb(0x4cf)===_0x1ebeeb(0xa23))this[_0x1ebeeb(0xa98)][_0x1ebeeb(0x65e)](),this[_0x1ebeeb(0x54f)][_0x1ebeeb(0x319)](),this['_actorCommandWindow']['activate']();else return![];}else{if(!this[_0x1ebeeb(0x414)]['isAppeared']())return![];else{if(this[_0x1ebeeb(0x2b1)]())return!![];else{if(this[_0x1ebeeb(0xad3)]())return _0x1ebeeb(0x878)==='TqhvE'?_0x2ceeac['isActiveTpb']():!![];else{if(this[_0x1ebeeb(0x522)]())return!![];else{if(this[_0x1ebeeb(0x1f4)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x1a0039(0x6d2)]['isAlwaysHidden']=function(){const _0x294bfa=_0x1a0039;return VisuMZ['BattleCore'][_0x294bfa(0x4ce)][_0x294bfa(0x814)][_0x294bfa(0x2f4)];},Sprite_EnemyName['prototype'][_0x1a0039(0x2b1)]=function(){return![];},Sprite_EnemyName['prototype'][_0x1a0039(0xad3)]=function(){const _0xefdcb6=_0x1a0039;return VisuMZ[_0xefdcb6(0xa1e)][_0xefdcb6(0x4ce)]['Enemy'][_0xefdcb6(0x2fd)];},Sprite_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x522)]=function(){const _0x41a61a=_0x1a0039;return VisuMZ['BattleCore'][_0x41a61a(0x4ce)][_0x41a61a(0x814)][_0x41a61a(0x692)]?this[_0x41a61a(0x414)][_0x41a61a(0x33c)]():SceneManager[_0x41a61a(0x784)][_0x41a61a(0xad4)]&&SceneManager[_0x41a61a(0x784)][_0x41a61a(0xad4)][_0x41a61a(0x6f0)]&&SceneManager[_0x41a61a(0x784)][_0x41a61a(0xad4)]['_enemies']['includes'](this[_0x41a61a(0x414)]);},Sprite_EnemyName[_0x1a0039(0x6d2)]['textWidth']=function(){const _0x8b6b68=_0x1a0039;if(!this[_0x8b6b68(0x414)])return 0x0;if(this[_0x8b6b68(0x822)])return this[_0x8b6b68(0x822)];const _0x24f6e7=this[_0x8b6b68(0x192)]();return this[_0x8b6b68(0xaba)](),this['_cacheTextWidth']=this[_0x8b6b68(0x3bc)][_0x8b6b68(0xb4d)](_0x24f6e7)||0x1,this[_0x8b6b68(0x822)];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x6fc)]=Sprite_Battleback[_0x1a0039(0x6d2)]['adjustPosition'],Sprite_Battleback[_0x1a0039(0x6d2)][_0x1a0039(0x5aa)]=function(){const _0x3a836a=_0x1a0039,_0x5be761=VisuMZ['BattleCore'][_0x3a836a(0x4ce)][_0x3a836a(0x43e)];if(!_0x5be761)return VisuMZ[_0x3a836a(0xa1e)][_0x3a836a(0x6fc)]['call'](this);const _0x1e08dc=String(_0x5be761[_0x3a836a(0x17b)])||'MZ';switch(_0x1e08dc){case'MZ':VisuMZ[_0x3a836a(0xa1e)][_0x3a836a(0x6fc)][_0x3a836a(0xb33)](this);break;case _0x3a836a(0x9a4):this[_0x3a836a(0xafe)]();break;case _0x3a836a(0x5ff):this[_0x3a836a(0xab9)]();break;case'ScaleDown':this[_0x3a836a(0xbe8)]();break;case _0x3a836a(0x545):this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback[_0x1a0039(0x6d2)]['adjustPosition_1for1']=function(){const _0x190df9=_0x1a0039;this[_0x190df9(0x926)]=Graphics['width'],this['height']=Graphics['height'];const _0x4f305a=0x1;this[_0x190df9(0x511)]['x']=_0x4f305a,this[_0x190df9(0x511)]['y']=_0x4f305a,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype']['adjustPosition_ScaleToFit']=function(){const _0x102f55=_0x1a0039;this[_0x102f55(0x926)]=Graphics[_0x102f55(0x926)],this[_0x102f55(0x84d)]=Graphics[_0x102f55(0x84d)];const _0x281f2e=this['width']/this[_0x102f55(0x3bc)][_0x102f55(0x926)],_0x5b7dd1=this[_0x102f55(0x84d)]/this['bitmap'][_0x102f55(0x84d)],_0x2abd23=Math[_0x102f55(0x8ae)](_0x281f2e,_0x5b7dd1);this[_0x102f55(0x511)]['x']=_0x2abd23,this[_0x102f55(0x511)]['y']=_0x2abd23,this['x']=(Graphics[_0x102f55(0x926)]-this[_0x102f55(0x926)])/0x2,this['y']=Graphics[_0x102f55(0x84d)]-this[_0x102f55(0x84d)];},Sprite_Battleback[_0x1a0039(0x6d2)]['adjustPosition_ScaleDown']=function(){const _0x4220af=_0x1a0039;this[_0x4220af(0x926)]=Graphics[_0x4220af(0x926)],this[_0x4220af(0x84d)]=Graphics['height'];const _0x6f82e7=Math[_0x4220af(0x409)](0x1,this['width']/this['bitmap'][_0x4220af(0x926)]),_0x402837=Math[_0x4220af(0x409)](0x1,this[_0x4220af(0x84d)]/this[_0x4220af(0x3bc)][_0x4220af(0x84d)]),_0x419df3=Math[_0x4220af(0x8ae)](_0x6f82e7,_0x402837);this['scale']['x']=_0x419df3,this['scale']['y']=_0x419df3,this['x']=(Graphics['width']-this[_0x4220af(0x926)])/0x2,this['y']=Graphics[_0x4220af(0x84d)]-this[_0x4220af(0x84d)];},Sprite_Battleback[_0x1a0039(0x6d2)][_0x1a0039(0x88d)]=function(){const _0xb24f0d=_0x1a0039;this[_0xb24f0d(0x926)]=Graphics[_0xb24f0d(0x926)],this['height']=Graphics[_0xb24f0d(0x84d)];const _0x241096=Math['max'](0x1,this[_0xb24f0d(0x926)]/this['bitmap']['width']),_0x50cb2c=Math[_0xb24f0d(0x8ae)](0x1,this[_0xb24f0d(0x84d)]/this[_0xb24f0d(0x3bc)][_0xb24f0d(0x84d)]),_0xc16a7e=Math[_0xb24f0d(0x8ae)](_0x241096,_0x50cb2c);this['scale']['x']=_0xc16a7e,this[_0xb24f0d(0x511)]['y']=_0xc16a7e,this['x']=(Graphics[_0xb24f0d(0x926)]-this[_0xb24f0d(0x926)])/0x2,this['y']=Graphics['height']-this['height'];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x4ce)][_0x1a0039(0x687)][_0x1a0039(0x392)]??!![],Spriteset_Battle['prototype']['isFlipped']=function(){const _0x380a5c=_0x1a0039;if(!$gameSystem[_0x380a5c(0x969)]())return![];return![];},Spriteset_Battle['prototype'][_0x1a0039(0x72a)]=function(){return 0x0;},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x384)]=function(){return 0x0;},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa5e)]=Spriteset_Battle[_0x1a0039(0x6d2)]['createLowerLayer'],Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x26a)]=function(){const _0x4b144b=_0x1a0039;VisuMZ[_0x4b144b(0xa1e)][_0x4b144b(0xa5e)][_0x4b144b(0xb33)](this),this[_0x4b144b(0x368)](),this['createEnemyNames']();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x2e8)]=Spriteset_Battle['prototype']['update'],Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)]=function(){const _0x114537=_0x1a0039;VisuMZ['BattleCore'][_0x114537(0x2e8)][_0x114537(0xb33)](this),this[_0x114537(0x2f6)](),this[_0x114537(0x245)]();},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x368)]=function(){const _0x33158a=_0x1a0039;this['_weather']=new Weather(),this[_0x33158a(0xaac)][_0x33158a(0xb20)](this[_0x33158a(0x4b7)]);},Spriteset_Battle[_0x1a0039(0x6d2)]['updateWeather']=function(){const _0x58d4b0=_0x1a0039;this[_0x58d4b0(0x4b7)][_0x58d4b0(0x27b)]=$gameScreen[_0x58d4b0(0x7a8)](),this[_0x58d4b0(0x4b7)][_0x58d4b0(0x311)]=$gameScreen[_0x58d4b0(0x418)]();},Game_Interpreter[_0x1a0039(0x6d2)][_0x1a0039(0x90e)]=function(_0x40f13c){const _0xdd88e8=_0x1a0039;$gameScreen['changeWeather'](_0x40f13c[0x0],_0x40f13c[0x1],_0x40f13c[0x2]);if(_0x40f13c[0x3])this[_0xdd88e8(0x730)](_0x40f13c[0x2]);return!![];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x12d)]=Game_Interpreter['prototype'][_0x1a0039(0x9a7)],Game_Interpreter['prototype']['command283']=function(_0x22e787){const _0x1cc015=_0x1a0039;if(SceneManager['isSceneBattle']())return SceneManager['_scene'][_0x1cc015(0x942)]['changeBattlebacks'](_0x22e787[0x0],_0x22e787[0x1]),!![];else{if('xeYBL'!==_0x1cc015(0x64e))return VisuMZ[_0x1cc015(0xa1e)]['Game_Interpreter_command283'][_0x1cc015(0xb33)](this,_0x22e787);else _0x508e3f+=_0x59d22e[_0x1cc015(0x814)]['OffsetX']||0x0,_0x165b87+=_0x4d03b3['Enemy'][_0x1cc015(0x5f2)]||0x0;}},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x488)]=function(_0x116098,_0x1cc319){const _0x2879f0=_0x1a0039;_0x116098[_0x2879f0(0x3bc)]=_0x1cc319;},Spriteset_Battle[_0x1a0039(0x6d2)]['changeBattlebacks']=function(_0x5e9277,_0x2a4896){const _0x50fb9a=_0x1a0039;_0x5e9277=_0x5e9277||'',_0x2a4896=_0x2a4896||'';_0x5e9277===''&&_0x2a4896===''&&('FzDXH'!==_0x50fb9a(0xbcc)?(_0x5e9277=this[_0x50fb9a(0x9d7)][_0x50fb9a(0x2a8)](),_0x2a4896=this['_back2Sprite']['battleback2Name']()):_0x53884e[_0x50fb9a(0x3fc)](_0x50fb9a(0x4c3)));const _0x51d1bf=ImageManager[_0x50fb9a(0xabd)](_0x5e9277),_0x21e9cc=ImageManager[_0x50fb9a(0x82c)](_0x2a4896);_0x51d1bf['addLoadListener'](this[_0x50fb9a(0x916)][_0x50fb9a(0x940)](this,this['_back1Sprite'],this[_0x50fb9a(0x27c)],_0x51d1bf,_0x21e9cc));},Spriteset_Battle['prototype'][_0x1a0039(0x916)]=function(_0x32fa84,_0x20fe32,_0x2be2e0,_0x5bebdd){const _0x4db318=_0x1a0039;_0x5bebdd['addLoadListener'](this[_0x4db318(0xbac)]['bind'](this,_0x32fa84,_0x20fe32,_0x2be2e0,_0x5bebdd));},Spriteset_Battle[_0x1a0039(0x6d2)]['updateBattlebackBitmap2']=function(_0x429e85,_0x2614b5,_0x132c4e,_0x13a361){const _0x1b01a3=_0x1a0039;_0x429e85['bitmap']=_0x132c4e,_0x2614b5[_0x1b01a3(0x3bc)]=_0x13a361,_0x429e85[_0x1b01a3(0x5aa)](),_0x2614b5[_0x1b01a3(0x5aa)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x75c)]=Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x2bc)],Spriteset_Battle[_0x1a0039(0x6d2)]['createBattleField']=function(){const _0x1a726d=_0x1a0039;VisuMZ[_0x1a726d(0xa1e)][_0x1a726d(0x75c)][_0x1a726d(0xb33)](this),this[_0x1a726d(0x1f1)]();},Spriteset_Battle['prototype'][_0x1a0039(0x1f1)]=function(){const _0x164087=_0x1a0039;this[_0x164087(0x865)](),this[_0x164087(0x950)](),this[_0x164087(0xb84)](),this['createDamageContainer'](),this['adjustFlippedBattlefield']();},Spriteset_Battle['prototype']['createBattleFieldContainer']=function(){const _0x137fe4=_0x1a0039;this[_0x137fe4(0x854)]=new Sprite(),this[_0x137fe4(0xaac)][_0x137fe4(0xb20)](this[_0x137fe4(0x854)]);},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xb84)]=function(){const _0x56db90=_0x1a0039;this[_0x56db90(0x5e9)]=new Sprite();if(Spriteset_Battle[_0x56db90(0x6a7)])this[_0x56db90(0xb20)](this[_0x56db90(0x5e9)]);else{if(_0x56db90(0x776)==='SwWrd')this['_battleField'][_0x56db90(0xb20)](this['_animationContainer']);else{if(!_0x5a2ed5[_0x56db90(0x984)]())return!![];const _0x5682ea=['Scene_Options',_0x56db90(0x4cc)];return _0x5682ea[_0x56db90(0x604)](_0x322a34[_0x56db90(0x192)]);}}},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x88c)]=function(){const _0x242cab=_0x1a0039;this[_0x242cab(0x45f)]=new Sprite(),this[_0x242cab(0x45f)]['x']=this[_0x242cab(0xaac)]['x'],this[_0x242cab(0x45f)]['y']=this['_battleField']['y'],this[_0x242cab(0xb20)](this[_0x242cab(0x45f)]);},Spriteset_Battle['prototype']['adjustFlippedBattlefield']=function(){const _0x46c258=_0x1a0039;if(!this[_0x46c258(0x7b9)]())return;this['_battlerContainer'][_0x46c258(0x511)]['x']=-0x1,this[_0x46c258(0x854)]['x']=this['_battleField']['width'],this[_0x46c258(0xbeb)][_0x46c258(0x511)]['x']=-0x1,this[_0x46c258(0xbeb)]['x']=this['_battleField'][_0x46c258(0x926)],this[_0x46c258(0x5e9)][_0x46c258(0x511)]['x']=-0x1,this[_0x46c258(0x5e9)]['x']=this[_0x46c258(0xaac)]['width'],this[_0x46c258(0x45f)]['scale']['x']=-0x1,this['_damageContainer']['x']=this[_0x46c258(0xaac)]['x']+this['_battleField'][_0x46c258(0x926)];},Spriteset_Battle['prototype'][_0x1a0039(0x5c9)]=function(){const _0x455ae8=_0x1a0039;Imported[_0x455ae8(0x212)]&&this[_0x455ae8(0x2ea)]()&&this['repositionEnemiesByResolution']();const _0x1b4235=$gameTroop[_0x455ae8(0x541)](),_0x31a4ba=[];for(const _0x4961b7 of _0x1b4235){_0x31a4ba[_0x455ae8(0xb15)](new Sprite_Enemy(_0x4961b7));}_0x31a4ba[_0x455ae8(0x8b1)](this[_0x455ae8(0xb4e)][_0x455ae8(0x940)](this));for(const _0x3cf697 of _0x31a4ba){_0x455ae8(0xbe2)!==_0x455ae8(0xbe2)?this['opacity']=this[_0x455ae8(0x4f3)](this[_0x455ae8(0x1f4)],this[_0x455ae8(0x54b)],_0x102eb2,_0x14aa8a,_0x460168):this['_battlerContainer'][_0x455ae8(0xb20)](_0x3cf697);}this[_0x455ae8(0x72c)]=_0x31a4ba;},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x47b)]=function(){const _0x530602=_0x1a0039;this[_0x530602(0x1f9)]=[];for(let _0x529fb4=0x0;_0x529fb4<$gameParty[_0x530602(0x6d9)]();_0x529fb4++){const _0x57ffdb=$gameParty[_0x530602(0x355)]()[_0x529fb4],_0x4530eb=new Sprite_Actor();_0x4530eb[_0x530602(0x9e4)](_0x57ffdb),_0x4530eb[_0x530602(0x39a)](_0x57ffdb),_0x4530eb[_0x530602(0x9fc)](),this[_0x530602(0x1f9)]['push'](_0x4530eb),this[_0x530602(0x854)][_0x530602(0xb20)](_0x4530eb);}},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x2f7)]=function(_0x5c5faa,_0x409e34,_0x594490,_0x551b22){const _0xec27a0=_0x1a0039,_0xefcab=this['isMVAnimation'](_0x409e34),_0x5e8f92=new(_0xefcab?Sprite_AnimationMV:Sprite_Animation)(),_0x1dfeea=this[_0xec27a0(0x27f)](_0x5c5faa);if(this[_0xec27a0(0x993)](_0x5c5faa[0x0])){if('KHmjw'!==_0xec27a0(0x92e)){const _0x53c2f5=this[_0xec27a0(0x8ff)][_0xec27a0(0xb16)](),_0x358b3c=_0x53c2f5[_0xec27a0(0x538)](_0x1c9544=>_0x1ac752[_0xec27a0(0x3c7)](_0x2abc9b)[_0xec27a0(0x604)](_0x1c9544));return _0x358b3c['length']<=0x0;}else _0x594490=!_0x594490;}_0x5e8f92[_0xec27a0(0xbbf)]=_0x5c5faa,_0x5e8f92[_0xec27a0(0x55a)](_0x1dfeea,_0x409e34,_0x594490,_0x551b22),this[_0xec27a0(0x8d1)](_0x5e8f92);},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x8d1)]=function(_0x4386c3){const _0x52c8d2=_0x1a0039;if(this[_0x52c8d2(0x526)](_0x4386c3)){if(_0x52c8d2(0xa64)!==_0x52c8d2(0xa96))this[_0x52c8d2(0x553)]()[_0x52c8d2(0xb20)](_0x4386c3);else return this['evalDamageFormulaBattleCore'](_0x589d55);}else this[_0x52c8d2(0x5e9)][_0x52c8d2(0xb20)](_0x4386c3);this[_0x52c8d2(0x3c8)][_0x52c8d2(0xb15)](_0x4386c3);},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x526)]=function(_0x4cfc21){const _0x33673c=_0x1a0039;if(!_0x4cfc21)return![];if(!_0x4cfc21[_0x33673c(0xaeb)])return![];if(!_0x4cfc21[_0x33673c(0xbbf)][0x0])return![];if(_0x4cfc21['targetObjects'][0x0][_0x33673c(0x261)]&&!_0x4cfc21[_0x33673c(0xbbf)][0x0][_0x33673c(0x261)]())return![];if($gameSystem[_0x33673c(0x969)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x4cfc21[_0x33673c(0x9a0)]===Sprite_Animation){if(_0x4cfc21[_0x33673c(0xaeb)][_0x33673c(0x7b2)]!==0x0)return![];}else{if(_0x4cfc21[_0x33673c(0x9a0)]===Sprite_AnimationMV){if(_0x33673c(0x1ea)!==_0x33673c(0x1ea))_0x2a726f=_0x2b0483[_0x33673c(0x68a)]()[_0x33673c(0x59b)],_0x2d4f3a=_0x3ecb52[_0x33673c(0x68a)]()[_0x33673c(0xab6)];else{if(_0x4cfc21[_0x33673c(0xaeb)]['position']===0x3)return![];}}}return!![];const _0x5e9c3c=Window_BattleStatus[_0x33673c(0x6d2)][_0x33673c(0xa84)]();return['xp',_0x33673c(0x3a9)][_0x33673c(0x7e0)](_0x5e9c3c);},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x553)]=function(){const _0x589c8d=_0x1a0039;if(!SceneManager[_0x589c8d(0x784)])return null;if(!SceneManager[_0x589c8d(0x784)]['_statusWindow'])return null;if(!SceneManager[_0x589c8d(0x784)][_0x589c8d(0xa98)]['_effectsContainer'])return null;return SceneManager['_scene'][_0x589c8d(0xa98)][_0x589c8d(0x928)];},Spriteset_Battle[_0x1a0039(0x6d2)]['removeAnimation']=function(_0x2446c3){const _0x40c71c=_0x1a0039;this[_0x40c71c(0x5a7)](_0x2446c3);for(const _0x37de63 of _0x2446c3[_0x40c71c(0xbbf)]){_0x37de63[_0x40c71c(0x28b)]&&_0x37de63[_0x40c71c(0x28b)]();}_0x2446c3[_0x40c71c(0x2a7)]();},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x5a7)]=function(_0x1ce994){const _0x23dc8c=_0x1a0039;this[_0x23dc8c(0x3c8)][_0x23dc8c(0x5a5)](_0x1ce994),this[_0x23dc8c(0x526)](_0x1ce994)?_0x23dc8c(0x53c)!==_0x23dc8c(0x53c)?_0x3e2ecb-=_0x12a1e0['mainSpriteHeight']()/0x2:this[_0x23dc8c(0x553)]()[_0x23dc8c(0xb6e)](_0x1ce994):this[_0x23dc8c(0x5e9)][_0x23dc8c(0xb6e)](_0x1ce994);},VisuMZ[_0x1a0039(0xa1e)]['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xb90)],Spriteset_Battle[_0x1a0039(0x6d2)]['updateActors']=function(){const _0x500769=_0x1a0039;VisuMZ[_0x500769(0xa1e)][_0x500769(0x5ad)][_0x500769(0xb33)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x819)]=function(){const _0x2a1e1f=_0x1a0039;this['_battlerContainer'][_0x2a1e1f(0x7d3)][_0x2a1e1f(0x8b1)](this['compareBattlerSprites']['bind'](this)),this[_0x2a1e1f(0x4bb)]();},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x820)]=function(_0x547ac9,_0x95181){const _0x2fc50c=_0x1a0039;if(VisuMZ[_0x2fc50c(0xa1e)][_0x2fc50c(0x4ce)][_0x2fc50c(0x429)][_0x2fc50c(0x4c5)]){if(_0x547ac9[_0x2fc50c(0x414)]&&_0x95181[_0x2fc50c(0x414)]){if(_0x547ac9[_0x2fc50c(0x414)][_0x2fc50c(0x261)]()&&_0x95181['_battler'][_0x2fc50c(0x795)]())return _0x2fc50c(0x83a)===_0x2fc50c(0x8dc)?this[_0x2fc50c(0x254)]():0x1;else{if(_0x95181['_battler'][_0x2fc50c(0x261)]()&&_0x547ac9[_0x2fc50c(0x414)][_0x2fc50c(0x795)]())return-0x1;}}}if(_0x547ac9[_0x2fc50c(0x9da)]!==_0x95181[_0x2fc50c(0x9da)]){if(_0x2fc50c(0x3fa)!==_0x2fc50c(0x3fa))this[_0x2fc50c(0x44c)]=![];else return _0x547ac9[_0x2fc50c(0x9da)]-_0x95181[_0x2fc50c(0x9da)];}else return _0x95181[_0x2fc50c(0x50c)]-_0x547ac9[_0x2fc50c(0x50c)];},Spriteset_Battle['prototype'][_0x1a0039(0x4bb)]=function(){const _0x482e8c=_0x1a0039;if(!VisuMZ[_0x482e8c(0xa1e)][_0x482e8c(0x4ce)][_0x482e8c(0x429)][_0x482e8c(0xb83)])return;const _0x4b49d3=BattleManager[_0x482e8c(0xac9)];if(_0x4b49d3){if(_0x4b49d3[_0x482e8c(0x261)]()&&!$gameSystem[_0x482e8c(0x969)]())return;const _0x5e37ab=_0x4b49d3[_0x482e8c(0x68a)]();if(_0x5e37ab&&_0x4b49d3[_0x482e8c(0x261)]())this['_battlerContainer']['addChild'](_0x5e37ab);}},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x27d)]=function(){const _0x154ed9=_0x1a0039;for(const _0xd4d30d of $gameParty[_0x154ed9(0x4d2)]()){if(!_0xd4d30d)continue;if(!_0xd4d30d['battler']())continue;_0xd4d30d[_0x154ed9(0x68a)]()[_0x154ed9(0x594)]=!![],_0xd4d30d[_0x154ed9(0x68a)]()[_0x154ed9(0xbe5)]();}},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x950)]=function(){const _0x1acefe=_0x1a0039;this[_0x1acefe(0xbeb)]=new Sprite(),Spriteset_Battle[_0x1acefe(0x6a7)]?this[_0x1acefe(0xb20)](this[_0x1acefe(0xbeb)]):_0x1acefe(0x13c)!==_0x1acefe(0x13c)?this[_0x1acefe(0x3e0)](...arguments):this['_battleField'][_0x1acefe(0xb20)](this[_0x1acefe(0xbeb)]),SceneManager[_0x1acefe(0x784)][_0x1acefe(0xbeb)]=this[_0x1acefe(0xbeb)];},Spriteset_Battle[_0x1a0039(0x6d2)]['createEnemyNames']=function(){const _0x337477=_0x1a0039;if(VisuMZ[_0x337477(0xa1e)][_0x337477(0x4ce)]['Enemy'][_0x337477(0x3ef)])return;this[_0x337477(0x35a)]=new Sprite(),BattleManager[_0x337477(0xbce)](this[_0x337477(0x35a)]);for(const _0x321fcd of this[_0x337477(0x72c)]){const _0x221195=new Sprite_EnemyName();this[_0x337477(0x35a)][_0x337477(0xb20)](_0x221195),_0x221195[_0x337477(0x248)](_0x321fcd);}},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x2f6)]=function(){const _0x325bf5=_0x1a0039;if(!this[_0x325bf5(0x45f)])return;if(!this[_0x325bf5(0xbeb)])return;const _0x4a32f1=Spriteset_Battle[_0x325bf5(0x6a7)]?this[_0x325bf5(0x45f)]['x']:0x0,_0x3fe1d0=Spriteset_Battle['ANTI_TINT_UI']?this[_0x325bf5(0x45f)]['y']:0x0,_0x36db0d=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['x']:0x0,_0x474375=Imported[_0x325bf5(0x624)]?this[_0x325bf5(0xaac)]['y']:0x0;this[_0x325bf5(0xbeb)]['x']=_0x4a32f1+_0x36db0d,this['_uiContainer']['y']=_0x3fe1d0+_0x474375;},BattleManager[_0x1a0039(0xbce)]=function(_0x894c9d){const _0x1a21d4=_0x1a0039;if(!SceneManager[_0x1a21d4(0x784)][_0x1a21d4(0xbeb)])return;SceneManager[_0x1a21d4(0x784)][_0x1a21d4(0xbeb)][_0x1a21d4(0xb20)](_0x894c9d);},Spriteset_Battle['prototype'][_0x1a0039(0x382)]=function(){return![];},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x7b1)]=function(){const _0x5cfe2b=_0x1a0039;return this[_0x5cfe2b(0x3ff)]()[_0x5cfe2b(0x42d)](_0x49dc2b=>_0x49dc2b['isFloating']());},Spriteset_Battle['prototype'][_0x1a0039(0x236)]=function(){const _0xfad76d=_0x1a0039;return this[_0xfad76d(0x3ff)]()[_0xfad76d(0x42d)](_0x264e29=>_0x264e29['isJumping']());},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0x4b2)]=function(){const _0x37ce60=_0x1a0039;return this['battlerSprites']()[_0x37ce60(0x42d)](_0x50740=>_0x50740[_0x37ce60(0x1c6)]());},Spriteset_Battle['prototype']['isAnyoneSkewing']=function(){const _0x4453b7=_0x1a0039;return this[_0x4453b7(0x3ff)]()[_0x4453b7(0x42d)](_0x4e424e=>_0x4e424e[_0x4453b7(0xa9b)]());},Spriteset_Battle[_0x1a0039(0x6d2)]['isAnyoneSpinning']=function(){const _0x4e05a0=_0x1a0039;return this['battlerSprites']()['some'](_0x30de15=>_0x30de15[_0x4e05a0(0x6c9)]());},Spriteset_Battle[_0x1a0039(0x6d2)][_0x1a0039(0xad6)]=function(){const _0x4ef980=_0x1a0039;return this[_0x4ef980(0x3ff)]()[_0x4ef980(0x42d)](_0x292835=>_0x292835[_0x4ef980(0x356)]());},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x5c8)]=Window_ItemList[_0x1a0039(0x6d2)]['maxCols'],Window_ItemList[_0x1a0039(0x6d2)][_0x1a0039(0x1a6)]=function(){const _0x29d0f1=_0x1a0039;if(SceneManager[_0x29d0f1(0x984)]()){if(SceneManager[_0x29d0f1(0x784)]['battleLayoutStyle']()===_0x29d0f1(0x459)){if(_0x29d0f1(0x306)!==_0x29d0f1(0x3ec))return VisuMZ['BattleCore'][_0x29d0f1(0x4ce)][_0x29d0f1(0x687)][_0x29d0f1(0x5e5)];else _0x2bfb09[_0x29d0f1(0x814)]['SmoothImage']=!![];}else return VisuMZ['BattleCore'][_0x29d0f1(0x4ce)][_0x29d0f1(0x687)]['SkillItemStandardCols'];}else return VisuMZ[_0x29d0f1(0xa1e)][_0x29d0f1(0x5c8)][_0x29d0f1(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x911)]=Window_SkillList[_0x1a0039(0x6d2)]['maxCols'],Window_SkillList[_0x1a0039(0x6d2)]['maxCols']=function(){const _0x15594d=_0x1a0039;return SceneManager[_0x15594d(0x984)]()?SceneManager['_scene'][_0x15594d(0xa84)]()===_0x15594d(0x459)?VisuMZ['BattleCore'][_0x15594d(0x4ce)][_0x15594d(0x687)][_0x15594d(0x5e5)]:VisuMZ[_0x15594d(0xa1e)][_0x15594d(0x4ce)]['BattleLayout']['SkillItemStandardCols']:VisuMZ[_0x15594d(0xa1e)][_0x15594d(0x911)][_0x15594d(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x6ef)]=Window_Options[_0x1a0039(0x6d2)][_0x1a0039(0x300)],Window_Options[_0x1a0039(0x6d2)][_0x1a0039(0x300)]=function(){const _0x18f484=_0x1a0039;VisuMZ[_0x18f484(0xa1e)][_0x18f484(0x6ef)][_0x18f484(0xb33)](this),this[_0x18f484(0xb3f)](),this[_0x18f484(0x954)]();},Window_Options[_0x1a0039(0x6d2)][_0x1a0039(0xb3f)]=function(){const _0x30e697=_0x1a0039;VisuMZ[_0x30e697(0xa1e)][_0x30e697(0x4ce)][_0x30e697(0x4e3)][_0x30e697(0xba1)]&&(this[_0x30e697(0x9cb)](),this[_0x30e697(0x304)]());},Window_Options[_0x1a0039(0x6d2)]['addShowHpGaugeCommand']=function(){const _0x118744=_0x1a0039;if(!VisuMZ['BattleCore'][_0x118744(0x4ce)][_0x118744(0x6eb)][_0x118744(0xb35)])return;const _0x17a1ee=TextManager[_0x118744(0x5b5)],_0x1142aa=_0x118744(0x5b5);this[_0x118744(0x9f7)](_0x17a1ee,_0x1142aa);},Window_Options['prototype'][_0x1a0039(0x9cb)]=function(){const _0x5227be=_0x1a0039,_0x1e6f93=TextManager[_0x5227be(0x857)],_0x222856=_0x5227be(0x8cc);this['addCommand'](_0x1e6f93,_0x222856);},Window_Options[_0x1a0039(0x6d2)][_0x1a0039(0x304)]=function(){const _0x369951=_0x1a0039,_0x37d66d=TextManager[_0x369951(0x59e)],_0xe3d0b1=_0x369951(0x44c);this[_0x369951(0x9f7)](_0x37d66d,_0xe3d0b1);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa7c)]=Window_Options[_0x1a0039(0x6d2)][_0x1a0039(0x609)],Window_Options[_0x1a0039(0x6d2)]['statusText']=function(_0x1072fe){const _0x5ea0a9=_0x1a0039,_0x33a542=this[_0x5ea0a9(0xb17)](_0x1072fe);return _0x33a542===_0x5ea0a9(0x44c)?this[_0x5ea0a9(0x87d)]():VisuMZ[_0x5ea0a9(0xa1e)][_0x5ea0a9(0xa7c)][_0x5ea0a9(0xb33)](this,_0x1072fe);},Window_Options[_0x1a0039(0x6d2)][_0x1a0039(0x87d)]=function(){const _0x46adb3=_0x1a0039,_0x4450bc=VisuMZ[_0x46adb3(0xa1e)][_0x46adb3(0x4ce)][_0x46adb3(0x4e3)],_0x25ed86=this[_0x46adb3(0x4af)](_0x46adb3(0x44c));return _0x25ed86?_0x4450bc[_0x46adb3(0x5b9)]:_0x4450bc[_0x46adb3(0x7a3)];},Window_ShopStatus[_0x1a0039(0x6d2)][_0x1a0039(0x2a4)]=function(){const _0x2c1a22=_0x1a0039,_0x39120a=DataManager[_0x2c1a22(0x296)](this[_0x2c1a22(0x3f6)]),_0x3f1e97=VisuMZ[_0x2c1a22(0x995)][_0x39120a];if(!_0x3f1e97)return this[_0x2c1a22(0x41e)]();const _0x40502c=_0x2c1a22(0x4ab)['format'](this[_0x2c1a22(0x3f6)][_0x2c1a22(0x4e5)]['type']),_0x54d0aa=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2c1a22(0x3f6)][_0x2c1a22(0x4e5)][_0x2c1a22(0x27b)]];return _0x3f1e97[_0x40502c][_0x2c1a22(0x4a8)](_0x54d0aa);},Window_ShopStatus[_0x1a0039(0x6d2)]['getItemDamageAmountTextBattleCore']=function(){const _0x615135=_0x1a0039,_0x114fee=DataManager[_0x615135(0x296)](this['_item']),_0x4f8b89=VisuMZ[_0x615135(0x995)][_0x114fee];if(!_0x4f8b89)return this[_0x615135(0x7bb)]();return _0x4f8b89[_0x615135(0x583)][_0x615135(0xb33)](this);},VisuMZ[_0x1a0039(0xa1e)]['Window_PartyCommand_initialize']=Window_PartyCommand['prototype']['initialize'],Window_PartyCommand['prototype'][_0x1a0039(0x3e0)]=function(_0x3ded28){const _0x560d55=_0x1a0039;VisuMZ[_0x560d55(0xa1e)][_0x560d55(0x324)][_0x560d55(0xb33)](this,_0x3ded28),this[_0x560d55(0x7d9)](_0x3ded28);},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x7d9)]=function(_0x44b65f){const _0x391e8f=_0x1a0039,_0x34b097=new Rectangle(0x0,0x0,_0x44b65f[_0x391e8f(0x926)],_0x44b65f[_0x391e8f(0x84d)]);this[_0x391e8f(0xb10)]=new Window_Base(_0x34b097),this['_commandNameWindow'][_0x391e8f(0x1f4)]=0x0,this[_0x391e8f(0xb20)](this[_0x391e8f(0xb10)]),this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x1a0039(0xb1d)]=function(){const _0x31df16=_0x1a0039;Window_Command['prototype'][_0x31df16(0xb1d)][_0x31df16(0xb33)](this);if(this[_0x31df16(0xb10)])this[_0x31df16(0x615)]();},Window_PartyCommand[_0x1a0039(0x6d2)]['updateCommandNameWindow']=function(){const _0x3e69a1=_0x1a0039,_0x1de95f=this['_commandNameWindow'];_0x1de95f[_0x3e69a1(0x27a)][_0x3e69a1(0xaf1)]();const _0x421990=this['commandStyleCheck'](this[_0x3e69a1(0x589)]());if(_0x421990==='icon'&&this[_0x3e69a1(0xaa2)]()>0x0){const _0x43e8e7=this[_0x3e69a1(0x388)](this[_0x3e69a1(0x589)]());let _0x392b5e=this['commandName'](this[_0x3e69a1(0x589)]());_0x392b5e=_0x392b5e[_0x3e69a1(0x8ef)](/\\I\[(\d+)\]/gi,''),_0x1de95f['resetFontSettings'](),this[_0x3e69a1(0x2f2)](_0x392b5e,_0x43e8e7),this[_0x3e69a1(0x3b6)](_0x392b5e,_0x43e8e7),this[_0x3e69a1(0x53f)](_0x392b5e,_0x43e8e7);}},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x2f2)]=function(_0x5b7b94,_0x14ac5a){},Window_PartyCommand[_0x1a0039(0x6d2)]['commandNameWindowDrawText']=function(_0x2ca3c6,_0x44e0f5){const _0x2c1ab4=_0x1a0039,_0x396ed7=this['_commandNameWindow'];_0x396ed7[_0x2c1ab4(0x743)](_0x2ca3c6,0x0,_0x44e0f5['y'],_0x396ed7[_0x2c1ab4(0x4ed)],_0x2c1ab4(0x36f));},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x53f)]=function(_0x45cbdd,_0x544939){const _0x49c3d5=_0x1a0039,_0x68e2f6=this[_0x49c3d5(0xb10)],_0x4188de=$gameSystem[_0x49c3d5(0x2a3)](),_0x13a42c=_0x544939['x']+Math[_0x49c3d5(0x8bb)](_0x544939[_0x49c3d5(0x926)]/0x2)+_0x4188de;_0x68e2f6['x']=_0x68e2f6[_0x49c3d5(0x926)]/-0x2+_0x13a42c,_0x68e2f6['y']=Math[_0x49c3d5(0x8bb)](_0x544939[_0x49c3d5(0x84d)]/0x2);},Window_PartyCommand[_0x1a0039(0x6d2)]['makeCommandList']=function(){const _0x5ac760=_0x1a0039;this[_0x5ac760(0x9e3)](),this[_0x5ac760(0x134)](),this[_0x5ac760(0xa25)](),this[_0x5ac760(0x415)](),this['addEscapeCommand']();},Window_PartyCommand['prototype']['addFightCommand']=function(){const _0x2314c=_0x1a0039,_0xcc648=this[_0x2314c(0x2ac)](),_0x2dac00=VisuMZ[_0x2314c(0xa1e)][_0x2314c(0x4ce)][_0x2314c(0xa47)][_0x2314c(0x84c)],_0x4c03e3=_0xcc648===_0x2314c(0x144)?TextManager[_0x2314c(0x3f0)]:_0x2314c(0xa82)[_0x2314c(0x4a8)](_0x2dac00,TextManager[_0x2314c(0x3f0)]),_0x4174c6=this[_0x2314c(0xb41)]();this['addCommand'](_0x4c03e3,'fight',_0x4174c6);},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0xb41)]=function(){return!![];},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x134)]=function(){const _0x3bdaca=_0x1a0039;if(!this['isAutoBattleCommandAdded']())return;const _0x1c3c36=this['commandStyle'](),_0x53c988=VisuMZ[_0x3bdaca(0xa1e)][_0x3bdaca(0x4ce)][_0x3bdaca(0xa47)][_0x3bdaca(0x20c)],_0x5035a7=_0x1c3c36===_0x3bdaca(0x144)?TextManager[_0x3bdaca(0x680)]:_0x3bdaca(0xa82)['format'](_0x53c988,TextManager[_0x3bdaca(0x680)]),_0x3cd72f=this[_0x3bdaca(0x9a1)]();this[_0x3bdaca(0x9f7)](_0x5035a7,_0x3bdaca(0x680),_0x3cd72f);},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x327)]=function(){const _0x2aacf9=_0x1a0039;return VisuMZ[_0x2aacf9(0xa1e)]['Settings'][_0x2aacf9(0xa47)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x9a1)]=function(){return!![];},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0xa25)]=function(){},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x415)]=function(){const _0x2f5c8a=_0x1a0039;if(!this['isOptionsCommandAdded']())return;const _0x21f24b=this[_0x2f5c8a(0x2ac)](),_0x5e765b=VisuMZ[_0x2f5c8a(0xa1e)][_0x2f5c8a(0x4ce)][_0x2f5c8a(0xa47)][_0x2f5c8a(0x39d)],_0x4babc2=_0x21f24b===_0x2f5c8a(0x144)?TextManager[_0x2f5c8a(0x28c)]:_0x2f5c8a(0xa82)[_0x2f5c8a(0x4a8)](_0x5e765b,TextManager['options']),_0x262474=this[_0x2f5c8a(0x876)]();this[_0x2f5c8a(0x9f7)](_0x4babc2,_0x2f5c8a(0x28c),_0x262474);},Window_PartyCommand['prototype'][_0x1a0039(0x818)]=function(){const _0x4d61a7=_0x1a0039;return VisuMZ['BattleCore'][_0x4d61a7(0x4ce)][_0x4d61a7(0xa47)][_0x4d61a7(0x127)];},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x876)]=function(){return!![];},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x972)]=function(){const _0x2e1bab=_0x1a0039,_0x1f357c=this[_0x2e1bab(0x2ac)](),_0x1876a4=VisuMZ[_0x2e1bab(0xa1e)][_0x2e1bab(0x4ce)][_0x2e1bab(0xa47)][_0x2e1bab(0xa1f)],_0x46acfe=_0x1f357c===_0x2e1bab(0x144)?TextManager[_0x2e1bab(0x206)]:_0x2e1bab(0xa82)[_0x2e1bab(0x4a8)](_0x1876a4,TextManager[_0x2e1bab(0x206)]),_0x39b751=this[_0x2e1bab(0x8fa)]();this[_0x2e1bab(0x9f7)](_0x46acfe,_0x2e1bab(0x206),_0x39b751);},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x8fa)]=function(){const _0x291897=_0x1a0039;return BattleManager[_0x291897(0x202)]();},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x61e)]=function(){const _0x46a6b3=_0x1a0039;return VisuMZ[_0x46a6b3(0xa1e)][_0x46a6b3(0x4ce)][_0x46a6b3(0xa47)][_0x46a6b3(0x343)];},Window_PartyCommand[_0x1a0039(0x6d2)]['drawItem']=function(_0x3b0469){const _0x236a7e=_0x1a0039,_0x1e6c61=this[_0x236a7e(0x9f9)](_0x3b0469);if(_0x1e6c61===_0x236a7e(0x3ba))this[_0x236a7e(0x990)](_0x3b0469);else _0x1e6c61==='icon'?this[_0x236a7e(0x8af)](_0x3b0469):Window_Command['prototype'][_0x236a7e(0x6ac)][_0x236a7e(0xb33)](this,_0x3b0469);},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x2ac)]=function(){const _0x5edf0c=_0x1a0039;return VisuMZ[_0x5edf0c(0xa1e)][_0x5edf0c(0x4ce)][_0x5edf0c(0xa47)][_0x5edf0c(0x5c6)];},Window_PartyCommand[_0x1a0039(0x6d2)]['commandStyleCheck']=function(_0x2da12b){const _0x5c206d=_0x1a0039;if(_0x2da12b<0x0)return _0x5c206d(0x144);const _0x33494f=this[_0x5c206d(0x2ac)]();if(_0x33494f!=='auto'){if(_0x5c206d(0xb59)!==_0x5c206d(0x6be))return _0x33494f;else _0xb2a082[_0x5c206d(0x3bc)]=_0x2dad2d['loadPicture'](_0x5467f7);}else{if(this[_0x5c206d(0xaa2)]()>0x0){const _0x475205=this[_0x5c206d(0x77d)](_0x2da12b);if(_0x475205[_0x5c206d(0x7f1)](/\\I\[(\d+)\]/i)){const _0x5d6f5d=this[_0x5c206d(0x388)](_0x2da12b),_0x12d0b8=this[_0x5c206d(0x3a4)](_0x475205)[_0x5c206d(0x926)];return _0x12d0b8<=_0x5d6f5d[_0x5c206d(0x926)]?_0x5c206d(0x3ba):'icon';}}}return _0x5c206d(0x144);},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x990)]=function(_0xdc746d){const _0x46e7b6=_0x1a0039,_0x42f468=this[_0x46e7b6(0x388)](_0xdc746d),_0x89ce77=this[_0x46e7b6(0x77d)](_0xdc746d),_0x5e8845=this[_0x46e7b6(0x3a4)](_0x89ce77)[_0x46e7b6(0x926)];this[_0x46e7b6(0x2b2)](this['isCommandEnabled'](_0xdc746d));const _0x540181=this['itemTextAlign']();if(_0x540181===_0x46e7b6(0x283))_0x46e7b6(0x1e0)!==_0x46e7b6(0x9b4)?this[_0x46e7b6(0xbee)](_0x89ce77,_0x42f468['x']+_0x42f468[_0x46e7b6(0x926)]-_0x5e8845,_0x42f468['y'],_0x5e8845):(this['tpbCommandFight'](),this[_0x46e7b6(0x8d6)]());else{if(_0x540181==='center'){if(_0x46e7b6(0x9ac)!==_0x46e7b6(0x8cf)){const _0x2a0792=_0x42f468['x']+Math[_0x46e7b6(0x8bb)]((_0x42f468[_0x46e7b6(0x926)]-_0x5e8845)/0x2);this[_0x46e7b6(0xbee)](_0x89ce77,_0x2a0792,_0x42f468['y'],_0x5e8845);}else _0x5e6fef[_0x46e7b6(0xa1e)][_0x46e7b6(0x825)][_0x46e7b6(0xb33)](this),!this['_battler']&&this[_0x46e7b6(0xa60)]&&(this['_hpGaugeSprite']['visible']=![]);}else this[_0x46e7b6(0xbee)](_0x89ce77,_0x42f468['x'],_0x42f468['y'],_0x5e8845);}},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x8af)]=function(_0x18e5c7){const _0x16f05f=_0x1a0039;this[_0x16f05f(0x77d)](_0x18e5c7)[_0x16f05f(0x7f1)](/\\I\[(\d+)\]/i);const _0x50d6c5=Number(RegExp['$1'])||0x0,_0x3ebad1=this['itemLineRect'](_0x18e5c7),_0x172e5c=_0x3ebad1['x']+Math['floor']((_0x3ebad1[_0x16f05f(0x926)]-ImageManager['iconWidth'])/0x2),_0x148214=_0x3ebad1['y']+(_0x3ebad1[_0x16f05f(0x84d)]-ImageManager[_0x16f05f(0x923)])/0x2;this['drawIcon'](_0x50d6c5,_0x172e5c,_0x148214);},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0x319)]=function(){},Window_PartyCommand['prototype'][_0x1a0039(0x6e2)]=function(){const _0x5c0c29=_0x1a0039;Window_Command[_0x5c0c29(0x6d2)][_0x5c0c29(0x6e2)][_0x5c0c29(0xb33)](this);const _0x367b76=this[_0x5c0c29(0xa84)]();if(_0x367b76===_0x5c0c29(0x459)){if('qhRsr'===_0x5c0c29(0x4dc)){const _0x319d09=this[_0x5c0c29(0x19a)]()['note'];if(_0x319d09[_0x5c0c29(0x7f1)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x319d09[_0x5c0c29(0x7f1)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x46c286(_0x2c1122['$1'])/0x64;else{let _0x171980=_0x4c6961[_0x5c0c29(0xa1e)][_0x5c0c29(0x880)]['call'](this,_0x3b2248);return _0x171980=this[_0x5c0c29(0x64d)][_0x5c0c29(0x97c)]*_0x171980+this['_multipliers'][_0x5c0c29(0x255)],_0x171980;}}}else this[_0x5c0c29(0x539)]();}},Window_PartyCommand[_0x1a0039(0x6d2)][_0x1a0039(0xa84)]=function(){const _0x633a5f=_0x1a0039;if(this['_battleLayoutStyle'])return this[_0x633a5f(0x1d0)];return this[_0x633a5f(0x1d0)]=SceneManager['_scene'][_0x633a5f(0xa84)](),this[_0x633a5f(0x1d0)];},Window_PartyCommand[_0x1a0039(0x6d2)]['updateHelp']=function(){const _0x4c4df6=_0x1a0039,_0x312577=VisuMZ['BattleCore'][_0x4c4df6(0x4ce)][_0x4c4df6(0xa47)],_0x4c8972=this[_0x4c4df6(0xb31)]();switch(_0x4c8972){case _0x4c4df6(0x3f0):this['_helpWindow'][_0x4c4df6(0x5bf)](_0x312577[_0x4c4df6(0x80d)]);break;case _0x4c4df6(0x680):this[_0x4c4df6(0x6e3)][_0x4c4df6(0x5bf)](_0x312577[_0x4c4df6(0x79a)]);break;case _0x4c4df6(0x28c):this['_helpWindow'][_0x4c4df6(0x5bf)](_0x312577[_0x4c4df6(0x9b5)]);break;case _0x4c4df6(0x206):this[_0x4c4df6(0x6e3)][_0x4c4df6(0x5bf)](_0x312577['HelpEscape']);break;default:this[_0x4c4df6(0x6e3)][_0x4c4df6(0x5bf)]('');break;}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xb67)]=Window_ActorCommand[_0x1a0039(0x6d2)]['initialize'],Window_ActorCommand[_0x1a0039(0x6d2)]['initialize']=function(_0x2f360b){const _0x26f858=_0x1a0039;VisuMZ['BattleCore'][_0x26f858(0xb67)]['call'](this,_0x2f360b),this[_0x26f858(0x7d9)](_0x2f360b);},Window_ActorCommand['prototype']['createCommandNameWindow']=function(_0x424a75){const _0xe82251=_0x1a0039,_0x2e6c64=new Rectangle(0x0,0x0,_0x424a75[_0xe82251(0x926)],_0x424a75[_0xe82251(0x84d)]);this[_0xe82251(0xb10)]=new Window_Base(_0x2e6c64),this['_commandNameWindow'][_0xe82251(0x1f4)]=0x0,this['addChild'](this[_0xe82251(0xb10)]),this[_0xe82251(0x615)]();},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0xb1d)]=function(){const _0x5490a5=_0x1a0039;Window_Command[_0x5490a5(0x6d2)][_0x5490a5(0xb1d)][_0x5490a5(0xb33)](this);if(this[_0x5490a5(0xb10)])this[_0x5490a5(0x615)]();},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x615)]=function(){const _0x56d762=_0x1a0039,_0xe37baa=this['_commandNameWindow'];_0xe37baa[_0x56d762(0x27a)][_0x56d762(0xaf1)]();const _0xc60e70=this[_0x56d762(0x9f9)](this[_0x56d762(0x589)]());if(_0xc60e70===_0x56d762(0x4cd)&&this['maxItems']()>0x0){const _0x30e49c=this[_0x56d762(0x388)](this[_0x56d762(0x589)]());let _0x40c746=this[_0x56d762(0x77d)](this[_0x56d762(0x589)]());_0x40c746=_0x40c746[_0x56d762(0x8ef)](/\\I\[(\d+)\]/gi,''),_0xe37baa[_0x56d762(0x423)](),this['commandNameWindowDrawBackground'](_0x40c746,_0x30e49c),this[_0x56d762(0x3b6)](_0x40c746,_0x30e49c),this['commandNameWindowCenter'](_0x40c746,_0x30e49c);}},Window_ActorCommand[_0x1a0039(0x6d2)]['commandNameWindowDrawBackground']=function(_0x46fb80,_0x5a8df9){},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x3b6)]=function(_0x4327d3,_0xee72c4){const _0x5d2bbf=_0x1a0039,_0x30da68=this[_0x5d2bbf(0xb10)];_0x30da68[_0x5d2bbf(0x743)](_0x4327d3,0x0,_0xee72c4['y'],_0x30da68['innerWidth'],_0x5d2bbf(0x36f));},Window_ActorCommand['prototype'][_0x1a0039(0x53f)]=function(_0x2246d5,_0x52565c){const _0x4859f4=_0x1a0039,_0x29d19a=this[_0x4859f4(0xb10)],_0x7ed27f=$gameSystem[_0x4859f4(0x2a3)](),_0x2288ed=_0x52565c['x']+Math[_0x4859f4(0x8bb)](_0x52565c[_0x4859f4(0x926)]/0x2)+_0x7ed27f;_0x29d19a['x']=_0x29d19a[_0x4859f4(0x926)]/-0x2+_0x2288ed,_0x29d19a['y']=Math[_0x4859f4(0x8bb)](_0x52565c[_0x4859f4(0x84d)]/0x2);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x952)]=function(){const _0x2845a5=_0x1a0039;if(!this[_0x2845a5(0x8ff)])return;const _0x4f2964=this[_0x2845a5(0x8ff)]['battleCommands']();for(const _0x951d51 of _0x4f2964){this['makeBattleCommand'](_0x951d51[_0x2845a5(0x8b6)]()[_0x2845a5(0x850)]());}},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0xb00)]=function(_0x161075){const _0x343dd3=_0x1a0039;if(_0x161075===_0x343dd3(0x1f3)){if(_0x343dd3(0x4fc)!==_0x343dd3(0x373))this[_0x343dd3(0x410)]();else{if(!_0x5ace6d[_0x343dd3(0xa1e)][_0x343dd3(0x4ce)][_0x343dd3(0x636)][_0x343dd3(0x9ab)])return;_0x288363[_0x343dd3(0xa1e)][_0x343dd3(0xb0d)][_0x343dd3(0xb33)](this,_0xffe60f);}}[_0x343dd3(0x632),_0x343dd3(0x7b8)]['includes'](_0x161075)&&this[_0x343dd3(0x5c3)]();_0x161075===_0x343dd3(0x685)&&(_0x343dd3(0x69f)===_0x343dd3(0x442)?(!_0x23a5d[_0x343dd3(0x355)]()[_0x343dd3(0x604)](this['_tpbSceneChangeCacheActor'])&&(this['_tpbSceneChangeCacheActor']=null),this[_0x343dd3(0x61c)]?(this[_0x343dd3(0x87f)]=this[_0x343dd3(0x61c)],this[_0x343dd3(0x87f)]['_tpbState']=_0x343dd3(0x987),this[_0x343dd3(0x47a)]=!![],this[_0x343dd3(0x61c)]=null):(this[_0x343dd3(0x8ab)](),this[_0x343dd3(0x87f)]=null,this[_0x343dd3(0x47a)]=![])):this[_0x343dd3(0xa27)]());_0x161075===_0x343dd3(0x339)&&(_0x343dd3(0x4fe)!==_0x343dd3(0x4fe)?this['push']('clearActiveWeaponSet',_0x419d73):this[_0x343dd3(0x5c1)]());if(_0x161075===_0x343dd3(0xa43)){if('LyQIs'===_0x343dd3(0x9a3))this[_0x343dd3(0x972)]();else{let _0x4958f7='';if(_0x3a96d2['includes'](_0x1c8f5b))_0x4958f7='Actor-%1-%2'['format'](_0x37a483['id'],_0x208993);if(_0xad0711[_0x343dd3(0x604)](_0x1f5eff))_0x4958f7='Class-%1-%2'[_0x343dd3(0x4a8)](_0x26fab4['id'],_0x3bf12a);if(_0x14c115[_0x343dd3(0x604)](_0xb6a74b))_0x4958f7=_0x343dd3(0xa5f)[_0x343dd3(0x4a8)](_0x5a41a9['id'],_0x55337a);if(_0x548b1a['includes'](_0x199c90))_0x4958f7=_0x343dd3(0xb1a)[_0x343dd3(0x4a8)](_0x3812da['id'],_0x1962e0);if(_0x21b856['includes'](_0x41329e))_0x4958f7=_0x343dd3(0x8c3)[_0x343dd3(0x4a8)](_0x198b49['id'],_0x4c65fc);if(_0x29348e[_0x343dd3(0x604)](_0x470e64))_0x4958f7='Armor-%1-%2'['format'](_0x17fa7c['id'],_0x2de460);if(_0x4654a8[_0x343dd3(0x604)](_0x2c19e2))_0x4958f7=_0x343dd3(0x4e9)['format'](_0x312d57['id'],_0x2e9b04);if(_0x20c528[_0x343dd3(0x604)](_0x3afb52))_0x4958f7=_0x343dd3(0x52a)['format'](_0x579238['id'],_0x4f8243);return _0x4958f7;}}if(_0x161075===_0x343dd3(0x3da)){if('xdwyo'!==_0x343dd3(0x364)){if(!_0x38c899[_0x343dd3(0x969)]())return![];return![];}else this[_0x343dd3(0x134)]();}if(_0x161075[_0x343dd3(0x7f1)](/STYPE: (\d+)/i)){const _0x36c583=Number(RegExp['$1']);this[_0x343dd3(0x7af)](_0x36c583);}else{if(_0x161075[_0x343dd3(0x7f1)](/STYPE: (.*)/i)){const _0x54c4c4=DataManager[_0x343dd3(0x8a6)](RegExp['$1']);this[_0x343dd3(0x7af)](_0x54c4c4);}}_0x161075==='ALL\x20SKILLS'&&this[_0x343dd3(0x6ed)]();if(_0x161075[_0x343dd3(0x7f1)](/SKILL: (\d+)/i)){if(_0x343dd3(0x53b)!==_0x343dd3(0x53b))_0xcaf880[_0x343dd3(0xb15)](_0x343dd3(0x372),_0x143c8a);else{const _0x30dde8=Number(RegExp['$1']);this[_0x343dd3(0xb0c)]($dataSkills[_0x30dde8]);}}else{if(_0x161075[_0x343dd3(0x7f1)](/SKILL: (.*)/i)){if(_0x343dd3(0x26e)!==_0x343dd3(0x26e)){if(!_0x15d318[_0x343dd3(0x984)]())return;if(!_0x207d5a['VisuMZ_1_ElementStatusCore'])return;_0x53335b[_0x343dd3(0x44a)](_0x22b160,_0x51d0fa);const _0x264770=_0x3d6801['_action'],_0x4e43a6=_0x1a6279[_0x343dd3(0x759)];if(!_0x264770)return;_0x264770[_0x343dd3(0x159)]=_0x4e43a6;}else{const _0x402ee8=DataManager[_0x343dd3(0x22b)](RegExp['$1']);this[_0x343dd3(0xb0c)]($dataSkills[_0x402ee8]);}}}_0x161075==='PARTY'&&Imported[_0x343dd3(0x924)]&&this[_0x343dd3(0x2cb)](),[_0x343dd3(0xae3),'COMBAT\x20LOG'][_0x343dd3(0x604)](_0x161075)&&Imported[_0x343dd3(0x259)]&&this['addCombatLogCommand'](),_0x161075===_0x343dd3(0x256)&&Imported[_0x343dd3(0xbbb)]&&this['addWeaponSwapCommand'](!![]);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x410)]=function(){const _0x44889d=_0x1a0039,_0x34473d=$dataSkills[this[_0x44889d(0x8ff)][_0x44889d(0x867)]()];if(!_0x34473d)return;if(!this[_0x44889d(0x3c2)](_0x34473d))return;const _0x1c2677=this[_0x44889d(0x2ac)](),_0x2c471b=DataManager[_0x44889d(0x8d0)](_0x34473d),_0x4601f4=DataManager[_0x44889d(0x981)](_0x34473d),_0x552468=_0x1c2677===_0x44889d(0x144)?_0x2c471b:'\x5cI[%1]%2'[_0x44889d(0x4a8)](_0x4601f4,_0x2c471b);this['addCommand'](_0x552468,'attack',this[_0x44889d(0x8ff)][_0x44889d(0x249)]());},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0xa27)]=function(){const _0x2b12a2=_0x1a0039,_0x1916c4=$dataSkills[this[_0x2b12a2(0x8ff)][_0x2b12a2(0x25d)]()];if(!_0x1916c4)return;if(!this[_0x2b12a2(0x3c2)](_0x1916c4))return;const _0x71c079=this[_0x2b12a2(0x2ac)](),_0x1e8d05=DataManager[_0x2b12a2(0x8d0)](_0x1916c4),_0x304403=DataManager[_0x2b12a2(0x981)](_0x1916c4),_0x119eaf=_0x71c079===_0x2b12a2(0x144)?_0x1e8d05:_0x2b12a2(0xa82)[_0x2b12a2(0x4a8)](_0x304403,_0x1e8d05);this[_0x2b12a2(0x9f7)](_0x119eaf,_0x2b12a2(0xb95),this[_0x2b12a2(0x8ff)]['canGuard']());},Window_ActorCommand[_0x1a0039(0x6d2)]['addItemCommand']=function(){const _0x145e2a=_0x1a0039,_0x5e78ce=this['commandStyle'](),_0x2f09a8=VisuMZ[_0x145e2a(0xa1e)][_0x145e2a(0x4ce)]['ActorCmd'][_0x145e2a(0x270)],_0xb5b5fd=_0x5e78ce===_0x145e2a(0x144)?TextManager[_0x145e2a(0x19a)]:_0x145e2a(0xa82)[_0x145e2a(0x4a8)](_0x2f09a8,TextManager[_0x145e2a(0x19a)]),_0xda82e2=this[_0x145e2a(0xa55)]();this[_0x145e2a(0x9f7)](_0xb5b5fd,_0x145e2a(0x19a),_0xda82e2);},Window_ActorCommand[_0x1a0039(0x6d2)]['isItemCommandEnabled']=function(){const _0x2d5a3e=_0x1a0039;return this[_0x2d5a3e(0x8ff)]&&this['_actor'][_0x2d5a3e(0x988)]();},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x5c3)]=function(){const _0x1130a0=_0x1a0039,_0x398736=this[_0x1130a0(0x8ff)][_0x1130a0(0xb16)]();for(const _0x360958 of _0x398736){this[_0x1130a0(0x7af)](_0x360958);}},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x7af)]=function(_0xaec5df){const _0x2e95de=_0x1a0039;let _0x26b211=$dataSystem['skillTypes'][_0xaec5df];if(!_0x26b211)return;let _0x5b33ab=_0x26b211;const _0x262a84=this[_0x2e95de(0x2ac)]();if(_0x262a84===_0x2e95de(0x144)){if(_0x2e95de(0xb24)==='fZHqL'){const _0x325eb1=this['commandStyleCheck'](_0x51a1b6);if(_0x325eb1===_0x2e95de(0x3ba))this[_0x2e95de(0x990)](_0x410c9d);else _0x325eb1===_0x2e95de(0x4cd)?this[_0x2e95de(0x8af)](_0x41b431):_0x4eae1a[_0x2e95de(0x6d2)][_0x2e95de(0x6ac)][_0x2e95de(0xb33)](this,_0x47f333);this[_0x2e95de(0x44f)](_0x17cecd);}else _0x5b33ab=_0x5b33ab[_0x2e95de(0x8ef)](/\x1I\[(\d+)\]/gi,''),_0x5b33ab=_0x5b33ab[_0x2e95de(0x8ef)](/\\I\[(\d+)\]/gi,'');}else{if(!_0x26b211[_0x2e95de(0x7f1)](/\\I\[(\d+)\]/i)){if('Tfdqx'===_0x2e95de(0x90c))return _0x41d734[_0x2e95de(0xbdf)]()[_0x2e95de(0x4d2)]()[_0x2e95de(0x538)](_0x331530=>_0x331530!==_0x5c42e6);else{const _0x580d32=Imported[_0x2e95de(0x97a)]?VisuMZ[_0x2e95de(0x75e)][_0x2e95de(0x4ce)][_0x2e95de(0x3d2)]:VisuMZ[_0x2e95de(0xa1e)][_0x2e95de(0x4ce)][_0x2e95de(0xa15)],_0x487b7f=$dataSystem[_0x2e95de(0x652)][_0x2e95de(0x604)](_0xaec5df),_0x292bcb=_0x487b7f?_0x580d32[_0x2e95de(0x5d9)]:_0x580d32['IconStypeNorm'];_0x5b33ab='\x5cI[%1]%2'['format'](_0x292bcb,_0x26b211);}}}this[_0x2e95de(0x9f7)](_0x5b33ab,_0x2e95de(0xa6e),!![],_0xaec5df);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x6ed)]=function(){const _0x48dea6=_0x1a0039,_0x44db69=this[_0x48dea6(0x8ff)][_0x48dea6(0xb16)](),_0x310ee5=this['_actor'][_0x48dea6(0x540)]();for(const _0x203b54 of _0x310ee5){if(!_0x203b54)continue;if(Imported[_0x48dea6(0x97a)]){if(this[_0x48dea6(0x7e6)](_0x203b54))continue;if(this[_0x48dea6(0x996)](_0x203b54))continue;}else{if(!_0x44db69['includes'](_0x203b54[_0x48dea6(0x358)]))continue;}this['addSingleSkillCommand'](_0x203b54);}},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x7e6)]=function(_0x1f3d0b){const _0x362b05=_0x1a0039,_0x1703a2=this[_0x362b05(0x8ff)]['skillTypes'](),_0x19cc24=_0x1703a2[_0x362b05(0x538)](_0x529cbb=>DataManager[_0x362b05(0x3c7)](_0x1f3d0b)['includes'](_0x529cbb));return _0x19cc24[_0x362b05(0x2c0)]<=0x0;},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x996)]=function(_0x71bbb9){const _0x12e3e4=_0x1a0039;if(!Window_SkillList[_0x12e3e4(0x6d2)][_0x12e3e4(0x47e)][_0x12e3e4(0xb33)](this,_0x71bbb9))return!![];if(!Window_SkillList[_0x12e3e4(0x6d2)]['checkShowHideSwitchNotetags'][_0x12e3e4(0xb33)](this,_0x71bbb9))return!![];if(!Window_SkillList['prototype'][_0x12e3e4(0x3e1)][_0x12e3e4(0xb33)](this,_0x71bbb9))return!![];return![];},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0xb0c)]=function(_0x1293ae){const _0x5a2a3e=_0x1a0039;if(!_0x1293ae)return;if(!this[_0x5a2a3e(0x3c2)](_0x1293ae))return;const _0xc837c2=this[_0x5a2a3e(0x2ac)](),_0x51eb80=DataManager[_0x5a2a3e(0x8d0)](_0x1293ae),_0x34e731=DataManager[_0x5a2a3e(0x981)](_0x1293ae),_0x5e482b=_0xc837c2===_0x5a2a3e(0x144)?_0x51eb80:'\x5cI[%1]%2'[_0x5a2a3e(0x4a8)](_0x34e731,_0x51eb80),_0x515d45=this[_0x5a2a3e(0x8ff)][_0x5a2a3e(0xb21)](_0x1293ae);this['addCommand'](_0x5e482b,'singleSkill',_0x515d45,_0x1293ae['id']);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x3c2)]=function(_0x40211b){const _0x2e1c8f=_0x1a0039,_0x2981e2=_0x40211b[_0x2e1c8f(0x83c)];if(_0x2981e2[_0x2e1c8f(0x7f1)](/<COMMAND REQUIRE LEARN>/i)){if('cJead'===_0x2e1c8f(0x7e3)){if(!this[_0x2e1c8f(0x8ff)][_0x2e1c8f(0x17c)](_0x40211b['id']))return![];}else{if(!this[_0x2e1c8f(0x414)])return![];if(this['_battler'][_0x2e1c8f(0x261)]())return!![];if(this['_battler'][_0x2e1c8f(0x405)]())return![];if(this[_0x2e1c8f(0x1f4)]<=0x0)return![];const _0x4a1b81=this[_0x2e1c8f(0x414)][_0x2e1c8f(0x91b)]()['note'];if(_0x4a1b81[_0x2e1c8f(0x7f1)](/<SHOW HP GAUGE>/i))return!![];if(_0x4a1b81[_0x2e1c8f(0x7f1)](/<HIDE HP GAUGE>/i))return![];const _0xb9cabf=_0x1cfa6c[_0x2e1c8f(0xa1e)][_0x2e1c8f(0x4ce)][_0x2e1c8f(0x6eb)];if(_0xb9cabf[_0x2e1c8f(0xaf0)]){if(_0xb9cabf[_0x2e1c8f(0x85f)]&&_0xecad03[_0x2e1c8f(0x9fd)]())return!![];if(this[_0x2e1c8f(0x414)]['_visualHpGauge_JustDied'])return![];return this[_0x2e1c8f(0x414)][_0x2e1c8f(0x14a)]();}return!![];}}if(_0x2981e2[_0x2e1c8f(0x7f1)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x2e1c8f(0x8ff)][_0x2e1c8f(0x71f)](_0x40211b['id']))return![];}const _0x284bb8=VisuMZ[_0x2e1c8f(0xa1e)][_0x2e1c8f(0x322)](_0x40211b,_0x2e1c8f(0x3d8));if(VisuMZ[_0x2e1c8f(0xa1e)]['JS'][_0x284bb8]){if(_0x2e1c8f(0x28d)!==_0x2e1c8f(0x4ee)){if(!VisuMZ[_0x2e1c8f(0xa1e)]['JS'][_0x284bb8][_0x2e1c8f(0xb33)](this,this['_actor'],_0x40211b))return![];}else{if(!_0x124d4b[_0x2e1c8f(0x984)]())return;_0x588c46['ConvertParams'](_0x174b05,_0x4d2509);const _0x28f960=_0x420758[_0x2e1c8f(0x572)](),_0x6ac63b=_0x5a8d4e[_0x2e1c8f(0xac9)],_0x2a618e=_0x24dc47[_0x2e1c8f(0x5a9)];if(!_0x28f960)return;if(!_0x6ac63b)return;_0x6ac63b&&_0x6ac63b[_0x2e1c8f(0x93b)]()&&_0x2a618e[_0x2e1c8f(0x8b6)]()['trim']()!=='UNTITLED'&&_0x28f960[_0x2e1c8f(0x131)]([_0x2a618e]);}}return VisuMZ[_0x2e1c8f(0xa1e)][_0x2e1c8f(0x8cd)](_0x40211b);},VisuMZ[_0x1a0039(0xa1e)]['CheckSkillCommandShowSwitches']=function(_0x50ff31){const _0x25ab4e=_0x1a0039,_0xe583=_0x50ff31[_0x25ab4e(0x83c)];if(_0xe583[_0x25ab4e(0x7f1)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x175217=JSON['parse']('['+RegExp['$1'][_0x25ab4e(0x7f1)](/\d+/g)+']');for(const _0x41171b of _0x175217){if(!$gameSwitches[_0x25ab4e(0xa71)](_0x41171b))return![];}return!![];}if(_0xe583[_0x25ab4e(0x7f1)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('VTfim'!==_0x25ab4e(0x6bf)){const _0x67619b=JSON[_0x25ab4e(0xb47)]('['+RegExp['$1'][_0x25ab4e(0x7f1)](/\d+/g)+']');for(const _0xbacdc9 of _0x67619b){if(!$gameSwitches[_0x25ab4e(0xa71)](_0xbacdc9))return![];}return!![];}else this[_0x25ab4e(0xb9d)](_0x5959ba,_0x1a63a0,_0x43879f);}if(_0xe583['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1067ac=JSON[_0x25ab4e(0xb47)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5c34b3 of _0x1067ac){if($gameSwitches[_0x25ab4e(0xa71)](_0x5c34b3))return!![];}return![];}if(_0xe583[_0x25ab4e(0x7f1)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x21be93=JSON[_0x25ab4e(0xb47)]('['+RegExp['$1'][_0x25ab4e(0x7f1)](/\d+/g)+']');for(const _0x4238d2 of _0x21be93){if(_0x25ab4e(0x9b9)!==_0x25ab4e(0x9b9)){const _0x45ff85=this['getAttackWeaponAnimationId']();this[_0x25ab4e(0x53d)](_0x45ff85);}else{if(!$gameSwitches[_0x25ab4e(0xa71)](_0x4238d2))return!![];}}return![];}if(_0xe583[_0x25ab4e(0x7f1)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4d3609=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5da731 of _0x4d3609){if(_0x25ab4e(0x190)!==_0x25ab4e(0x190)){if(this['_battleLayoutStyle'])return this[_0x25ab4e(0x1d0)];return this[_0x25ab4e(0x1d0)]=_0x36b7e1['_scene'][_0x25ab4e(0xa84)](),this['_battleLayoutStyle'];}else{if(!$gameSwitches[_0x25ab4e(0xa71)](_0x5da731))return!![];}}return![];}if(_0xe583[_0x25ab4e(0x7f1)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4abb8f=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1a51e8 of _0x4abb8f){if($gameSwitches[_0x25ab4e(0xa71)](_0x1a51e8))return![];}return!![];}return!![];},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x972)]=function(){const _0x36d292=_0x1a0039,_0x2fc9d3=this[_0x36d292(0x2ac)](),_0x3bbd4b=VisuMZ['BattleCore'][_0x36d292(0x4ce)]['PartyCmd'][_0x36d292(0xa1f)],_0x2f11f5=_0x2fc9d3===_0x36d292(0x144)?TextManager[_0x36d292(0x206)]:_0x36d292(0xa82)[_0x36d292(0x4a8)](_0x3bbd4b,TextManager[_0x36d292(0x206)]),_0x27a90d=this[_0x36d292(0x8fa)]();this['addCommand'](_0x2f11f5,_0x36d292(0x206),_0x27a90d);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x8fa)]=function(){const _0x2d2f05=_0x1a0039;return BattleManager[_0x2d2f05(0x202)]();},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x134)]=function(){const _0x2df612=_0x1a0039,_0x5e6e3b=this[_0x2df612(0x2ac)](),_0x1af953=VisuMZ[_0x2df612(0xa1e)][_0x2df612(0x4ce)][_0x2df612(0xa47)][_0x2df612(0x20c)],_0x16de8b=_0x5e6e3b===_0x2df612(0x144)?TextManager[_0x2df612(0x680)]:'\x5cI[%1]%2'[_0x2df612(0x4a8)](_0x1af953,TextManager[_0x2df612(0x680)]),_0x270923=this[_0x2df612(0x9a1)]();this[_0x2df612(0x9f7)](_0x16de8b,'autoBattle',_0x270923);},Window_ActorCommand['prototype'][_0x1a0039(0x9a1)]=function(){return!![];},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x61e)]=function(){const _0x10a654=_0x1a0039;return VisuMZ[_0x10a654(0xa1e)][_0x10a654(0x4ce)][_0x10a654(0xa15)][_0x10a654(0x343)];},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x6ac)]=function(_0x27e5ae){const _0x455242=_0x1a0039,_0x173624=this[_0x455242(0x9f9)](_0x27e5ae);if(_0x173624===_0x455242(0x3ba)){if(_0x455242(0x4ea)==='vzjlm')this[_0x455242(0x990)](_0x27e5ae);else return this[_0x455242(0x414)][_0x455242(0x33c)]();}else{if(_0x173624===_0x455242(0x4cd))this['drawItemStyleIcon'](_0x27e5ae);else{if('SGaHx'!=='ldGyE')Window_Command[_0x455242(0x6d2)][_0x455242(0x6ac)]['call'](this,_0x27e5ae);else{const _0x26d76c=this[_0x455242(0xa04)];_0x26d76c&&(_0x26d76c[_0x455242(0x511)]['x']=this[_0x455242(0x2a9)](),_0x26d76c['scale']['y']=this[_0x455242(0x5cd)]());}}}this[_0x455242(0x44f)](_0x27e5ae);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x2ac)]=function(){const _0x2e07d8=_0x1a0039;return VisuMZ['BattleCore'][_0x2e07d8(0x4ce)][_0x2e07d8(0xa15)][_0x2e07d8(0x5c6)];},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x9f9)]=function(_0x589c3b){const _0x3641b4=_0x1a0039;if(_0x589c3b<0x0)return'text';const _0x486e3a=this[_0x3641b4(0x2ac)]();if(_0x486e3a!==_0x3641b4(0xa77)){if(_0x3641b4(0x292)!==_0x3641b4(0x292)){const _0x49538e=_0x18ac96[_0x3641b4(0x5ee)](_0x13fac1);_0x49538e[_0x3641b4(0x91f)]=![],_0x49538e[_0x3641b4(0x1dd)]=0x0,this[_0x3641b4(0x2ae)][_0x3641b4(0xb15)](_0x49538e);}else return _0x486e3a;}else{if(this[_0x3641b4(0xaa2)]()>0x0){const _0x34fced=this[_0x3641b4(0x77d)](_0x589c3b);if(_0x34fced['match'](/\\I\[(\d+)\]/i)){if(_0x3641b4(0x6e8)===_0x3641b4(0x817)){if(_0x5d7f9b['value'](_0x13d7a6))return!![];}else{const _0x43d1fd=this['itemLineRect'](_0x589c3b),_0x3a76a7=this[_0x3641b4(0x3a4)](_0x34fced)[_0x3641b4(0x926)];if(_0x3a76a7<=_0x43d1fd[_0x3641b4(0x926)])return _0x3641b4(0x3ba);else{if(_0x3641b4(0xa63)===_0x3641b4(0x5e2)){const _0x4e3dbd=_0x1cf51e[_0x3641b4(0x83c)];if(_0x4e3dbd['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x103412(_0x201213['$1'])*0.01;else{if(_0x4e3dbd[_0x3641b4(0x7f1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x47a549(_0x280b0d['$1'])||0x0;}}else return _0x3641b4(0x4cd);}}}}}return _0x3641b4(0x144);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x990)]=function(_0x27bbb8){const _0x194147=_0x1a0039,_0x18f7bd=this['itemLineRect'](_0x27bbb8),_0x3fac35=this[_0x194147(0x77d)](_0x27bbb8),_0x412aa9=this[_0x194147(0x3a4)](_0x3fac35)[_0x194147(0x926)];this[_0x194147(0x2b2)](this[_0x194147(0x6bd)](_0x27bbb8));const _0x955cf0=this['itemTextAlign']();if(_0x955cf0===_0x194147(0x283))this['drawTextEx'](_0x3fac35,_0x18f7bd['x']+_0x18f7bd[_0x194147(0x926)]-_0x412aa9,_0x18f7bd['y'],_0x412aa9);else{if(_0x955cf0==='center'){if(_0x194147(0x330)!==_0x194147(0x330))this[_0x194147(0x12b)][_0x194147(0x65e)]();else{const _0x425397=_0x18f7bd['x']+Math[_0x194147(0x8bb)]((_0x18f7bd[_0x194147(0x926)]-_0x412aa9)/0x2);this['drawTextEx'](_0x3fac35,_0x425397,_0x18f7bd['y'],_0x412aa9);}}else'yzjlr'!==_0x194147(0x5e1)?_0x4486ee-=_0x34aa5f[_0x194147(0x889)]():this[_0x194147(0xbee)](_0x3fac35,_0x18f7bd['x'],_0x18f7bd['y'],_0x412aa9);}},Window_ActorCommand['prototype'][_0x1a0039(0x8af)]=function(_0x26b59a){const _0x577e02=_0x1a0039;this[_0x577e02(0x77d)](_0x26b59a)['match'](/\\I\[(\d+)\]/i);const _0x40e56c=Number(RegExp['$1'])||0x0,_0x396546=this[_0x577e02(0x388)](_0x26b59a),_0x34a4ec=_0x396546['x']+Math[_0x577e02(0x8bb)]((_0x396546['width']-ImageManager[_0x577e02(0x87b)])/0x2),_0x26a813=_0x396546['y']+(_0x396546[_0x577e02(0x84d)]-ImageManager['iconHeight'])/0x2;this[_0x577e02(0x542)](_0x40e56c,_0x34a4ec,_0x26a813);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x44f)]=function(_0x1015be){const _0x58f678=_0x1a0039;if(!(VisuMZ[_0x58f678(0xa1e)][_0x58f678(0x4ce)][_0x58f678(0xa15)][_0x58f678(0x58d)]??!![]))return;const _0x58b8cf=this[_0x58f678(0xb17)](_0x1015be);if(![_0x58f678(0xac3),_0x58f678(0xb95),_0x58f678(0x1bc)][_0x58f678(0x604)](_0x58b8cf))return;const _0x291c1d=this[_0x58f678(0x388)](_0x1015be);let _0x14a638=null;if(_0x58b8cf===_0x58f678(0xac3))_0x14a638=$dataSkills[this[_0x58f678(0x8ff)][_0x58f678(0x867)]()];else _0x58b8cf===_0x58f678(0xb95)?_0x14a638=$dataSkills[this[_0x58f678(0x8ff)]['guardSkillId']()]:_0x58f678(0x596)==='LLPvq'?_0x14a638=$dataSkills[this[_0x58f678(0x68b)][_0x1015be]['ext']]:this[_0x58f678(0x430)](_0x24c8ea,_0xb69812,_0x472968);this[_0x58f678(0x2e0)](this[_0x58f678(0x8ff)],_0x14a638,_0x291c1d['x'],_0x291c1d['y'],_0x291c1d[_0x58f678(0x926)]);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x2e0)]=function(_0x3f2277,_0x1ec85a,_0xdaa731,_0x555918,_0x8ad7a3){const _0x3f906f=_0x1a0039;if(!_0x1ec85a)return;Imported[_0x3f906f(0x97a)]?Window_Command['prototype'][_0x3f906f(0x2e0)][_0x3f906f(0xb33)](this,_0x3f2277,_0x1ec85a,_0xdaa731,_0x555918,_0x8ad7a3):Window_SkillList['prototype'][_0x3f906f(0x2e0)][_0x3f906f(0xb33)](this,_0x1ec85a,_0xdaa731,_0x555918,_0x8ad7a3);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x319)]=function(){},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x6e2)]=function(){const _0x136761=_0x1a0039;Window_Command[_0x136761(0x6d2)][_0x136761(0x6e2)][_0x136761(0xb33)](this);const _0x468ecc=this[_0x136761(0xa84)]();_0x468ecc===_0x136761(0x459)&&this[_0x136761(0x539)]();},Window_ActorCommand[_0x1a0039(0x6d2)]['battleLayoutStyle']=function(){const _0x27551e=_0x1a0039;if(this[_0x27551e(0x1d0)])return this[_0x27551e(0x1d0)];return this[_0x27551e(0x1d0)]=SceneManager[_0x27551e(0x784)][_0x27551e(0xa84)](),this[_0x27551e(0x1d0)];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa8c)]=Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x55a)],Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x55a)]=function(_0x5657ad){const _0x589cf6=_0x1a0039,_0x116f25=this[_0x589cf6(0xa84)]();if(_0x5657ad&&['xp',_0x589cf6(0x3a9)][_0x589cf6(0x604)](_0x116f25))this['resizeWindowXPStyle'](_0x5657ad);else _0x5657ad&&[_0x589cf6(0x459)][_0x589cf6(0x604)](_0x116f25)&&(this[_0x589cf6(0x331)](_0x5657ad),this['showHelpWindow']());VisuMZ[_0x589cf6(0xa1e)][_0x589cf6(0xa8c)][_0x589cf6(0xb33)](this,_0x5657ad),_0x5657ad&&$gameTroop[_0x589cf6(0x4d2)]()['length']>0x0&&_0x5657ad[_0x589cf6(0x68a)]()&&_0x5657ad[_0x589cf6(0x68a)]()[_0x589cf6(0x9ba)]();},Window_ActorCommand['prototype'][_0x1a0039(0x182)]=function(_0x561132){const _0x48bb6b=_0x1a0039,_0x3d5c62=Math[_0x48bb6b(0x917)](Graphics[_0x48bb6b(0x5d3)]/0x3),_0x5d26d4=Math[_0x48bb6b(0x917)](Graphics['boxWidth']/$gameParty[_0x48bb6b(0x355)]()[_0x48bb6b(0x2c0)]),_0x569123=Math['min'](_0x3d5c62,_0x5d26d4),_0x5ed75d=this[_0x48bb6b(0xb0a)](VisuMZ[_0x48bb6b(0xa1e)]['Settings']['BattleLayout'][_0x48bb6b(0x656)]),_0x26ad81=_0x5d26d4*_0x561132[_0x48bb6b(0x589)]()+(_0x5d26d4-_0x569123)/0x2,_0x55ced8=SceneManager[_0x48bb6b(0x784)]['_statusWindow']['y']-_0x5ed75d;this['move'](_0x26ad81,_0x55ced8,_0x569123,_0x5ed75d),this[_0x48bb6b(0xa54)](),this[_0x48bb6b(0x39f)](0x1);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x331)]=function(_0x58c965){const _0x16ef2b=_0x1a0039,_0x34f75d=SceneManager[_0x16ef2b(0x784)][_0x16ef2b(0x463)]();this[_0x16ef2b(0x56d)](_0x34f75d['x'],_0x34f75d['y'],_0x34f75d[_0x16ef2b(0x926)],_0x34f75d[_0x16ef2b(0x84d)]),this[_0x16ef2b(0xa54)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x1a0039(0x6d2)][_0x1a0039(0x1a7)]=function(){const _0x244dcd=_0x1a0039;if(this[_0x244dcd(0x52b)]){if(_0x244dcd(0x40b)==='tyRPR'){if(_0x493281[_0x244dcd(0xa1e)][_0x244dcd(0x4ce)]['Enemy'][_0x244dcd(0x3ef)])return;this[_0x244dcd(0x35a)]=new _0x5dd27c(),_0x2573c4[_0x244dcd(0xbce)](this[_0x244dcd(0x35a)]);for(const _0x135f5b of this['_enemySprites']){const _0x4b3a67=new _0x6e4670();this['_enemyNameContainer']['addChild'](_0x4b3a67),_0x4b3a67[_0x244dcd(0x248)](_0x135f5b);}}else{const _0x1e3322=this[_0x244dcd(0x52b)][_0x244dcd(0x3bc)],_0x2fbe9b=this[_0x244dcd(0x926)]-0x8,_0x3ef9b7=this[_0x244dcd(0x84d)],_0x2a5de4=this['padding'],_0x4c4d51=ColorManager['dimColor1'](),_0x2a02c1=ColorManager[_0x244dcd(0x146)]();this[_0x244dcd(0x52b)]['x']=0x4,_0x1e3322['resize'](_0x2fbe9b,_0x3ef9b7),_0x1e3322[_0x244dcd(0x3a6)](0x0,0x0,_0x2fbe9b,_0x2a5de4,_0x2a02c1,_0x4c4d51,!![]),_0x1e3322[_0x244dcd(0x39b)](0x0,_0x2a5de4,_0x2fbe9b,_0x3ef9b7-_0x2a5de4*0x2,_0x4c4d51),_0x1e3322[_0x244dcd(0x3a6)](0x0,_0x3ef9b7-_0x2a5de4,_0x2fbe9b,_0x2a5de4,_0x4c4d51,_0x2a02c1,!![]),this[_0x244dcd(0x52b)]['setFrame'](0x0,0x0,_0x2fbe9b,_0x3ef9b7);}}},Window_ActorCommand[_0x1a0039(0x6d2)]['updateHelp']=function(){const _0x277953=_0x1a0039;if(!this['_actor'])return;const _0x464c1f=VisuMZ['BattleCore'][_0x277953(0x4ce)]['ActorCmd'],_0x4e9df9=this[_0x277953(0xb31)]();switch(_0x4e9df9){case _0x277953(0xac3):this['setHelpWindowItem']($dataSkills[this[_0x277953(0x8ff)][_0x277953(0x867)]()]);break;case _0x277953(0xb95):this['setHelpWindowItem']($dataSkills[this['_actor'][_0x277953(0x25d)]()]);break;case _0x277953(0xa6e):const _0x31d780=_0x464c1f[_0x277953(0x9eb)],_0xf337db=_0x31d780[_0x277953(0x4a8)]($dataSystem[_0x277953(0xb16)][this[_0x277953(0xb12)]()]);this[_0x277953(0x6e3)][_0x277953(0x5bf)](_0xf337db);break;case _0x277953(0x1bc):this[_0x277953(0x885)]($dataSkills[this[_0x277953(0xb12)]()]);break;case _0x277953(0x19a):this['_helpWindow'][_0x277953(0x5bf)](_0x464c1f[_0x277953(0x2f9)]);break;case _0x277953(0x206):this[_0x277953(0x6e3)][_0x277953(0x5bf)](_0x464c1f[_0x277953(0x8a4)]);break;case'autoBattle':this[_0x277953(0x6e3)]['setText'](_0x464c1f['HelpAutoBattle']);break;default:this[_0x277953(0x6e3)][_0x277953(0x5bf)]('');break;}},VisuMZ['BattleCore'][_0x1a0039(0x158)]=Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)],Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)]=function(_0x33f5a0){const _0x4b3e46=_0x1a0039;VisuMZ['BattleCore'][_0x4b3e46(0x158)]['call'](this,_0x33f5a0),this[_0x4b3e46(0x2cc)](),this[_0x4b3e46(0x9c8)]();},Window_BattleStatus['prototype'][_0x1a0039(0xa84)]=function(){const _0x1e2216=_0x1a0039;if(this['_battleLayoutStyle'])return this[_0x1e2216(0x1d0)];return this[_0x1e2216(0x1d0)]=SceneManager[_0x1e2216(0x784)][_0x1e2216(0xa84)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x2cc)]=function(){const _0x1a8abe=_0x1a0039;this[_0x1a8abe(0x683)]=this[_0x1a8abe(0x425)]();const _0x4cfe48=VisuMZ[_0x1a8abe(0xa1e)][_0x1a8abe(0x4ce)][_0x1a8abe(0x687)];_0x4cfe48[_0x1a8abe(0xa10)]&&(_0x1a8abe(0x6cc)===_0x1a8abe(0x6cc)?this['opacity']=0x0:this[_0x1a8abe(0xaac)][_0x1a8abe(0xb20)](this[_0x1a8abe(0xbeb)]));},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x425)]=function(){const _0x11801a=_0x1a0039,_0x1d3bfa=VisuMZ[_0x11801a(0xa1e)][_0x11801a(0x4ce)][_0x11801a(0x687)];if(_0x1d3bfa['StatusWindowSkinFilename']){if(_0x11801a(0x4fa)===_0x11801a(0xbe9))_0x23a073=_0x372259[_0x11801a(0xa1e)][_0x11801a(0x456)][_0x11801a(0xb33)](this);else return!![];}const _0xda9fd2=this[_0x11801a(0xa84)]();switch(_0xda9fd2){case _0x11801a(0x71c):case _0x11801a(0x459):return!![];break;case _0x11801a(0x9dc):case'xp':case _0x11801a(0x3a9):default:return![];break;}},Window_BattleStatus['prototype'][_0x1a0039(0x1f2)]=function(){const _0x4c7158=_0x1a0039;return this[_0x4c7158(0x425)]()?_0x4c7158(0x774)==='aBjZH'?0x0:_0x26d311[_0x4c7158(0xbdf)]()[_0x4c7158(0x4d2)]():_0x4c7158(0x7a1)!==_0x4c7158(0x7a1)?0x1:0xa;},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x1a6)]=function(){const _0x3160ca=_0x1a0039,_0x3d1aba=this[_0x3160ca(0xa84)]();switch(_0x3d1aba){case _0x3160ca(0x71c):return 0x1;break;case'xp':case'portrait':return $gameParty[_0x3160ca(0x355)]()[_0x3160ca(0x2c0)];break;case _0x3160ca(0x9dc):default:return $gameParty[_0x3160ca(0x6d9)]();break;}},Window_BattleStatus[_0x1a0039(0x6d2)]['itemHeight']=function(){const _0x3b763d=_0x1a0039,_0xbd3ce1=this[_0x3b763d(0xa84)]();switch(_0xbd3ce1){case _0x3b763d(0x71c):return Window_StatusBase[_0x3b763d(0x6d2)][_0x3b763d(0xa1b)][_0x3b763d(0xb33)](this);break;case'default':case'xp':case _0x3b763d(0x3a9):default:return this[_0x3b763d(0x639)];break;}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0xa2c)]=function(){const _0x491d7d=_0x1a0039,_0x12f180=this[_0x491d7d(0xa84)]();switch(_0x12f180){case _0x491d7d(0x71c):return Window_StatusBase[_0x491d7d(0x6d2)]['rowSpacing'][_0x491d7d(0xb33)](this);break;case _0x491d7d(0x9dc):case'xp':case _0x491d7d(0x3a9):default:return 0x0;break;}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x5be)]=function(){const _0x2526b6=_0x1a0039;if(this[_0x2526b6(0x425)]()){if(_0x2526b6(0x8df)!==_0x2526b6(0xbdb))Window_StatusBase['prototype']['updatePadding'][_0x2526b6(0xb33)](this);else return _0x6e9074(_0x3a1375['$1'])||0x0;}else{if(_0x2526b6(0x4bc)!==_0x2526b6(0xb9e))this[_0x2526b6(0x23b)]=0x8;else{const _0x4ecdec=this['weapons']();_0x2cc24d=_0x4ecdec[_0x376c98]?_0x4ecdec[_0x511bcf][_0x2526b6(0x40e)]:0x0;}}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x1cb)]=function(){const _0x1c077e=_0x1a0039,_0x407b3a=VisuMZ[_0x1c077e(0xa1e)][_0x1c077e(0x4ce)][_0x1c077e(0x687)];if(_0x407b3a[_0x1c077e(0x836)]){if(_0x1c077e(0x6dd)!=='edoHP')this[_0x1c077e(0x370)]=ImageManager[_0x1c077e(0x6de)](_0x407b3a['StatusWindowSkinFilename']);else{if(!_0x51357c['isSceneBattle']())return;_0x23b914[_0x1c077e(0x784)][_0x1c077e(0x275)](this),_0x36c6c3[_0x1c077e(0x6d2)]['terminate'][_0x1c077e(0xb33)](this);}}else Window_StatusBase['prototype'][_0x1c077e(0x1cb)]['call'](this);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x845)]=function(_0x5ba3ff){const _0x5e8f6d=_0x1a0039,_0x5c4a7b=VisuMZ[_0x5e8f6d(0xa1e)][_0x5e8f6d(0x4ce)][_0x5e8f6d(0x687)];if(_0x5c4a7b[_0x5e8f6d(0x659)])return;Window_StatusBase['prototype'][_0x5e8f6d(0x845)][_0x5e8f6d(0xb33)](this,_0x5ba3ff);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0xa51)]=function(){const _0x546984=_0x1a0039;this[_0x546984(0x4a4)]=!![];},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)]=function(){const _0xb79b97=_0x1a0039;Window_StatusBase[_0xb79b97(0x6d2)][_0xb79b97(0x9fc)][_0xb79b97(0xb33)](this),this[_0xb79b97(0xae1)](),this['updateEffectContainers']();if(this[_0xb79b97(0xa84)]()===_0xb79b97(0x459))this[_0xb79b97(0x351)]();},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0xae1)]=function(){const _0x45263f=_0x1a0039;if($gameTemp[_0x45263f(0x2c6)]())this[_0x45263f(0xb8a)](),this[_0x45263f(0x4a4)]=![],$gameTemp[_0x45263f(0x154)]();else{if(this['_requestRefresh']){if(_0x45263f(0xa8d)!==_0x45263f(0xa8d)){if(!_0x290410[_0x45263f(0x969)]())return;this[_0x45263f(0x234)]=_0x3bfd06;const _0x244b92=this[_0x45263f(0x68a)]();if(_0x244b92)_0x244b92[_0x45263f(0x8f6)]();}else this[_0x45263f(0x4a4)]=![],this['refresh'](),this['updateAttachmentSprites']();}}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x65e)]=function(){const _0x6fbdd0=_0x1a0039;Window_StatusBase['prototype'][_0x6fbdd0(0x65e)][_0x6fbdd0(0xb33)](this);if(!$gameSystem[_0x6fbdd0(0x969)]())this[_0x6fbdd0(0x466)]();},Window_BattleStatus['prototype']['hide']=function(){const _0x2be34d=_0x1a0039;if(this[_0x2be34d(0x9a0)]===Window_BattleStatus)return;Window_StatusBase[_0x2be34d(0x6d2)]['hide']['call'](this);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x579)]=function(_0x41d0a7){const _0x38f729=_0x1a0039,_0x26cb26=this[_0x38f729(0xa84)]();switch(_0x26cb26){case'xp':case _0x38f729(0x3a9):break;case'default':case _0x38f729(0x71c):case _0x38f729(0x459):default:return Window_StatusBase[_0x38f729(0x6d2)][_0x38f729(0x579)][_0x38f729(0xb33)](this,_0x41d0a7);break;}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x8c8)]=Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x765)],Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x765)]=function(_0x5189b5){const _0xed602b=_0x1a0039,_0x3c2793=this['battleLayoutStyle']();switch(_0x3c2793){case _0xed602b(0x71c):this[_0xed602b(0x4d6)](_0x5189b5);break;case'xp':this[_0xed602b(0x1ae)](_0x5189b5);break;case _0xed602b(0x3a9):this[_0xed602b(0x2ca)](_0x5189b5);break;case _0xed602b(0x9dc):case _0xed602b(0x459):default:VisuMZ[_0xed602b(0xa1e)][_0xed602b(0x8c8)][_0xed602b(0xb33)](this,_0x5189b5);break;}},Window_BattleStatus[_0x1a0039(0x6d2)]['drawItemStatus']=function(_0xb6504d){const _0x9fe1c3=_0x1a0039,_0x343e0d=this[_0x9fe1c3(0xa84)]();if(!$gameSystem[_0x9fe1c3(0x969)]())this[_0x9fe1c3(0x30b)](_0xb6504d);switch(_0x343e0d){case'list':this[_0x9fe1c3(0x6aa)](_0xb6504d);break;case'xp':case _0x9fe1c3(0x3a9):case'default':case _0x9fe1c3(0x459):default:this['drawItemStatusXPStyle'](_0xb6504d);break;}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0xaf7)]=function(){const _0x4c9b9c=_0x1a0039,_0x415e5b=this[_0x4c9b9c(0xa84)]();if(['xp'][_0x4c9b9c(0x604)](_0x415e5b)&&!$gameSystem[_0x4c9b9c(0x969)]()){this[_0x4c9b9c(0x5a0)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x4c9b9c(0x6d2)][_0x4c9b9c(0xaf7)][_0x4c9b9c(0xb33)](this);},Window_BattleStatus['prototype'][_0x1a0039(0x30b)]=function(_0x2bad8e){const _0x14038f=_0x1a0039,_0x48ccf0=this['actor'](_0x2bad8e)['battler']();if(!_0x48ccf0)return;const _0x55255a=this[_0x14038f(0xa84)](),_0x2cff55=this['itemRect'](_0x2bad8e);let _0x41639f=Math['round'](_0x2cff55['x']+_0x2cff55[_0x14038f(0x926)]/0x2)+this['padding'];['list'][_0x14038f(0x604)](_0x55255a)&&(_0x41639f=_0x2cff55[_0x14038f(0x926)]/$gameParty['battleMembers']()[_0x14038f(0x2c0)],_0x41639f*=_0x2bad8e,_0x41639f+=_0x2cff55[_0x14038f(0x926)]/$gameParty[_0x14038f(0x355)]()[_0x14038f(0x2c0)]/0x2);let _0x359f3b=Math[_0x14038f(0x917)](this['frontviewSpriteY'](_0x2bad8e,_0x48ccf0,_0x2cff55));_0x48ccf0[_0x14038f(0x6ee)](_0x41639f,_0x359f3b),this[_0x14038f(0x5e4)](_0x48ccf0,0x1),_0x48ccf0[_0x14038f(0x65e)](),this[_0x14038f(0xae5)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0xb49)]=function(_0x16b3ea,_0x455660,_0x14f6f3){const _0x5b0ba9=_0x1a0039,_0x1f8361=VisuMZ[_0x5b0ba9(0xa1e)][_0x5b0ba9(0x4ce)][_0x5b0ba9(0x687)],_0x3d4477=this[_0x5b0ba9(0xa84)]();if(_0x3d4477==='xp'){const _0x156ad6=_0x1f8361[_0x5b0ba9(0x555)];switch(_0x156ad6['toLowerCase']()[_0x5b0ba9(0x850)]()){case _0x5b0ba9(0x6b3):return _0x14f6f3[_0x5b0ba9(0x84d)]-_0x455660[_0x5b0ba9(0x757)][_0x5b0ba9(0x84d)]/0x4;break;case'center':const _0x1c7437=_0x1f8361[_0x5b0ba9(0xa44)];return(_0x14f6f3[_0x5b0ba9(0x84d)]+(_0x455660['height']||_0x1c7437))/0x2;break;case _0x5b0ba9(0x1b2):return 0x0;case _0x5b0ba9(0x192):default:return this[_0x5b0ba9(0x65a)](_0x14f6f3);break;}}else{if(_0x3d4477===_0x5b0ba9(0x3a9)){}}return _0x455660[_0x5b0ba9(0x84d)];},Sprite_Name[_0x1a0039(0x6d2)][_0x1a0039(0x921)]=function(){return 0x24;},Sprite_Name[_0x1a0039(0x6d2)][_0x1a0039(0x9fa)]=function(){const _0x336855=_0x1a0039,_0x4a5cb1=this[_0x336855(0x192)](),_0x46a274=this[_0x336855(0x63a)](),_0x5e2b70=this[_0x336855(0x921)]();this[_0x336855(0xaba)](),this[_0x336855(0x3bc)][_0x336855(0xaf1)](),this[_0x336855(0x3bc)]['drawTextTopAligned'](_0x4a5cb1,0x0,0x0,_0x46a274,_0x5e2b70,_0x336855(0x3b7));},Bitmap[_0x1a0039(0x6d2)][_0x1a0039(0x501)]=function(_0x16027d,_0xfdd7a1,_0x3afc7e,_0xd57c8,_0x3b2f03,_0x4d13fe){const _0x1ea65d=_0x1a0039,_0xc569bb=this[_0x1ea65d(0x2c2)],_0x2d5ce7=_0xc569bb[_0x1ea65d(0xaaa)];_0xd57c8=_0xd57c8||0xffffffff;let _0xc86ad9=_0xfdd7a1,_0x163705=Math[_0x1ea65d(0x917)](_0x3afc7e+0x18/0x2+this[_0x1ea65d(0x35b)]*0.35);_0x4d13fe===_0x1ea65d(0x36f)&&(_0xc86ad9+=_0xd57c8/0x2);if(_0x4d13fe===_0x1ea65d(0x283)){if('QzRAl'!==_0x1ea65d(0x627)){_0x3b43d8[_0x1ea65d(0x929)]();let _0x57cf69=_0x29d1f9[_0x1ea65d(0xa1e)][_0x1ea65d(0x4ce)][_0x1ea65d(0x36e)][_0x1ea65d(0x75f)];_0x57cf69>0x0&&(_0x3390fa[_0x1ea65d(0x212)]?_0x1b0c6c[_0x1ea65d(0x778)]([this],_0x57cf69):_0x33a1c8[_0x1ea65d(0x193)]([this],_0x57cf69));}else _0xc86ad9+=_0xd57c8;}_0xc569bb['save'](),_0xc569bb['font']=this['_makeFontNameText'](),_0xc569bb[_0x1ea65d(0x316)]=_0x4d13fe,_0xc569bb[_0x1ea65d(0x5f8)]=_0x1ea65d(0x9e0),_0xc569bb[_0x1ea65d(0xaaa)]=0x1,this['_drawTextOutline'](_0x16027d,_0xc86ad9,_0x163705,_0xd57c8),_0xc569bb[_0x1ea65d(0xaaa)]=_0x2d5ce7,this['_drawTextBody'](_0x16027d,_0xc86ad9,_0x163705,_0xd57c8),_0xc569bb[_0x1ea65d(0xb63)](),this[_0x1ea65d(0x74f)]['update']();},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x65a)]=function(_0x492fcf){return this['basicGaugesY'](_0x492fcf)-this['gaugeLineHeight']();},Window_BattleStatus[_0x1a0039(0x6d2)]['drawItemImageListStyle']=function(_0x50764f){const _0x43f10e=_0x1a0039;if(!VisuMZ['BattleCore'][_0x43f10e(0x4ce)]['BattleLayout'][_0x43f10e(0x5d6)])return;const _0x3efe3f=this['actor'](_0x50764f),_0x3fb43c=this['itemRect'](_0x50764f);_0x3fb43c[_0x43f10e(0x926)]=ImageManager['faceWidth'],_0x3fb43c[_0x43f10e(0x84d)]-=0x2,this['drawActorFace'](_0x3efe3f,_0x3fb43c['x']+0x1,_0x3fb43c['y']+0x1,_0x3fb43c['width'],_0x3fb43c[_0x43f10e(0x84d)]);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x6aa)]=function(_0x5b9a63){const _0x494647=_0x1a0039,_0x4b9c2c=VisuMZ[_0x494647(0xa1e)][_0x494647(0x4ce)][_0x494647(0x687)],_0x1aa3a1=$dataSystem[_0x494647(0x625)]?0x4:0x3,_0x4a20ff=_0x1aa3a1*0x80+(_0x1aa3a1-0x1)*0x8+0x4,_0xfd48b4=this[_0x494647(0xbc6)](_0x5b9a63),_0x3c26d4=this[_0x494647(0xa3a)](_0x5b9a63);let _0x222c7b=_0x3c26d4['x']+this[_0x494647(0x23b)];_0x4b9c2c[_0x494647(0x5d6)]?_0x222c7b=_0x3c26d4['x']+ImageManager[_0x494647(0x365)]+0x8:_0x222c7b+=ImageManager[_0x494647(0x87b)];const _0x2cb1c0=Math[_0x494647(0x917)](Math['min'](_0x3c26d4['x']+_0x3c26d4['width']-_0x4a20ff,_0x222c7b)),_0x975917=Math[_0x494647(0x917)](_0x3c26d4['y']+(_0x3c26d4['height']-Sprite_Name['prototype']['bitmapHeight']())/0x2),_0x2104f7=Math['round'](_0x2cb1c0-ImageManager[_0x494647(0x87b)]/0x2-0x4),_0xb44f78=Math[_0x494647(0x917)](_0x3c26d4['y']+(_0x3c26d4[_0x494647(0x84d)]-ImageManager[_0x494647(0x923)])/0x2+ImageManager['iconHeight']/0x2);let _0xe82df5=_0x2cb1c0+0x88;const _0x2e17e8=_0x975917;this[_0x494647(0xaa7)](_0xfd48b4,_0x2cb1c0-0x4+(_0x4b9c2c[_0x494647(0x650)]||0x0),_0x975917+(_0x4b9c2c[_0x494647(0xb13)]||0x0)),this[_0x494647(0x297)](_0xfd48b4,_0x2cb1c0+(_0x4b9c2c[_0x494647(0x16e)]||0x0),_0x975917+(_0x4b9c2c['NameOffsetY']||0x0)),this[_0x494647(0x9b7)](_0xfd48b4,_0x2104f7+(_0x4b9c2c['StateIconOffsetX']||0x0),_0xb44f78+(_0x4b9c2c[_0x494647(0x273)]||0x0)),this[_0x494647(0x5c4)](_0xfd48b4,'hp',_0xe82df5+0x88*0x0+(_0x4b9c2c[_0x494647(0x507)]||0x0),_0x2e17e8+(_0x4b9c2c[_0x494647(0x1ce)]||0x0)),this['placeGauge'](_0xfd48b4,'mp',_0xe82df5+0x88*0x1+(_0x4b9c2c[_0x494647(0x9de)]||0x0),_0x2e17e8+(_0x4b9c2c[_0x494647(0x9e2)]||0x0));if($dataSystem[_0x494647(0x625)]){if(_0x494647(0x807)!==_0x494647(0x807))return _0x356dab['BattleCore'][_0x494647(0x4ce)][_0x494647(0x636)][_0x494647(0xa97)];else this['placeGauge'](_0xfd48b4,'tp',_0xe82df5+0x88*0x2+(_0x4b9c2c[_0x494647(0x646)]||0x0),_0x2e17e8+(_0x4b9c2c['TpGaugeOffsetY']||0x0));}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x1ae)]=function(_0x2fb24b){const _0x134c1b=_0x1a0039;if(!$gameSystem[_0x134c1b(0x969)]())return;VisuMZ[_0x134c1b(0xa1e)]['Window_BattleStatus_drawItemImage'][_0x134c1b(0xb33)](this,_0x2fb24b);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x5fb)]=function(_0x229def){const _0x14281b=_0x1a0039,_0x47fb27=VisuMZ['BattleCore'][_0x14281b(0x4ce)][_0x14281b(0x687)],_0x4b6fb3=this[_0x14281b(0xbc6)](_0x229def),_0x185417=this[_0x14281b(0xa3a)](_0x229def),_0x59b2c3=Math['round'](_0x185417['x']+(_0x185417['width']-0x80)/0x2),_0x29b294=this[_0x14281b(0x65a)](_0x185417);let _0x411287=_0x59b2c3-ImageManager[_0x14281b(0x87b)]/0x2-0x4,_0x48fcb1=_0x29b294+ImageManager[_0x14281b(0x923)]/0x2;_0x411287-ImageManager[_0x14281b(0x87b)]/0x2<_0x185417['x']&&(_0x411287=_0x59b2c3+ImageManager[_0x14281b(0x87b)]/0x2-0x4,_0x48fcb1=_0x29b294-ImageManager[_0x14281b(0x923)]/0x2);const _0x3c5c1d=_0x59b2c3,_0xe06c91=this[_0x14281b(0xba9)](_0x185417);this[_0x14281b(0xaa7)](_0x4b6fb3,_0x59b2c3+(_0x47fb27[_0x14281b(0x650)]||0x0),_0x29b294+(_0x47fb27['TpbGaugeOffsetY']||0x0)),this[_0x14281b(0x297)](_0x4b6fb3,_0x59b2c3+(_0x47fb27[_0x14281b(0x16e)]||0x0),_0x29b294+(_0x47fb27['NameOffsetY']||0x0)),this[_0x14281b(0x9b7)](_0x4b6fb3,_0x411287+(_0x47fb27[_0x14281b(0xb9f)]||0x0),_0x48fcb1+(_0x47fb27[_0x14281b(0x273)]||0x0)),this[_0x14281b(0x5c4)](_0x4b6fb3,'hp',_0x3c5c1d+(_0x47fb27[_0x14281b(0x507)]||0x0),_0xe06c91+(_0x47fb27[_0x14281b(0x1ce)]||0x0)),this[_0x14281b(0x5c4)](_0x4b6fb3,'mp',_0x3c5c1d+(_0x47fb27[_0x14281b(0x9de)]||0x0),_0xe06c91+this[_0x14281b(0x6fa)]()+(_0x47fb27['MpGaugeOffsetY']||0x0));if($dataSystem['optDisplayTp']){if(_0x14281b(0x45a)!==_0x14281b(0x803))this[_0x14281b(0x5c4)](_0x4b6fb3,'tp',_0x3c5c1d+(_0x47fb27[_0x14281b(0x646)]||0x0),_0xe06c91+this[_0x14281b(0x6fa)]()*0x2+(_0x47fb27[_0x14281b(0x715)]||0x0));else{const _0x1da0de=_0x1ec7ae[_0x14281b(0xa1e)]['Settings'][_0x14281b(0x636)],_0x54601d=_0x18f98d[_0x14281b(0x246)]();if(_0x1da0de[_0x14281b(0x5ba)])this[_0x14281b(0x180)](_0x53cd06,_0x54601d[_0x14281b(0xb2a)],_0x4952c8[_0x14281b(0x51f)]);if(_0x1da0de['ShowAddedDebuff'])this['displayBuffs'](_0x591a08,_0x54601d[_0x14281b(0x1a3)],_0x4cde1b[_0x14281b(0x96f)]);if(_0x1da0de[_0x14281b(0x744)])this['displayBuffs'](_0x43cf11,_0x54601d[_0x14281b(0x6da)],_0x4803f3[_0x14281b(0x357)]);}}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x2b3)]=function(_0x11911f){const _0x51fc7b=_0x1a0039;if(!VisuMZ[_0x51fc7b(0xa1e)][_0x51fc7b(0x4ce)][_0x51fc7b(0x687)][_0x51fc7b(0x1df)])return![];if(_0x11911f[_0x51fc7b(0x4e4)]())return!![];return Imported[_0x51fc7b(0x6c4)]&&_0x11911f[_0x51fc7b(0x493)]();},Game_Actor[_0x1a0039(0x6d2)]['getBattlePortraitOffsetX']=function(){const _0x54eb29=_0x1a0039;if(this[_0x54eb29(0xbc6)]()[_0x54eb29(0x83c)][_0x54eb29(0x7f1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x54eb29(0x83c)][_0x54eb29(0x7f1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x1a0039(0x6d2)]['getBattlePortraitOffsetY']=function(){const _0x4d4b89=_0x1a0039;if(this['actor']()[_0x4d4b89(0x83c)][_0x4d4b89(0x7f1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x4d4b89(0xbc6)]()[_0x4d4b89(0x83c)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('EFpkT'!=='NHTUS')return Number(RegExp['$2']);else this[_0x4d4b89(0x209)]='xp';}}return 0x0;},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x2ca)]=function(_0x3c65eb){const _0x5ef463=_0x1a0039,_0x430ec2=this[_0x5ef463(0xbc6)](_0x3c65eb);if(this[_0x5ef463(0x2b3)](_0x430ec2)){if(_0x5ef463(0xbb2)!==_0x5ef463(0xbb2)){const _0x550772=_0x3be315[_0x5ef463(0x246)](),_0x522eba=_0x550772[_0x5ef463(0x3ca)]();for(const _0x1c1e25 of _0x522eba){const _0x132579=_0x484378[_0x5ef463(0x261)]()?_0x1c1e25[_0x5ef463(0x6a6)]:_0x1c1e25[_0x5ef463(0x941)];_0x132579&&_0x12fb72[_0x5ef463(0xa1e)][_0x5ef463(0x4ce)][_0x5ef463(0x636)]['ShowAddedState']&&(this[_0x5ef463(0xb15)](_0x5ef463(0x50f)),this[_0x5ef463(0xb15)](_0x5ef463(0x5ef)),this[_0x5ef463(0xb15)](_0x5ef463(0x7c7)),this[_0x5ef463(0xb15)](_0x5ef463(0x827),_0x132579[_0x5ef463(0x4a8)](_0x44697c[_0x5ef463(0x192)]())),this[_0x5ef463(0xb15)]('wait')),_0x1c1e25['id']===_0x32126a[_0x5ef463(0xb02)]()&&this[_0x5ef463(0xb15)](_0x5ef463(0x4a6),_0x35800c);}}else{const _0x17d475='actor%1-portrait'[_0x5ef463(0x4a8)](_0x430ec2[_0x5ef463(0x371)]()),_0x50b804=this[_0x5ef463(0xa76)](_0x17d475,Sprite),_0x37d441=_0x430ec2[_0x5ef463(0x57c)]();_0x37d441!==''?_0x50b804[_0x5ef463(0x3bc)]=ImageManager['loadPicture'](_0x37d441):_0x50b804[_0x5ef463(0x3bc)]=ImageManager[_0x5ef463(0x523)];const _0x3e6139=this[_0x5ef463(0xa3a)](_0x3c65eb);_0x50b804[_0x5ef463(0x29d)]['x']=0.5,_0x50b804[_0x5ef463(0x29d)]['y']=0x1;let _0x9bac3f=Math[_0x5ef463(0x917)](_0x3e6139['x']+_0x3e6139['width']/0x2)+this['padding'];_0x9bac3f+=_0x430ec2[_0x5ef463(0x3af)]();let _0x2272d1=Math['round'](this['height']);_0x2272d1+=_0x430ec2['getBattlePortraitOffsetY'](),_0x50b804[_0x5ef463(0x56d)](_0x9bac3f,_0x2272d1);const _0x4810d0=VisuMZ[_0x5ef463(0xa1e)][_0x5ef463(0x4ce)][_0x5ef463(0x687)]['PortraitScale'];_0x50b804[_0x5ef463(0x511)]['x']=_0x4810d0,_0x50b804[_0x5ef463(0x511)]['y']=_0x4810d0,_0x50b804[_0x5ef463(0x65e)]();}}else{if(_0x5ef463(0x935)===_0x5ef463(0x935)){const _0x193682=this['faceRect'](_0x3c65eb);this[_0x5ef463(0x3bb)](_0x430ec2,_0x193682['x'],_0x193682['y'],_0x193682[_0x5ef463(0x926)],_0x193682[_0x5ef463(0x84d)]);}else this['addItemCommand']();}},Window_BattleStatus['prototype'][_0x1a0039(0xa76)]=function(_0x35105b,_0x41e226){const _0x26af0a=_0x1a0039,_0x279a11=this['_additionalSprites'];if(_0x279a11[_0x35105b]){if(_0x26af0a(0x9ea)===_0x26af0a(0x9ea))return _0x279a11[_0x35105b];else{if(!this[_0x26af0a(0x227)]())return![];const _0x3298a1=this[_0x26af0a(0x68a)]();if(!_0x3298a1)return![];const _0x2ad973=_0x3298a1[_0x26af0a(0x851)];if(!_0x2ad973)return![];const _0x307b04=_0x2ad973[_0x26af0a(0x520)];return _0x307b04&&!_0x307b04[_0x26af0a(0x6f4)];}}else{if(_0x26af0a(0xa68)!==_0x26af0a(0xa68))this[_0x26af0a(0x33d)](0x1);else{const _0x49863b=new _0x41e226();return _0x279a11[_0x35105b]=_0x49863b,this[_0x26af0a(0x2b5)](_0x49863b),this[_0x26af0a(0x2b5)](this[_0x26af0a(0x3f5)]),_0x49863b;}}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x85b)]=function(){const _0x5a8337=_0x1a0039;this['_createCursorArea'](),this[_0x5a8337(0x383)](),Window_StatusBase[_0x5a8337(0x6d2)][_0x5a8337(0x85b)][_0x5a8337(0xb33)](this),this[_0x5a8337(0x4d4)]();},Window_BattleStatus['prototype'][_0x1a0039(0x337)]=function(){const _0x1c0b87=_0x1a0039;this['_cursorArea']=new Sprite(),this[_0x1c0b87(0x3f5)][_0x1c0b87(0x922)]=[new PIXI['filters'][(_0x1c0b87(0x2bd))]()],this[_0x1c0b87(0x3f5)][_0x1c0b87(0xa3c)]=new Rectangle(),this['_cursorArea']['move'](this[_0x1c0b87(0x91c)],this['_padding']),this['addChild'](this[_0x1c0b87(0x3f5)]);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x383)]=function(){const _0xf3c9f1=_0x1a0039;this[_0xf3c9f1(0x928)]=new Sprite(),this[_0xf3c9f1(0xb20)](this[_0xf3c9f1(0x928)]);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0xae5)]=function(){const _0x40fc1f=_0x1a0039;this[_0x40fc1f(0x928)]&&this[_0x40fc1f(0xb20)](this['_effectsContainer']);},Window_BattleStatus['prototype']['_createDamageContainer']=function(){const _0x4536e5=_0x1a0039;this[_0x4536e5(0x45f)]=new Sprite(),this[_0x4536e5(0xb20)](this[_0x4536e5(0x45f)]);},Window_BattleStatus['prototype'][_0x1a0039(0x912)]=function(){const _0x47ae0d=_0x1a0039;this['_cursorSprite']=new Sprite();for(let _0x39c55e=0x0;_0x39c55e<0x9;_0x39c55e++){this[_0x47ae0d(0x60a)][_0x47ae0d(0xb20)](new Sprite());}this[_0x47ae0d(0x3f5)][_0x47ae0d(0xb20)](this['_cursorSprite']);},Window_BattleStatus[_0x1a0039(0x6d2)]['_updateClientArea']=function(){const _0x189d71=_0x1a0039;Window_StatusBase[_0x189d71(0x6d2)][_0x189d71(0x310)][_0x189d71(0xb33)](this),this['_updateCursorArea']();},Window_BattleStatus['prototype'][_0x1a0039(0xb46)]=function(){const _0x1e8ce0=_0x1a0039,_0x2c1478=this[_0x1e8ce0(0x91c)];this['_cursorArea']['move'](_0x2c1478,_0x2c1478),this[_0x1e8ce0(0x3f5)]['x']=_0x2c1478-this[_0x1e8ce0(0x7c0)]['x'],this[_0x1e8ce0(0x3f5)]['y']=_0x2c1478-this[_0x1e8ce0(0x7c0)]['y'];if(this[_0x1e8ce0(0x4ed)]>0x0&&this[_0x1e8ce0(0x639)]>0x0)this[_0x1e8ce0(0x3f5)][_0x1e8ce0(0x3c0)]=this[_0x1e8ce0(0x2e6)]();else{if(_0x1e8ce0(0x80a)!==_0x1e8ce0(0x80a))for(const _0x51493d of _0x334404){const _0x3827e8=_0x36e4c4[0x0][_0x1e8ce0(0x4a8)](_0x51493d[0x0],_0x1ee9ba[0x0]),_0x244125=_0x4c8c17[0x1]['format'](_0x51493d[0x1],_0x5c8974[0x1])[_0x1e8ce0(0x850)](),_0x36083=new _0x5f16fb(_0x184100['format'](_0x244125),'i');_0x33725e[_0x3827e8]=_0x36083;}else this[_0x1e8ce0(0x3f5)][_0x1e8ce0(0x3c0)]=![];}},Window_BattleStatus['prototype'][_0x1a0039(0x714)]=function(){const _0x553fb4=_0x1a0039;Window_StatusBase['prototype'][_0x553fb4(0x714)][_0x553fb4(0xb33)](this),this[_0x553fb4(0x314)]();},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x314)]=function(){const _0xfe6e20=_0x1a0039,_0x5a7ab=this[_0xfe6e20(0x3f5)][_0xfe6e20(0x2e2)][_0xfe6e20(0xbaf)](new Point(0x0,0x0)),_0x26bf48=this[_0xfe6e20(0x3f5)][_0xfe6e20(0xa3c)];_0x26bf48['x']=_0x5a7ab['x']+this[_0xfe6e20(0x7c0)]['x'],_0x26bf48['y']=_0x5a7ab['y']+this[_0xfe6e20(0x7c0)]['y'],_0x26bf48['width']=this[_0xfe6e20(0x4ed)],_0x26bf48['height']=this[_0xfe6e20(0x639)];},Window_BattleStatus[_0x1a0039(0x6d2)]['refreshActorPortrait']=function(_0x4f7663){const _0x3d1d58=_0x1a0039;if(this['battleLayoutStyle']()!==_0x3d1d58(0x3a9))return;this[_0x3d1d58(0x2ca)](_0x4f7663['index']());},Window_BattleStatus['prototype']['addDamageSprite']=function(_0x1b1172,_0xf4132){const _0x3072aa=_0x1a0039;if(!this[_0x3072aa(0x45f)])return;if(!_0x1b1172)return;if(!_0xf4132)return;const _0x15a0a5=this[_0x3072aa(0xa3a)](_0xf4132[_0x3072aa(0x589)]());_0x15a0a5['x']+=_0x15a0a5[_0x3072aa(0x926)]/0x2+this[_0x3072aa(0x23b)],_0x1b1172['x']=_0x15a0a5['x'],_0x1b1172['y']=_0x15a0a5['y'],this[_0x3072aa(0x45f)]['addChild'](_0x1b1172);},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x708)]=function(_0x49f86e){const _0x2438b4=_0x1a0039;if(!this[_0x2438b4(0x45f)])return;if(!_0x49f86e)return;this[_0x2438b4(0x45f)][_0x2438b4(0xb6e)](_0x49f86e);},Window_BattleStatus['prototype'][_0x1a0039(0x351)]=function(){const _0x38a663=_0x1a0039;if(!this[_0x38a663(0x1a9)]())return;if(!this[_0x38a663(0x9ca)])this[_0x38a663(0x1e1)]();this[_0x38a663(0xa86)](),this[_0x38a663(0x64b)]();},Window_BattleStatus['prototype'][_0x1a0039(0x1a9)]=function(){const _0x2ac7e4=_0x1a0039;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x2ac7e4(0x984)]())return![];return VisuMZ[_0x2ac7e4(0xa1e)][_0x2ac7e4(0x4ce)][_0x2ac7e4(0x687)][_0x2ac7e4(0x789)];},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x1e1)]=function(){const _0x269a16=_0x1a0039;this[_0x269a16(0x9ca)]=new Sprite();const _0x4582de=SceneManager['_scene'],_0x12062e=_0x4582de[_0x269a16(0x7d3)][_0x269a16(0xadc)](_0x4582de[_0x269a16(0x56b)]);_0x4582de[_0x269a16(0x5e4)](this[_0x269a16(0x9ca)],_0x12062e),this['_borderPortraitSprite'][_0x269a16(0x29d)]['x']=0.5,this['_borderPortraitSprite'][_0x269a16(0x29d)]['y']=0x1;const _0x5e7941=VisuMZ[_0x269a16(0xa1e)][_0x269a16(0x4ce)][_0x269a16(0x687)][_0x269a16(0x732)];this[_0x269a16(0x9ca)][_0x269a16(0x511)]['x']=_0x5e7941,this[_0x269a16(0x9ca)][_0x269a16(0x511)]['y']=_0x5e7941,this[_0x269a16(0x9ca)]['y']=this['y']+this[_0x269a16(0x84d)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus['prototype'][_0x1a0039(0xa86)]=function(){const _0x1350c8=_0x1a0039;this[_0x1350c8(0x9ca)][_0x1350c8(0x3c0)]=BattleManager['isInputting']();const _0x569668=BattleManager[_0x1350c8(0xbc6)]();if(_0x569668===this[_0x1350c8(0x9ca)][_0x1350c8(0xbc6)])return;this[_0x1350c8(0x9ca)]['actor']=_0x569668||this['_borderPortraitSprite'][_0x1350c8(0xbc6)];if(!_0x569668)return;else{if(_0x569668[_0x1350c8(0x57c)]()===''){if(_0x1350c8(0x47d)!==_0x1350c8(0x3a0)){this[_0x1350c8(0x9ca)]['bitmap']=ImageManager[_0x1350c8(0x523)];return;}else return this[_0x1350c8(0x87d)]();}else{const _0x5b7129=ImageManager[_0x1350c8(0x720)](_0x569668[_0x1350c8(0x57c)]());_0x5b7129[_0x1350c8(0x870)](this[_0x1350c8(0x99b)][_0x1350c8(0x940)](this,_0x5b7129));}}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x99b)]=function(_0x5c0ac5){const _0x3dff61=_0x1a0039;this['_borderPortraitDuration']=0x14,this[_0x3dff61(0x9ca)][_0x3dff61(0x3bc)]=_0x5c0ac5;if(SceneManager[_0x3dff61(0x784)][_0x3dff61(0x902)]()){if(_0x3dff61(0x34e)!==_0x3dff61(0x8f1))this['_borderPortraitSprite']['x']=0x0,this[_0x3dff61(0x3d9)]=Math[_0x3dff61(0xb9b)](_0x5c0ac5[_0x3dff61(0x926)]/0x2);else{const _0x45ac1d=_0x41d682[_0x3dff61(0x75e)][_0x3dff61(0x4ce)][_0x3dff61(0x31d)];_0x45ac1d&&_0x45ac1d[_0x3dff61(0xbdc)]===![]&&this['removeStatesAuto'](0x1);}}else{if(_0x3dff61(0x6bb)!==_0x3dff61(0x719))this[_0x3dff61(0x9ca)]['x']=this[_0x3dff61(0x926)],this[_0x3dff61(0x3d9)]=this['width']*0x3/0x4;else{if(!this[_0x3dff61(0x1a9)]())return;if(!this['_borderPortraitSprite'])this[_0x3dff61(0x1e1)]();this[_0x3dff61(0xa86)](),this[_0x3dff61(0x64b)]();}}this['_borderPortraitSprite'][_0x3dff61(0x1f4)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x3dff61(0x84d)];const _0x3faf84=BattleManager[_0x3dff61(0xbc6)]();_0x3faf84&&(_0x3dff61(0x68d)==='iXQRA'?(this['_borderPortraitTargetX']+=_0x3faf84['getBattlePortraitOffsetX'](),this['_borderPortraitSprite']['y']+=_0x3faf84[_0x3dff61(0x8ed)]()):this[_0x3dff61(0x209)]=_0x3dff61(0x71c));},Window_BattleStatus['prototype'][_0x1a0039(0x64b)]=function(){const _0x2e8e80=_0x1a0039;if(this[_0x2e8e80(0x434)]>0x0){const _0x4e885e=this[_0x2e8e80(0x434)],_0x3af3dd=this[_0x2e8e80(0x9ca)];_0x3af3dd['x']=(_0x3af3dd['x']*(_0x4e885e-0x1)+this[_0x2e8e80(0x3d9)])/_0x4e885e,_0x3af3dd[_0x2e8e80(0x1f4)]=(_0x3af3dd[_0x2e8e80(0x1f4)]*(_0x4e885e-0x1)+0xff)/_0x4e885e,this[_0x2e8e80(0x434)]--;}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x6b0)]=function(){const _0xccffc5=_0x1a0039;return;this['_effectsContainer']&&(this[_0xccffc5(0x928)]['x']=this['x'],this[_0xccffc5(0x928)]['y']=this['y']),this[_0xccffc5(0x45f)]&&(this[_0xccffc5(0x45f)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus['prototype'][_0x1a0039(0x9c8)]=function(){const _0x3bd571=_0x1a0039,_0x349513=VisuMZ['BattleCore']['Settings'][_0x3bd571(0x687)];if(_0x349513[_0x3bd571(0x722)]){if(_0x3bd571(0x1bd)!==_0x3bd571(0x1e9)){const _0x1c22f8=new Sprite();_0x1c22f8['bitmap']=ImageManager['loadSystem'](_0x349513['StatusWindowAttachmentBack']),_0x1c22f8['x']=_0x349513['StatusWindowAttachmentBackOffsetX']||0x0,_0x1c22f8['y']=_0x349513[_0x3bd571(0xa09)]||0x0,this['addChildToBack'](_0x1c22f8),this[_0x3bd571(0x3e5)]=_0x1c22f8;}else _0x38241b['motionIdle']=_0x4df056(_0x5c814c['$1'])[_0x3bd571(0x6f5)]()[_0x3bd571(0x850)]();}if(_0x349513[_0x3bd571(0x78e)]){const _0x462ecc=new Sprite();_0x462ecc[_0x3bd571(0x3bc)]=ImageManager[_0x3bd571(0x6de)](_0x349513[_0x3bd571(0x78e)]),_0x462ecc['x']=_0x349513[_0x3bd571(0x8fc)]||0x0,_0x462ecc['y']=_0x349513[_0x3bd571(0x1fe)]||0x0,this[_0x3bd571(0xb20)](_0x462ecc),this['_frontAttachmentSprite']=_0x462ecc;}},Window_BattleStatus[_0x1a0039(0x6d2)][_0x1a0039(0x4b6)]=function(){const _0x119129=_0x1a0039;this[_0x119129(0x87e)]&&this[_0x119129(0xb20)](this[_0x119129(0x87e)]),this[_0x119129(0x3e5)]&&this['addChildToBack'](this[_0x119129(0x3e5)]);},Window_BattleActor['prototype']['isOkEnabled']=function(){const _0xc2fa6a=_0x1a0039;return Window_BattleStatus[_0xc2fa6a(0x6d2)]['isOkEnabled'][_0xc2fa6a(0xb33)](this)&&this[_0xc2fa6a(0x95b)]();},Window_BattleActor['prototype'][_0x1a0039(0x95b)]=function(){const _0xa080ed=_0x1a0039,_0x3dd59a=BattleManager[_0xa080ed(0x5de)](),_0x48d693=this['actor'](this['index']());if(!_0x3dd59a)return!![];if(!_0x3dd59a['item']())return!![];const _0x2cdcb4=_0x3dd59a[_0xa080ed(0x19a)]()['note'];if(_0x2cdcb4[_0xa080ed(0x7f1)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0xa080ed(0x678)!==_0xa080ed(0x678))this[_0xa080ed(0x8eb)]=![];else{if(_0x48d693===BattleManager[_0xa080ed(0xbc6)]())return![];}}return!![];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x53a)]=Window_BattleEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)],Window_BattleEnemy[_0x1a0039(0x6d2)]['initialize']=function(_0x34615d){const _0x307b32=_0x1a0039;this['_lastEnemy']=null,VisuMZ[_0x307b32(0xa1e)][_0x307b32(0x53a)][_0x307b32(0xb33)](this,_0x34615d);},Window_BattleEnemy['prototype'][_0x1a0039(0x1a6)]=function(){const _0x414924=_0x1a0039;return this[_0x414924(0xaa2)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x7be)]=Window_BattleEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x65e)],Window_BattleEnemy['prototype'][_0x1a0039(0x65e)]=function(){const _0x339ecb=_0x1a0039;VisuMZ['BattleCore'][_0x339ecb(0x7be)][_0x339ecb(0xb33)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x1a0039(0x6d2)][_0x1a0039(0xab0)]=function(){return $gameTroop['aliveMembers']()['slice'](0x0);},Window_BattleEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x466)]=function(){const _0x4d8e30=_0x1a0039;this[_0x4d8e30(0x48a)]=this[_0x4d8e30(0xab0)](),this['sortEnemies'](),Window_Selectable['prototype'][_0x4d8e30(0x466)]['call'](this);},Window_BattleEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x586)]=function(){const _0x40095c=_0x1a0039;this[_0x40095c(0x48a)][_0x40095c(0x8b1)]((_0x5d0e6a,_0x577b89)=>{const _0x3ddc50=_0x40095c;if(_0x5d0e6a['battler']()['_baseX']===_0x577b89[_0x3ddc50(0x68a)]()['_baseX']){if(_0x3ddc50(0x5b6)!==_0x3ddc50(0x5b6))for(const _0x392369 of _0x381a23){_0x392369[_0x3ddc50(0x7f1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x381c4e=_0x3bbd24(_0x58e8fd['$1']),_0x7dc5fb=_0x4e61bc(_0x15cdf1['$2']),_0x342322=_0x7dc5fb===0x1?this[_0x3ddc50(0x616)]:this[_0x3ddc50(0xae2)],_0x2c44c4=_0xe7a5b1(_0x1fb242['$3']);_0x342322[_0x381c4e]=_0x2c44c4;}else return _0x5d0e6a['battler']()['_baseY']-_0x577b89[_0x3ddc50(0x68a)]()[_0x3ddc50(0x9da)];}else{if(_0x3ddc50(0x7d7)!==_0x3ddc50(0x7d7)){if(!_0x1b6c32[_0x3ddc50(0x313)]())return![];if(!_0x167ccd[_0x3ddc50(0x5a1)]())return![];if(!_0xf651e1[_0x3ddc50(0x2e3)]())return![];return _0x50375a[_0x3ddc50(0xa1e)][_0x3ddc50(0x4ce)][_0x3ddc50(0x36e)][_0x3ddc50(0xa1d)];}else return _0x5d0e6a[_0x3ddc50(0x68a)]()['_baseX']-_0x577b89['battler']()[_0x3ddc50(0x1d4)];}}),SceneManager[_0x40095c(0x50a)]()&&this[_0x40095c(0x48a)][_0x40095c(0x7d5)]();},Window_BattleEnemy[_0x1a0039(0x6d2)]['autoSelect']=function(){const _0x5d3d00=_0x1a0039,_0x5a8795=VisuMZ['BattleCore'][_0x5d3d00(0x4ce)][_0x5d3d00(0x814)];_0x5a8795[_0x5d3d00(0xb5a)]?this[_0x5d3d00(0x829)]():this[_0x5d3d00(0xac1)]();},Window_BattleEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x829)]=function(){const _0x1da0d6=_0x1a0039;if(this[_0x1da0d6(0x2de)]&&this['_enemies'][_0x1da0d6(0x604)](this[_0x1da0d6(0x2de)])){const _0x1b16f5=this['_enemies'][_0x1da0d6(0xadc)](this['_lastEnemy']);this[_0x1da0d6(0x52d)](_0x1b16f5);}else this['autoSelectPriority']();},Window_BattleEnemy['prototype'][_0x1a0039(0xac1)]=function(){const _0x139080=_0x1a0039,_0x5575bb=VisuMZ[_0x139080(0xa1e)][_0x139080(0x4ce)][_0x139080(0x814)];let _0x2c4c5e=![];$gameSystem[_0x139080(0x969)]()?_0x2c4c5e=_0x5575bb[_0x139080(0x936)]:_0x2c4c5e=_0x5575bb['FrontViewSelect'],this[_0x139080(0x52d)](_0x2c4c5e?this[_0x139080(0xaa2)]()-0x1:0x0);},Window_BattleEnemy[_0x1a0039(0x6d2)][_0x1a0039(0x216)]=function(){const _0xebd57c=_0x1a0039;Window_Selectable[_0xebd57c(0x6d2)][_0xebd57c(0x216)][_0xebd57c(0xb33)](this),this[_0xebd57c(0x2de)]=this[_0xebd57c(0x91b)]();},Window_BattleItem[_0x1a0039(0x6d2)][_0x1a0039(0x604)]=function(_0x38342a){if(!_0x38342a)return![];return _0x38342a['occasion']===0x0||_0x38342a['occasion']===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x1a0039(0x6d2)]=Object[_0x1a0039(0x862)](Window_Base['prototype']),Window_AutoBattleCancel[_0x1a0039(0x6d2)][_0x1a0039(0x9a0)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x1a0039(0x6d2)][_0x1a0039(0x3e0)]=function(_0x40860){const _0x197268=_0x1a0039;Window_Base[_0x197268(0x6d2)][_0x197268(0x3e0)][_0x197268(0xb33)](this,_0x40860),this[_0x197268(0x39f)](this[_0x197268(0x3db)]()),this['refresh']();},Window_AutoBattleCancel[_0x1a0039(0x6d2)][_0x1a0039(0x3db)]=function(){const _0x24f57d=_0x1a0039;return VisuMZ[_0x24f57d(0xa1e)][_0x24f57d(0x4ce)][_0x24f57d(0x4e3)][_0x24f57d(0x13e)];},Window_AutoBattleCancel[_0x1a0039(0x6d2)]['refresh']=function(){const _0x3f4bd7=_0x1a0039;this['contents']['clear']();const _0x78c85e=VisuMZ[_0x3f4bd7(0xa1e)]['Settings'][_0x3f4bd7(0x4e3)][_0x3f4bd7(0xa26)],_0x1301dc=_0x78c85e[_0x3f4bd7(0x4a8)](this[_0x3f4bd7(0xa05)](),this['cancelButtonText']()),_0x548bba=this['textSizeEx'](_0x1301dc)[_0x3f4bd7(0x926)],_0x18f0e6=Math['floor']((this['innerWidth']-_0x548bba)/0x2);this[_0x3f4bd7(0xbee)](_0x1301dc,_0x18f0e6,0x0,_0x548bba);},Window_AutoBattleCancel[_0x1a0039(0x6d2)]['okButtonText']=function(){const _0x5984ff=_0x1a0039;if(Imported[_0x5984ff(0x212)]){if(_0x5984ff(0xb71)!==_0x5984ff(0xb71))_0x55d497+=_0x4b739b(_0x39e4e1['$1']);else return TextManager['getInputButtonString']('ok');}else return VisuMZ[_0x5984ff(0xa1e)]['Settings']['AutoBattle']['AutoBattleOK'];},Window_AutoBattleCancel[_0x1a0039(0x6d2)][_0x1a0039(0xa41)]=function(){const _0x2ba40d=_0x1a0039;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x2ba40d(0x82e)](_0x2ba40d(0xb7a)):_0x2ba40d(0x2ed)!==_0x2ba40d(0x2ab)?VisuMZ['BattleCore'][_0x2ba40d(0x4ce)][_0x2ba40d(0x4e3)]['AutoBattleCancel']:_0x14c27a[_0x2ba40d(0x22e)]['call'](this,_0x42fb43);},Window_AutoBattleCancel['prototype']['update']=function(){const _0x28e394=_0x1a0039;Window_Base[_0x28e394(0x6d2)][_0x28e394(0x9fc)][_0x28e394(0xb33)](this),this[_0x28e394(0x1d7)](),this['updateCancel']();},Window_AutoBattleCancel['prototype'][_0x1a0039(0x1d7)]=function(){const _0x1054ce=_0x1a0039;this[_0x1054ce(0x3c0)]=BattleManager[_0x1054ce(0xb01)];},Window_AutoBattleCancel[_0x1a0039(0x6d2)][_0x1a0039(0x623)]=function(){const _0x5936fe=_0x1a0039;if(!BattleManager['_autoBattle'])return;(Input[_0x5936fe(0x938)]('ok')||Input[_0x5936fe(0x938)](_0x5936fe(0xb7a))||TouchInput['isClicked']()||TouchInput['isCancelled']())&&(SoundManager['playCancel'](),BattleManager[_0x5936fe(0xb01)]=![],Input['clear'](),TouchInput['clear']());};function Window_EnemyName(){const _0x1e9c0a=_0x1a0039;this[_0x1e9c0a(0x3e0)](...arguments);}Window_EnemyName[_0x1a0039(0x6d2)]=Object[_0x1a0039(0x862)](Window_StatusBase['prototype']),Window_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x9a0)]=Window_EnemyName,Window_EnemyName[_0x1a0039(0x6d2)]['initialize']=function(_0x237a72){const _0xbcb08=_0x1a0039;this[_0xbcb08(0x166)]=_0x237a72,this[_0xbcb08(0x547)]='';const _0x500e90=new Rectangle(0x0,0x0,Graphics[_0xbcb08(0x5d3)],this['lineHeight']()*0x4);Window_StatusBase['prototype'][_0xbcb08(0x3e0)][_0xbcb08(0xb33)](this,_0x500e90),this[_0xbcb08(0x39f)](0x2),this[_0xbcb08(0x564)]=0x0;},Window_EnemyName[_0x1a0039(0x6d2)]['updatePadding']=function(){const _0x5a20f7=_0x1a0039;this[_0x5a20f7(0x23b)]=0x0;},Window_EnemyName['prototype'][_0x1a0039(0x91b)]=function(){const _0x1536ae=_0x1a0039;return $gameTroop[_0x1536ae(0x541)]()[this[_0x1536ae(0x166)]];},Window_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)]=function(){const _0x36488d=_0x1a0039;Window_StatusBase[_0x36488d(0x6d2)]['update'][_0x36488d(0xb33)](this);if(this['enemy']()&&this[_0x36488d(0x91b)]()[_0x36488d(0x192)]()!==this[_0x36488d(0x547)]){if(_0x36488d(0x843)==='Rbulc'){if(!this[_0x36488d(0xa1c)])return;if(!this[_0x36488d(0x757)])return;this[_0x36488d(0x4ec)](),this['updateShadowPosition']();}else this[_0x36488d(0x547)]=this[_0x36488d(0x91b)]()[_0x36488d(0x192)](),this[_0x36488d(0x466)]();}this['updateOpacity'](),this[_0x36488d(0x401)]();},Window_EnemyName[_0x1a0039(0x6d2)]['updateOpacity']=function(){const _0x4471ee=_0x1a0039;if(!this['enemy']()){if(_0x4471ee(0x433)!=='JJOBk'){if(this[_0x4471ee(0x564)]>0x0)this[_0x4471ee(0x564)]-=0x10;}else _0x73a06c[_0x4471ee(0x8ee)]();}else{if(this[_0x4471ee(0x91b)]()[_0x4471ee(0x93b)]()){if(this['contentsOpacity']>0x0)this[_0x4471ee(0x564)]-=0x10;}else{if(SceneManager[_0x4471ee(0x784)][_0x4471ee(0xad4)]&&SceneManager[_0x4471ee(0x784)][_0x4471ee(0xad4)][_0x4471ee(0x6f0)]&&SceneManager[_0x4471ee(0x784)][_0x4471ee(0xad4)][_0x4471ee(0x48a)]['includes'](this[_0x4471ee(0x91b)]())){if(this[_0x4471ee(0x564)]<0xff)this[_0x4471ee(0x564)]+=0x10;}else this[_0x4471ee(0x564)]>0x0&&(this[_0x4471ee(0x564)]-=0x10);}}},Window_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x401)]=function(){const _0x3cf359=_0x1a0039;if(!this[_0x3cf359(0x91b)]())return;if(SceneManager[_0x3cf359(0x50a)]()){if('Huldm'!==_0x3cf359(0x20e))this['x']=Graphics['boxWidth']-this[_0x3cf359(0x91b)]()[_0x3cf359(0x68a)]()['_baseX'];else{_0x11fafa[_0x3cf359(0xb99)](_0x5b1fb9);if(_0x580013)_0x26936b['atbInterrupt']();}}else this['x']=this[_0x3cf359(0x91b)]()[_0x3cf359(0x68a)]()['_baseX'];this['x']-=Math[_0x3cf359(0x917)](this[_0x3cf359(0x926)]/0x2),this['y']=this['enemy']()[_0x3cf359(0x68a)]()[_0x3cf359(0x9da)]-Math[_0x3cf359(0x917)](this[_0x3cf359(0x576)]()*1.5);const _0x37afa8=VisuMZ['BattleCore'][_0x3cf359(0x4ce)][_0x3cf359(0x814)];this['x']+=_0x37afa8['NameOffsetX']||0x0,this['y']+=_0x37afa8[_0x3cf359(0xa0c)]||0x0;},Window_EnemyName[_0x1a0039(0x6d2)]['resetFontSettings']=function(){const _0x2abea5=_0x1a0039;Window_Base['prototype'][_0x2abea5(0x423)]['call'](this),this[_0x2abea5(0x27a)][_0x2abea5(0x35b)]=VisuMZ['BattleCore'][_0x2abea5(0x4ce)][_0x2abea5(0x814)][_0x2abea5(0x7cd)];},Window_EnemyName[_0x1a0039(0x6d2)]['refresh']=function(){const _0x1002a0=_0x1a0039;Window_StatusBase[_0x1002a0(0x6d2)]['refresh'][_0x1002a0(0xb33)](this),this[_0x1002a0(0x27a)]['clear']();if(!this['enemy']())return;this[_0x1002a0(0x94a)]();},Window_EnemyName[_0x1a0039(0x6d2)][_0x1a0039(0x94a)]=function(){const _0x284828=_0x1a0039;this[_0x284828(0x547)]=this[_0x284828(0x91b)]()[_0x284828(0x192)]();const _0x116438=this[_0x284828(0x3a4)](this[_0x284828(0x547)])[_0x284828(0x926)],_0x16055a=Math['round']((this[_0x284828(0x4ed)]-_0x116438)/0x2);this[_0x284828(0xbee)](this['_text'],_0x16055a,0x0,_0x116438+0x8);},Window_BattleLog['prototype'][_0x1a0039(0x8e6)]=function(){const _0x1cb27c=_0x1a0039;return VisuMZ['BattleCore'][_0x1cb27c(0x4ce)][_0x1cb27c(0x636)]['MaxLines'];},Window_BattleLog['prototype'][_0x1a0039(0x6cf)]=function(){const _0x32a98d=_0x1a0039;return VisuMZ['BattleCore'][_0x32a98d(0x4ce)][_0x32a98d(0x636)]['MessageWait'];},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x3b9)]=function(){const _0x4033c9=_0x1a0039;return VisuMZ['BattleCore'][_0x4033c9(0x4ce)]['BattleLog']['BackColor'];},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xacd)]=function(){return![];},Window_BattleLog[_0x1a0039(0x6d2)]['actionEffect']=function(_0x4d0a39,_0x3ad8c9){const _0x49646b=_0x1a0039;this['unshift']('actionSplicePoint'),BattleManager[_0x49646b(0x754)](_0x4d0a39,_0x3ad8c9),this['callNextMethod']();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x79b)]=function(){const _0x82768=_0x1a0039;this[_0x82768(0x15a)]();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xb15)]=function(_0x440f98){const _0x5bb1bd=_0x1a0039,_0x3cd4b1=Array['prototype']['slice']['call'](arguments,0x1),_0x371b11={'name':_0x440f98,'params':_0x3cd4b1},_0x35b397=this[_0x5bb1bd(0x557)][_0x5bb1bd(0x73b)](_0x1b513e=>_0x1b513e['name'])[_0x5bb1bd(0xadc)]('actionSplicePoint');_0x35b397>=0x0?this[_0x5bb1bd(0x557)][_0x5bb1bd(0xabf)](_0x35b397,0x0,_0x371b11):this['_methods'][_0x5bb1bd(0xb15)](_0x371b11);},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x709)]=function(_0x59eff3){const _0x4e6687=_0x1a0039,_0x49be9c=Array[_0x4e6687(0x6d2)][_0x4e6687(0x130)][_0x4e6687(0xb33)](arguments,0x1);this[_0x4e6687(0x557)][_0x4e6687(0x709)]({'name':_0x59eff3,'params':_0x49be9c});},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xa91)]=function(){const _0x5eb65d=_0x1a0039;if(!$gameTemp['isPlaytest']())return;console[_0x5eb65d(0x3e2)](this['_methods'][_0x5eb65d(0x73b)](_0x533029=>_0x533029[_0x5eb65d(0x192)])[_0x5eb65d(0x2ad)]('\x0a'));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xbd9)]=Window_BattleLog[_0x1a0039(0x6d2)]['refresh'],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x466)]=function(){const _0x3471ee=_0x1a0039;this[_0x3471ee(0x4a4)]=!![];},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x3c5)]=Window_BattleLog['prototype'][_0x1a0039(0x9fc)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x9fc)]=function(){const _0x36d535=_0x1a0039;VisuMZ[_0x36d535(0xa1e)][_0x36d535(0x3c5)]['call'](this);if(this['_requestRefresh'])this[_0x36d535(0x684)]();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x684)]=function(){const _0x3d408d=_0x1a0039;this[_0x3d408d(0x4a4)]=![],VisuMZ[_0x3d408d(0xa1e)]['Window_BattleLog_refresh'][_0x3d408d(0xb33)](this);},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x741)]=function(_0x58b07a){const _0x2743ce=_0x1a0039;let _0x4fbcce=VisuMZ['BattleCore'][_0x2743ce(0x4ce)][_0x2743ce(0x636)][_0x2743ce(0x713)][_0x2743ce(0x6f5)]()[_0x2743ce(0x850)](),_0x4df704=this['_lines'][_0x58b07a];if(_0x4df704[_0x2743ce(0x7f1)](/<LEFT>/i))_0x4fbcce=_0x2743ce(0x3b7);else{if(_0x4df704[_0x2743ce(0x7f1)](/<CENTER>/i))_0x4fbcce=_0x2743ce(0x36f);else _0x4df704[_0x2743ce(0x7f1)](/<RIGHT>/i)&&(_0x4fbcce=_0x2743ce(0x283));}_0x4df704=_0x4df704[_0x2743ce(0x8ef)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x4df704=_0x4df704[_0x2743ce(0x8ef)](/\\I\[0\]/gi,'');const _0x1274d9=this['lineRect'](_0x58b07a);this[_0x2743ce(0x27a)]['clearRect'](_0x1274d9['x'],_0x1274d9['y'],_0x1274d9[_0x2743ce(0x926)],_0x1274d9[_0x2743ce(0x84d)]);const _0x3f16bb=this[_0x2743ce(0x3a4)](_0x4df704)['width'];let _0x20cad4=_0x1274d9['x'];if(_0x4fbcce===_0x2743ce(0x36f))_0x20cad4+=(_0x1274d9[_0x2743ce(0x926)]-_0x3f16bb)/0x2;else _0x4fbcce===_0x2743ce(0x283)&&(_0x20cad4+=_0x1274d9['width']-_0x3f16bb);this['drawTextEx'](_0x4df704,_0x20cad4,_0x1274d9['y'],_0x3f16bb+0x8);},Window_BattleLog['prototype']['addText']=function(_0x251b43){const _0x4d3739=_0x1a0039;this['_lines'][_0x4d3739(0xb15)](_0x251b43),this[_0x4d3739(0x466)](),this[_0x4d3739(0x15a)]();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x786)]=function(){const _0x33ef24=_0x1a0039;let _0x3ff2a4=![];switch(this[_0x33ef24(0xb6a)]){case _0x33ef24(0x235):_0x3ff2a4=this['_spriteset'][_0x33ef24(0x7d2)]();break;case _0x33ef24(0x210):_0x3ff2a4=this['_spriteset'][_0x33ef24(0x40c)]();break;case'animation':_0x3ff2a4=this[_0x33ef24(0x942)][_0x33ef24(0xa2e)]();break;case _0x33ef24(0xad0):_0x3ff2a4=this[_0x33ef24(0x942)][_0x33ef24(0x7b1)]();break;case'jump':_0x3ff2a4=this[_0x33ef24(0x942)][_0x33ef24(0x236)]();break;case _0x33ef24(0x1f4):_0x3ff2a4=this[_0x33ef24(0x942)][_0x33ef24(0xad6)]();break;}return!_0x3ff2a4&&(this[_0x33ef24(0xb6a)]=''),_0x3ff2a4;},Window_BattleLog['prototype'][_0x1a0039(0x286)]=function(){const _0x5baa36=_0x1a0039;this['setWaitMode'](_0x5baa36(0x9f0));},Window_BattleLog['prototype'][_0x1a0039(0x633)]=function(){const _0x1d4c35=_0x1a0039;this[_0x1d4c35(0x295)](_0x1d4c35(0xad0));},Window_BattleLog['prototype'][_0x1a0039(0x4be)]=function(){const _0x108778=_0x1a0039;this[_0x108778(0x295)](_0x108778(0x5fe));},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x3fb)]=function(){const _0x54e821=_0x1a0039;this[_0x54e821(0x295)]('opacity');},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x933)]=function(){const _0x4c966b=_0x1a0039,_0x3fbdc9=VisuMZ[_0x4c966b(0xa1e)][_0x4c966b(0x4ce)][_0x4c966b(0x636)];if(!_0x3fbdc9[_0x4c966b(0x605)])return;this[_0x4c966b(0xb15)](_0x4c966b(0x827),_0x3fbdc9[_0x4c966b(0xae4)][_0x4c966b(0x4a8)]($gameTroop[_0x4c966b(0x1c1)]())),this[_0x4c966b(0xb15)](_0x4c966b(0x2d4),_0x3fbdc9[_0x4c966b(0x663)]),this['push'](_0x4c966b(0xaf1));},Window_BattleLog['prototype'][_0x1a0039(0x253)]=function(_0x50d1a5,_0x4c307d,_0x21b544){const _0x42e0bf=_0x1a0039;if(this[_0x42e0bf(0x640)](_0x4c307d))BattleManager[_0x42e0bf(0xb03)]();else{if(_0x42e0bf(0x416)!=='mRHpW')this[_0x42e0bf(0x994)](_0x50d1a5,_0x4c307d,_0x21b544);else return 0xa;}},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x640)]=function(_0x52bdcd){const _0x23b831=_0x1a0039;if(!SceneManager[_0x23b831(0x984)]())return![];if(!_0x52bdcd)return![];if(!_0x52bdcd['item']())return![];if(_0x52bdcd[_0x23b831(0x19a)]()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x23b831(0x3c3)!==_0x23b831(0x7da))return!![];else{const _0x44610c=new _0x2f7be8();return _0xa97b45[_0x2e9cc7]=_0x44610c,this[_0x23b831(0x2b5)](_0x44610c),this[_0x23b831(0x2b5)](this[_0x23b831(0x3f5)]),_0x44610c;}}if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x52bdcd[_0x23b831(0x19a)]()))return!![];return![];},Window_BattleLog['prototype'][_0x1a0039(0x994)]=function(_0x3c76d7,_0x134d20,_0x1cac21){const _0x59e851=_0x1a0039,_0x51e9d6=_0x134d20[_0x59e851(0x19a)]();this['setupActionSet'](_0x3c76d7,_0x134d20,_0x1cac21),this[_0x59e851(0x4a2)](_0x3c76d7,_0x134d20,_0x1cac21),this[_0x59e851(0x3ac)](_0x3c76d7,_0x134d20,_0x1cac21);},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x98a)]=function(_0x3a317a,_0xbde25){const _0x42a3a9=_0x1a0039,_0x1ea549=VisuMZ[_0x42a3a9(0xa1e)]['Settings'][_0x42a3a9(0x636)];_0x1ea549['ActionCenteredName']&&this['push']('addText','<CENTER>%1'[_0x42a3a9(0x4a8)](DataManager[_0x42a3a9(0x957)](_0xbde25)));if(DataManager[_0x42a3a9(0x147)](_0xbde25)){if(_0x1ea549['ActionSkillMsg1'])this['displayItemMessage'](_0xbde25['message1'],_0x3a317a,_0xbde25);if(_0x1ea549[_0x42a3a9(0x367)])this['displayItemMessage'](_0xbde25['message2'],_0x3a317a,_0xbde25);}else{if(_0x1ea549[_0x42a3a9(0x32e)])this[_0x42a3a9(0xb1b)](TextManager[_0x42a3a9(0xa59)],_0x3a317a,_0xbde25);}},Window_BattleLog[_0x1a0039(0x6d2)]['setupActionSet']=function(_0x2fb819,_0x125a2c,_0x174e8f){const _0xef44ba=_0x1a0039,_0x15ac28=_0x125a2c[_0xef44ba(0x19a)]();this[_0xef44ba(0x98a)](_0x2fb819,_0x15ac28),this[_0xef44ba(0xb15)](_0xef44ba(0x7b7),_0x2fb819,_0x174e8f,!![]),this[_0xef44ba(0xb15)](_0xef44ba(0x2fa),_0x2fb819,_0x125a2c),this[_0xef44ba(0xb15)]('waitForMovement'),this['push']('performCastAnimation',_0x2fb819,_0x125a2c),this[_0xef44ba(0xb15)](_0xef44ba(0x286));},Window_BattleLog[_0x1a0039(0x6d2)]['createEffectActionSet']=function(_0x2b0155,_0x181d13,_0x1051c9){const _0x545b17=_0x1a0039;if(this[_0x545b17(0x8c1)](_0x181d13))this['autoMeleeSingleTargetActionSet'](_0x2b0155,_0x181d13,_0x1051c9);else{if(this[_0x545b17(0x8d3)](_0x181d13))this[_0x545b17(0x430)](_0x2b0155,_0x181d13,_0x1051c9);else{if(_0x181d13[_0x545b17(0xba0)]())this['targetActionSet'](_0x2b0155,_0x181d13,_0x1051c9);else{if('pHemC'===_0x545b17(0x303))this[_0x545b17(0xafa)](_0x2b0155,_0x181d13,_0x1051c9);else{const _0x1936b3=this['commandSymbol'](_0x11c00a);return _0x1936b3===_0x545b17(0x44c)?this[_0x545b17(0x87d)]():_0x24339a[_0x545b17(0xa1e)][_0x545b17(0xa7c)][_0x545b17(0xb33)](this,_0xaaf655);}}}}},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x8c1)]=function(_0x4b1b0f){const _0x549be1=_0x1a0039;if(!_0x4b1b0f[_0x549be1(0x313)]())return![];if(!_0x4b1b0f[_0x549be1(0xa6f)]())return![];if(!_0x4b1b0f['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x549be1(0x4ce)][_0x549be1(0x36e)][_0x549be1(0x858)];},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x1ab)]=function(_0x1ff47a,_0xf7881d,_0x56e3e8){const _0x2169c1=_0x1a0039,_0x97d6c4=_0x1ff47a[_0x2169c1(0x164)]()[_0x2169c1(0x27b)]<0x2,_0x308c93=0x14,_0x104144=0x30;_0x97d6c4&&('RvWtx'===_0x2169c1(0xb29)?(this['push'](_0x2169c1(0x487),[_0x1ff47a],_0x104144,_0x308c93),this[_0x2169c1(0xb15)](_0x2169c1(0x666),_0x1ff47a,_0x56e3e8,'front\x20base',_0x308c93,!![],'Linear',!![]),this['push'](_0x2169c1(0x496),[_0x1ff47a],_0x2169c1(0x5f9)),this[_0x2169c1(0xb15)](_0x2169c1(0x449))):_0x5269d2[_0x2169c1(0x131)]([_0x1362b7]));let _0x13ac46=_0xf7881d[_0x2169c1(0x823)]()?this[_0x2169c1(0x6e6)](_0x1ff47a):0x1;for(let _0x4c9f98=0x0;_0x4c9f98<_0x13ac46;_0x4c9f98++){_0xf7881d[_0x2169c1(0x823)]()&&_0x1ff47a[_0x2169c1(0x261)]()&&this[_0x2169c1(0xb15)]('setActiveWeaponSet',_0x1ff47a,_0x4c9f98);if(_0xf7881d[_0x2169c1(0x19a)]()['animationId']<0x0){if('MDiWD'==='JBOlU')return 0x0;else this['targetActionSet'](_0x1ff47a,_0xf7881d,_0x56e3e8);}else this[_0x2169c1(0xafa)](_0x1ff47a,_0xf7881d,_0x56e3e8);}_0xf7881d[_0x2169c1(0x823)]()&&_0x1ff47a[_0x2169c1(0x261)]()&&this['push'](_0x2169c1(0x372),_0x1ff47a);this['push']('applyImmortal',_0x1ff47a,_0x56e3e8,![]);if(_0x97d6c4){const _0x46bec3=_0x1ff47a['battler']();this[_0x2169c1(0xb15)](_0x2169c1(0x487),[_0x1ff47a],_0x104144,_0x308c93),this[_0x2169c1(0xb15)](_0x2169c1(0x8a2),_0x1ff47a,_0x46bec3['_homeX'],_0x46bec3[_0x2169c1(0xab6)],_0x308c93,![],_0x2169c1(0x3d0)),this['push'](_0x2169c1(0x496),[_0x1ff47a],_0x2169c1(0x242)),this[_0x2169c1(0xb15)](_0x2169c1(0x449)),this['push']('requestMotion',[_0x1ff47a],_0x2169c1(0x5f9));}},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x8d3)]=function(_0x4d44b1){const _0x5ed3d9=_0x1a0039;if(!_0x4d44b1['isPhysical']())return![];if(!_0x4d44b1[_0x5ed3d9(0x5a1)]())return![];if(!_0x4d44b1[_0x5ed3d9(0x2e3)]())return![];return VisuMZ['BattleCore'][_0x5ed3d9(0x4ce)]['ActionSequence'][_0x5ed3d9(0xa1d)];},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x430)]=function(_0x2b3804,_0x2a6ebc,_0x5eee48){const _0x30378d=_0x1a0039,_0x4ecf9b=_0x2b3804[_0x30378d(0x164)]()[_0x30378d(0x27b)]<0x2,_0x13d8d3=0x14,_0x387357=0x30;_0x4ecf9b&&(this[_0x30378d(0xb15)](_0x30378d(0x487),[_0x2b3804],_0x387357,_0x13d8d3),this['push'](_0x30378d(0x666),_0x2b3804,_0x5eee48,_0x30378d(0x18a),_0x13d8d3,!![],_0x30378d(0x3d0),!![]),this[_0x30378d(0xb15)]('requestMotion',[_0x2b3804],_0x30378d(0x5f9)),this[_0x30378d(0xb15)](_0x30378d(0x449)));let _0x1c1b8a=_0x2a6ebc['isAttack']()?this[_0x30378d(0x6e6)](_0x2b3804):0x1;for(let _0x2214b8=0x0;_0x2214b8<_0x1c1b8a;_0x2214b8++){_0x2a6ebc[_0x30378d(0x823)]()&&_0x2b3804[_0x30378d(0x261)]()&&this['push'](_0x30378d(0x5e8),_0x2b3804,_0x2214b8),this[_0x30378d(0xafa)](_0x2b3804,_0x2a6ebc,_0x5eee48);}_0x2a6ebc[_0x30378d(0x823)]()&&_0x2b3804[_0x30378d(0x261)]()&&this[_0x30378d(0xb15)]('clearActiveWeaponSet',_0x2b3804);this[_0x30378d(0xb15)](_0x30378d(0x7b7),_0x2b3804,_0x5eee48,![]);if(_0x4ecf9b){if(_0x30378d(0x8fb)!==_0x30378d(0xb85)){const _0x39c52a=_0x2b3804[_0x30378d(0x68a)]();this[_0x30378d(0xb15)](_0x30378d(0x487),[_0x2b3804],_0x387357,_0x13d8d3),this[_0x30378d(0xb15)](_0x30378d(0x8a2),_0x2b3804,_0x39c52a[_0x30378d(0x59b)],_0x39c52a[_0x30378d(0xab6)],_0x13d8d3,![],_0x30378d(0x3d0)),this['push'](_0x30378d(0x496),[_0x2b3804],_0x30378d(0x242)),this[_0x30378d(0xb15)](_0x30378d(0x449)),this[_0x30378d(0xb15)](_0x30378d(0x496),[_0x2b3804],_0x30378d(0x5f9));}else _0x432352[_0x30378d(0xa1e)][_0x30378d(0x815)][_0x30378d(0xb33)](this,_0x78db85),this[_0x30378d(0x1cd)](_0x2a5373);}},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xb9d)]=function(_0x2cac96,_0x35ee9e,_0x18ecae){const _0x201bdd=_0x1a0039,_0x648776=_0x35ee9e[_0x201bdd(0x19a)]();for(const _0x27ad72 of _0x18ecae){if(!_0x27ad72)continue;this[_0x201bdd(0xb15)]('performAction',_0x2cac96,_0x35ee9e),this[_0x201bdd(0xb15)](_0x201bdd(0x2d4),Sprite_Battler[_0x201bdd(0xa46)]),this[_0x201bdd(0xb15)](_0x201bdd(0x406),_0x2cac96,[_0x27ad72],_0x648776[_0x201bdd(0x7f4)]),this[_0x201bdd(0xb15)](_0x201bdd(0x2d4),0x18),this[_0x201bdd(0xb15)](_0x201bdd(0x2f3),_0x2cac96,_0x27ad72);}},Window_BattleLog[_0x1a0039(0x6d2)]['wholeActionSet']=function(_0x172f82,_0x417cc2,_0x8ca5c6){const _0x234262=_0x1a0039,_0x591a58=_0x417cc2[_0x234262(0x19a)]();this[_0x234262(0xb15)](_0x234262(0x566),_0x172f82,_0x417cc2),this[_0x234262(0xb15)](_0x234262(0x2d4),Sprite_Battler[_0x234262(0xa46)]),this[_0x234262(0xb15)](_0x234262(0x406),_0x172f82,_0x8ca5c6[_0x234262(0x95c)](),_0x591a58['animationId']),this[_0x234262(0xb15)]('waitForAnimation');for(const _0xcb7878 of _0x8ca5c6){if(!_0xcb7878)continue;this[_0x234262(0xb15)](_0x234262(0x2f3),_0x172f82,_0xcb7878);}},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x3ac)]=function(_0x1ef0cf,_0x488368,_0x3693c5){const _0x6a916a=_0x1a0039,_0x41f559=_0x488368[_0x6a916a(0x19a)]();this[_0x6a916a(0xb15)]('applyImmortal',_0x1ef0cf,_0x3693c5,![]),this[_0x6a916a(0xb15)](_0x6a916a(0x4c7)),this[_0x6a916a(0xb15)](_0x6a916a(0x4a7)),this[_0x6a916a(0xb15)](_0x6a916a(0xaf1)),this[_0x6a916a(0xb15)]('performActionEnd',_0x1ef0cf),this[_0x6a916a(0xb15)](_0x6a916a(0x449));},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x3b4)]=function(_0x549303){},VisuMZ['BattleCore'][_0x1a0039(0xb0d)]=Window_BattleLog['prototype']['displayCurrentState'],Window_BattleLog['prototype'][_0x1a0039(0xaa3)]=function(_0xd61452){const _0x10659a=_0x1a0039;if(!VisuMZ[_0x10659a(0xa1e)]['Settings'][_0x10659a(0x636)]['ShowCurrentState'])return;VisuMZ[_0x10659a(0xa1e)][_0x10659a(0xb0d)]['call'](this,_0xd61452);},Window_BattleLog[_0x1a0039(0x6d2)]['displayCounter']=function(_0x262d1a){const _0x45ba4c=_0x1a0039;this[_0x45ba4c(0xb15)]('performCounter',_0x262d1a);VisuMZ[_0x45ba4c(0xa1e)][_0x45ba4c(0x4ce)]['ActionSequence']['CounterPlayback']&&(_0x45ba4c(0x14c)!==_0x45ba4c(0x5cf)?this[_0x45ba4c(0xb15)](_0x45ba4c(0x406),_0x262d1a,[BattleManager['_subject']],-0x1):this['_distortionSprite'][_0x45ba4c(0xb20)](this['_mainSprite']));if(!VisuMZ[_0x45ba4c(0xa1e)][_0x45ba4c(0x4ce)][_0x45ba4c(0x636)][_0x45ba4c(0xa5a)])return;this[_0x45ba4c(0xb15)]('addText',TextManager[_0x45ba4c(0x89a)][_0x45ba4c(0x4a8)](_0x262d1a[_0x45ba4c(0x192)]()));},Window_BattleLog[_0x1a0039(0x6d2)]['displayReflection']=function(_0x138038){const _0x158df5=_0x1a0039;this['push'](_0x158df5(0x1be),_0x138038);if(!VisuMZ[_0x158df5(0xa1e)][_0x158df5(0x4ce)]['BattleLog'][_0x158df5(0x89f)])return;this['push'](_0x158df5(0x827),TextManager[_0x158df5(0x617)][_0x158df5(0x4a8)](_0x138038[_0x158df5(0x192)]()));},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xbb7)]=function(_0x5ab28d,_0x1e3fed){const _0x42866c=_0x1a0039;if(VisuMZ[_0x42866c(0xa1e)][_0x42866c(0x4ce)][_0x42866c(0x36e)]['ReflectPlayback']){const _0x53429a=_0x1e3fed[_0x42866c(0x19a)]();this[_0x42866c(0xb15)]('showAnimation',_0x5ab28d,[_0x5ab28d],_0x53429a[_0x42866c(0x7f4)]);}},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x959)]=function(_0x2f9f81,_0x3f12db){const _0x1b7cc0=_0x1a0039;this[_0x1b7cc0(0xb15)]('performSubstitute',_0x2f9f81,_0x3f12db);if(!VisuMZ[_0x1b7cc0(0xa1e)][_0x1b7cc0(0x4ce)][_0x1b7cc0(0x636)][_0x1b7cc0(0x691)])return;const _0x12cfab=_0x2f9f81[_0x1b7cc0(0x192)](),_0x1cb122=TextManager['substitute'][_0x1b7cc0(0x4a8)](_0x12cfab,_0x3f12db[_0x1b7cc0(0x192)]());this['push'](_0x1b7cc0(0x827),_0x1cb122);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xbda)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x703)],Window_BattleLog['prototype']['displayActionResults']=function(_0x3d8d1f,_0x541900){const _0x302684=_0x1a0039;VisuMZ['BattleCore'][_0x302684(0xbda)]['call'](this,_0x3d8d1f,_0x541900),this[_0x302684(0xb15)]('clear');},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xb40)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x24c)],Window_BattleLog['prototype'][_0x1a0039(0x24c)]=function(_0x484537){const _0x1851d9=_0x1a0039;if(!VisuMZ[_0x1851d9(0xa1e)][_0x1851d9(0x4ce)][_0x1851d9(0x636)][_0x1851d9(0x7e7)])return;VisuMZ[_0x1851d9(0xa1e)]['Window_BattleLog_displayFailure'][_0x1851d9(0xb33)](this,_0x484537);},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x3e9)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x86e)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x86e)]=function(_0x89b9af){const _0x1920ef=_0x1a0039;if(!VisuMZ[_0x1920ef(0xa1e)][_0x1920ef(0x4ce)][_0x1920ef(0x636)][_0x1920ef(0x9ff)])return;VisuMZ[_0x1920ef(0xa1e)]['Window_BattleLog_displayCritical'][_0x1920ef(0xb33)](this,_0x89b9af);},VisuMZ['BattleCore'][_0x1a0039(0x71d)]=Window_BattleLog['prototype'][_0x1a0039(0x58c)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x58c)]=function(_0x3939ba){const _0x2c90e3=_0x1a0039;if(!VisuMZ[_0x2c90e3(0xa1e)][_0x2c90e3(0x4ce)][_0x2c90e3(0x636)]['ShowMissEvasion'])this[_0x2c90e3(0xb15)]('performMiss',_0x3939ba);else{if(_0x2c90e3(0x8d8)===_0x2c90e3(0x8d8))VisuMZ[_0x2c90e3(0xa1e)][_0x2c90e3(0x71d)][_0x2c90e3(0xb33)](this,_0x3939ba);else{const _0x30d650=this[_0x2c90e3(0x241)](),_0xb870b4=_0x30d650[0x0]?_0x30d650[0x0][_0x2c90e3(0x40e)]:0x0;return _0x2f00d7[_0x2c90e3(0x354)][_0xb870b4];}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xaa6)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x6d8)],Window_BattleLog['prototype'][_0x1a0039(0x6d8)]=function(_0xde84a0){const _0x2fbfdd=_0x1a0039;!VisuMZ['BattleCore'][_0x2fbfdd(0x4ce)]['BattleLog']['ShowMissEvasion']?_0xde84a0['result']()['physical']?this[_0x2fbfdd(0xb15)](_0x2fbfdd(0x762),_0xde84a0):this[_0x2fbfdd(0xb15)]('performMagicEvasion',_0xde84a0):VisuMZ[_0x2fbfdd(0xa1e)][_0x2fbfdd(0xaa6)][_0x2fbfdd(0xb33)](this,_0xde84a0);},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x5f5)]=function(_0x550d5e){const _0x5c2e18=_0x1a0039;_0x550d5e[_0x5c2e18(0x246)]()['hpAffected']&&(_0x550d5e[_0x5c2e18(0x246)]()[_0x5c2e18(0x225)]>0x0&&!_0x550d5e['result']()[_0x5c2e18(0x89d)]&&this[_0x5c2e18(0xb15)](_0x5c2e18(0x5a8),_0x550d5e),_0x550d5e[_0x5c2e18(0x246)]()[_0x5c2e18(0x225)]<0x0&&this['push'](_0x5c2e18(0x1ff),_0x550d5e),VisuMZ[_0x5c2e18(0xa1e)][_0x5c2e18(0x4ce)][_0x5c2e18(0x636)][_0x5c2e18(0xabb)]&&this['push'](_0x5c2e18(0x827),this[_0x5c2e18(0x6df)](_0x550d5e)));},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x89e)]=Window_BattleLog[_0x1a0039(0x6d2)]['displayMpDamage'],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x50b)]=function(_0x35976e){const _0x4493d6=_0x1a0039;if(!VisuMZ[_0x4493d6(0xa1e)][_0x4493d6(0x4ce)][_0x4493d6(0x636)]['ShowMpDmg'])return;VisuMZ[_0x4493d6(0xa1e)][_0x4493d6(0x89e)][_0x4493d6(0xb33)](this,_0x35976e);},VisuMZ[_0x1a0039(0xa1e)]['Window_BattleLog_displayTpDamage']=Window_BattleLog['prototype'][_0x1a0039(0x129)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x129)]=function(_0x220a19){const _0x94bcee=_0x1a0039;if(!VisuMZ[_0x94bcee(0xa1e)][_0x94bcee(0x4ce)][_0x94bcee(0x636)]['ShowTpDmg'])return;VisuMZ['BattleCore']['Window_BattleLog_displayTpDamage']['call'](this,_0x220a19);},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x398)]=function(_0x56a949){const _0x32e996=_0x1a0039;_0x56a949[_0x32e996(0x246)]()['isStatusAffected']()&&(this[_0x32e996(0xb15)]('pushBaseLine'),this[_0x32e996(0x247)](_0x56a949),this[_0x32e996(0x277)](_0x56a949),this[_0x32e996(0xb15)](_0x32e996(0x4c7)));},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xa65)]=function(_0x3aadb5){const _0x28df88=_0x1a0039,_0x2731b6=_0x3aadb5[_0x28df88(0x246)](),_0x24f886=_0x2731b6[_0x28df88(0x3ca)]();for(const _0x571d33 of _0x24f886){const _0x409581=_0x3aadb5[_0x28df88(0x261)]()?_0x571d33[_0x28df88(0x6a6)]:_0x571d33['message2'];_0x409581&&VisuMZ[_0x28df88(0xa1e)][_0x28df88(0x4ce)][_0x28df88(0x636)][_0x28df88(0x30d)]&&(this['push'](_0x28df88(0x50f)),this[_0x28df88(0xb15)](_0x28df88(0x5ef)),this['push']('pushBaseLine'),this[_0x28df88(0xb15)](_0x28df88(0x827),_0x409581[_0x28df88(0x4a8)](_0x3aadb5[_0x28df88(0x192)]())),this['push'](_0x28df88(0x730))),_0x571d33['id']===_0x3aadb5['deathStateId']()&&this['push']('performCollapse',_0x3aadb5);}},Window_BattleLog[_0x1a0039(0x6d2)]['fnordAddedStates']=function(){},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x971)]=function(_0xf24a36){const _0x4aa965=_0x1a0039;if(!VisuMZ[_0x4aa965(0xa1e)][_0x4aa965(0x4ce)]['BattleLog'][_0x4aa965(0x37e)])return;const _0x2c1ff2=_0xf24a36[_0x4aa965(0x246)](),_0x285c53=_0x2c1ff2['removedStateObjects']();for(const _0x349d5c of _0x285c53){if(_0x349d5c['message4']){if(_0x4aa965(0x619)!==_0x4aa965(0x1bf))this[_0x4aa965(0xb15)]('fnordRemovedStates'),this[_0x4aa965(0xb15)](_0x4aa965(0x5ef)),this[_0x4aa965(0xb15)](_0x4aa965(0x7c7)),this['push']('addText',_0x349d5c[_0x4aa965(0x226)][_0x4aa965(0x4a8)](_0xf24a36['name']())),this[_0x4aa965(0xb15)](_0x4aa965(0x730));else return 0x0;}}},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x214)]=function(){},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x277)]=function(_0x2d0dca){const _0x675433=_0x1a0039,_0x381f74=VisuMZ[_0x675433(0xa1e)][_0x675433(0x4ce)][_0x675433(0x636)],_0x42d651=_0x2d0dca[_0x675433(0x246)]();if(_0x381f74[_0x675433(0x5ba)])this[_0x675433(0x180)](_0x2d0dca,_0x42d651['addedBuffs'],TextManager[_0x675433(0x51f)]);if(_0x381f74[_0x675433(0x561)])this['displayBuffs'](_0x2d0dca,_0x42d651[_0x675433(0x1a3)],TextManager[_0x675433(0x96f)]);if(_0x381f74[_0x675433(0x744)])this[_0x675433(0x180)](_0x2d0dca,_0x42d651[_0x675433(0x6da)],TextManager[_0x675433(0x357)]);},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x180)]=function(_0x24b9d1,_0x587c43,_0x1c3e4b){const _0x5ae289=_0x1a0039;for(const _0x499e61 of _0x587c43){if(_0x5ae289(0x788)!==_0x5ae289(0x329)){const _0x300042=_0x1c3e4b[_0x5ae289(0x4a8)](_0x24b9d1[_0x5ae289(0x192)](),TextManager[_0x5ae289(0x581)](_0x499e61));this[_0x5ae289(0xb15)](_0x5ae289(0x5ef)),this[_0x5ae289(0xb15)](_0x5ae289(0x7c7)),this[_0x5ae289(0xb15)]('addText',_0x300042),this[_0x5ae289(0xb15)](_0x5ae289(0x730));}else{const _0x445e08=_0x20b7b7[_0x5ae289(0xadc)](_0xb8bcd2);return _0x445e08>=0x0?[_0x112509[_0x445e08+0x1]||_0x43c20d]:[_0x37c6d0];}}},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x51e)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xaf1)],Window_BattleLog[_0x1a0039(0x6d2)]['clear']=function(){const _0x4745a9=_0x1a0039;VisuMZ[_0x4745a9(0xa1e)][_0x4745a9(0x51e)][_0x4745a9(0xb33)](this),this[_0x4745a9(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x7c7)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x7c7)]=function(){const _0x28a7a0=_0x1a0039;VisuMZ[_0x28a7a0(0xa1e)][_0x28a7a0(0x397)][_0x28a7a0(0xb33)](this),this[_0x28a7a0(0x15a)]();},VisuMZ['BattleCore'][_0x1a0039(0xb53)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x5ef)],Window_BattleLog['prototype'][_0x1a0039(0x5ef)]=function(){const _0x4df1a7=_0x1a0039;VisuMZ[_0x4df1a7(0xa1e)][_0x4df1a7(0xb53)][_0x4df1a7(0xb33)](this),this[_0x4df1a7(0x684)](),this[_0x4df1a7(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xa52)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x63b)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x63b)]=function(_0xcf7a4b){const _0x19d431=_0x1a0039;VisuMZ[_0x19d431(0xa1e)][_0x19d431(0xa52)]['call'](this,_0xcf7a4b),this[_0x19d431(0x15a)]();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x4c7)]=function(){const _0x36052a=_0x1a0039;let _0x2cd351=0x0;this[_0x36052a(0x238)]['length']>0x0&&(_0x36052a(0x7cb)==='HiblD'?_0x2cd351=this[_0x36052a(0x238)][this['_baseLineStack'][_0x36052a(0x2c0)]-0x1]:(_0x3fb8d7[_0x36052a(0xa1e)][_0x36052a(0x396)][_0x36052a(0xb33)](this),_0x3c2725['onBattleStartOnceParallels']())),this[_0x36052a(0xab7)][_0x36052a(0x2c0)]>_0x2cd351?this[_0x36052a(0x730)]():this[_0x36052a(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x894)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x2fa)],Window_BattleLog['prototype'][_0x1a0039(0x2fa)]=function(_0x26e6a9,_0x1154f0){const _0x214d79=_0x1a0039;VisuMZ[_0x214d79(0xa1e)]['Window_BattleLog_performActionStart']['call'](this,_0x26e6a9,_0x1154f0),this[_0x214d79(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x99e)]=Window_BattleLog['prototype'][_0x1a0039(0x566)],Window_BattleLog[_0x1a0039(0x6d2)]['performAction']=function(_0x4c2412,_0x5894ac){const _0x8ee262=_0x1a0039;VisuMZ[_0x8ee262(0xa1e)]['Window_BattleLog_performAction'][_0x8ee262(0xb33)](this,_0x4c2412,_0x5894ac),this[_0x8ee262(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0xac5)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xbd8)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xbd8)]=function(_0x228705){const _0x4c36c7=_0x1a0039;VisuMZ['BattleCore'][_0x4c36c7(0xac5)][_0x4c36c7(0xb33)](this,_0x228705);for(const _0x31176b of BattleManager[_0x4c36c7(0x142)]()){if(_0x4c36c7(0x5e3)===_0x4c36c7(0x36c))_0x477222=_0x8a745f[_0x4c36c7(0x5d3)]/0x2,_0x3757c7=_0x1069b4[_0x4c36c7(0x7b0)]/0x2;else{if(!_0x31176b)continue;if(_0x31176b[_0x4c36c7(0x93b)]())continue;_0x31176b['performActionEndMembers']();}}this[_0x4c36c7(0x15a)]();},VisuMZ['BattleCore']['Window_BattleLog_performDamage']=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x5a8)],Window_BattleLog['prototype']['performDamage']=function(_0x32af34){const _0x50b118=_0x1a0039;VisuMZ[_0x50b118(0xa1e)][_0x50b118(0xa9a)][_0x50b118(0xb33)](this,_0x32af34),this[_0x50b118(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x71a)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xa18)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0xa18)]=function(_0x5748d5){const _0x2eec45=_0x1a0039;VisuMZ[_0x2eec45(0xa1e)][_0x2eec45(0x71a)][_0x2eec45(0xb33)](this,_0x5748d5),this[_0x2eec45(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x289)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x1ff)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x1ff)]=function(_0x22880f){const _0x27a819=_0x1a0039;VisuMZ[_0x27a819(0xa1e)][_0x27a819(0x289)][_0x27a819(0xb33)](this,_0x22880f),this['callNextMethod']();},VisuMZ['BattleCore'][_0x1a0039(0x595)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x762)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x762)]=function(_0x58a137){const _0x1dbfc0=_0x1a0039;VisuMZ[_0x1dbfc0(0xa1e)]['Window_BattleLog_performEvasion'][_0x1dbfc0(0xb33)](this,_0x58a137),this['callNextMethod']();},VisuMZ[_0x1a0039(0xa1e)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x739)],Window_BattleLog[_0x1a0039(0x6d2)]['performMagicEvasion']=function(_0x41dfbf){const _0x208a24=_0x1a0039;VisuMZ['BattleCore'][_0x208a24(0x2f8)][_0x208a24(0xb33)](this,_0x41dfbf),this[_0x208a24(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x1e3)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x56f)],Window_BattleLog['prototype'][_0x1a0039(0x56f)]=function(_0x3db05c){const _0x32205b=_0x1a0039;VisuMZ[_0x32205b(0xa1e)][_0x32205b(0x1e3)][_0x32205b(0xb33)](this,_0x3db05c),this[_0x32205b(0x15a)]();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x704)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x1be)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x1be)]=function(_0x2553db){const _0x4d5e2f=_0x1a0039;VisuMZ[_0x4d5e2f(0xa1e)][_0x4d5e2f(0x704)]['call'](this,_0x2553db),this['callNextMethod']();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x8ce)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x451)],Window_BattleLog['prototype'][_0x1a0039(0x451)]=function(_0x25b4ad,_0x41474d){const _0x455457=_0x1a0039;VisuMZ[_0x455457(0xa1e)]['Window_BattleLog_performSubstitute'][_0x455457(0xb33)](this,_0x25b4ad,_0x41474d),this['callNextMethod']();},VisuMZ[_0x1a0039(0xa1e)][_0x1a0039(0x198)]=Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x4a6)],Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x4a6)]=function(_0x3d7dfb){const _0x224c28=_0x1a0039;VisuMZ[_0x224c28(0xa1e)][_0x224c28(0x198)][_0x224c28(0xb33)](this,_0x3d7dfb),this['callNextMethod']();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x495)]=function(_0x53c9ce,_0x1c078e){const _0xe9ece7=_0x1a0039;_0x53c9ce['performCastAnimation'](_0x1c078e),this[_0xe9ece7(0x15a)]();},Window_BattleLog['prototype']['showEnemyAttackAnimation']=function(_0xe3828d,_0x174185){const _0x1b92b1=_0x1a0039,_0x53d8b5=_0xe3828d[_0x1b92b1(0x7fe)]();_0x53d8b5<=0x0?SoundManager[_0x1b92b1(0x22c)]():this[_0x1b92b1(0x181)](_0x174185,_0x53d8b5);},Window_BattleLog['prototype']['applyImmortal']=function(_0x4d41fd,_0x4df1d7,_0x5555c8){const _0x5dbd03=_0x1a0039,_0x3d9cf5=[_0x4d41fd]['concat'](_0x4df1d7);for(const _0x21f120 of _0x3d9cf5){if(_0x5dbd03(0x332)!==_0x5dbd03(0x332))this[_0x5dbd03(0x496)](_0x5dbd03(0x5b4));else{if(!_0x21f120)continue;_0x21f120[_0x5dbd03(0xbec)](_0x5555c8);}}this['callNextMethod']();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x2d4)]=function(_0x1df950){this['_waitCount']=_0x1df950;},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x496)]=function(_0x2a485c,_0x51612a){const _0x413ac0=_0x1a0039;for(const _0x10a505 of _0x2a485c){if(_0x413ac0(0x643)===_0x413ac0(0x643)){if(!_0x10a505)continue;_0x10a505[_0x413ac0(0x496)](_0x51612a);}else{_0x3003a2[_0x413ac0(0xa1e)][_0x413ac0(0xba3)]['call'](this);if(this[_0x413ac0(0xabe)]&&!_0x59cda6['_subject'])this[_0x413ac0(0x881)]();}}this[_0x413ac0(0x15a)]();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x8a2)]=function(_0x3002fa,_0x57d784,_0x223b35,_0x3b8529,_0x2c3ea1,_0x4682b1){const _0x1afc9a=_0x1a0039;_0x3002fa[_0x1afc9a(0x347)](_0x57d784,_0x223b35,_0x3b8529,_0x2c3ea1,_0x4682b1,-0x1),this['callNextMethod']();},Window_BattleLog[_0x1a0039(0x6d2)][_0x1a0039(0x666)]=function(_0x182fa0,_0xd27ff1,_0x19f928,_0xa8b8ab,_0x22cad4,_0x1ed96f,_0x28be86){const _0x1fdefc=_0x1a0039,_0x36545a=Math[_0x1fdefc(0x409)](..._0xd27ff1[_0x1fdefc(0x73b)](_0x22792c=>_0x22792c[_0x1fdefc(0x68a)]()[_0x1fdefc(0x1d4)]-_0x22792c[_0x1fdefc(0x68a)]()[_0x1fdefc(0x393)]()/0x2)),_0x5906ff=Math['max'](..._0xd27ff1[_0x1fdefc(0x73b)](_0x525264=>_0x525264['battler']()[_0x1fdefc(0x1d4)]+_0x525264[_0x1fdefc(0x68a)]()[_0x1fdefc(0x393)]()/0x2)),_0x429dc0=Math['min'](..._0xd27ff1[_0x1fdefc(0x73b)](_0x5176a3=>_0x5176a3[_0x1fdefc(0x68a)]()[_0x1fdefc(0x9da)]-_0x5176a3['battler']()[_0x1fdefc(0x889)]())),_0x5a1400=Math['max'](..._0xd27ff1[_0x1fdefc(0x73b)](_0x4a4ac6=>_0x4a4ac6[_0x1fdefc(0x68a)]()[_0x1fdefc(0x9da)])),_0x7b8e52=_0xd27ff1[_0x1fdefc(0x538)](_0x5dbee7=>_0x5dbee7['isActor']())[_0x1fdefc(0x2c0)],_0x59d5fc=_0xd27ff1[_0x1fdefc(0x538)](_0x1667d5=>_0x1667d5[_0x1fdefc(0x795)]())['length'];let _0x28b9bc=0x0,_0x57fc46=0x0;if(_0x19f928['match'](/front/i))_0x28b9bc=_0x7b8e52>=_0x59d5fc?_0x36545a:_0x5906ff;else{if(_0x19f928[_0x1fdefc(0x7f1)](/middle/i))_0x28b9bc=(_0x36545a+_0x5906ff)/0x2,_0x28be86=-0x1;else _0x19f928[_0x1fdefc(0x7f1)](/back/i)&&(_0x28b9bc=_0x7b8e52>=_0x59d5fc?_0x5906ff:_0x36545a);}if(_0x19f928[_0x1fdefc(0x7f1)](/head/i)){if(_0x1fdefc(0x758)!==_0x1fdefc(0x362))_0x57fc46=_0x429dc0;else{const _0x5b36e5=this[_0x1fdefc(0x9f9)](_0x4597a5);if(_0x5b36e5===_0x1fdefc(0x3ba))this[_0x1fdefc(0x990)](_0x507cc5);else _0x5b36e5===_0x1fdefc(0x4cd)?this['drawItemStyleIcon'](_0x3794fb):_0x4d5298[_0x1fdefc(0x6d2)][_0x1fdefc(0x6ac)][_0x1fdefc(0xb33)](this,_0x4713f7);}}else{if(_0x19f928[_0x1fdefc(0x7f1)](/center/i))_0x1fdefc(0x6b6)===_0x1fdefc(0x6b6)?_0x57fc46=(_0x429dc0+_0x5a1400)/0x2:(_0xa720f1&&_0x524c1c[_0x1fdefc(0x261)]()&&_0xcde840['setActiveWeaponSlot'](_0x17ab5),this[_0x1fdefc(0x15a)]());else _0x19f928[_0x1fdefc(0x7f1)](/base/i)&&(_0x57fc46=_0x5a1400);}_0x182fa0['moveBattlerToPoint'](_0x28b9bc,_0x57fc46,_0xa8b8ab,_0x22cad4,_0x1ed96f,_0x28be86),this[_0x1fdefc(0x15a)]();},Window_BattleLog['prototype']['performJump']=function(_0xc8dc34,_0x5180ab,_0x3f3c9e){const _0x182d4c=_0x1a0039;for(const _0x116171 of _0xc8dc34){if(!_0x116171)continue;_0x116171[_0x182d4c(0x341)](_0x5180ab,_0x3f3c9e);}this['callNextMethod']();};